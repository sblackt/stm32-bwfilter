
dsp12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce20  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014d88  0800cfc0  0800cfc0  0000dfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d48  08021d48  000231ec  2**0
                  CONTENTS
  4 .ARM          00000008  08021d48  08021d48  00022d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d50  08021d50  000231ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d50  08021d50  00022d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021d54  08021d54  00022d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  08021d58  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005544  200001ec  08021f44  000231ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005730  08021f44  00023730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000231ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136bc  00000000  00000000  0002321c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d86  00000000  00000000  000368d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00039660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d54  00000000  00000000  0003a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc13  00000000  00000000  0003b52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018482  00000000  00000000  0005913f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f809  00000000  00000000  000715c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110dca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005900  00000000  00000000  00110e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00116710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001ec 	.word	0x200001ec
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cfa8 	.word	0x0800cfa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f0 	.word	0x200001f0
 80001dc:	0800cfa8 	.word	0x0800cfa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f004 f819 	bl	8004ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f877 	bl	8000fa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 fa21 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 8000eba:	f000 f9e9 	bl	8001290 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ebe:	f000 f8d1 	bl	8001064 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000ec2:	f000 f96f 	bl	80011a4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000ec6:	f000 f91f 	bl	8001108 <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);  // Wait for OLED power-up
 8000eca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ece:	f004 f87b 	bl	8004fc8 <HAL_Delay>

  HAL_StatusTypeDef result;
  uint8_t address = 0x3C << 1;  // Default SSD1306 I2C address
 8000ed2:	2378      	movs	r3, #120	@ 0x78
 8000ed4:	71fb      	strb	r3, [r7, #7]

  // Check if OLED is detected
  result = HAL_I2C_IsDeviceReady(&hi2c1, address, 3, HAL_MAX_DELAY);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	b299      	uxth	r1, r3
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ede:	2203      	movs	r2, #3
 8000ee0:	4826      	ldr	r0, [pc, #152]	@ (8000f7c <main+0xd4>)
 8000ee2:	f005 fd51 	bl	8006988 <HAL_I2C_IsDeviceReady>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71bb      	strb	r3, [r7, #6]
  if (result != HAL_OK) {
 8000eea:	79bb      	ldrb	r3, [r7, #6]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <main+0x70>
      ssd1306_Init();
 8000ef0:	f000 fd42 	bl	8001978 <ssd1306_Init>
      ssd1306_Fill(Black);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fda9 	bl	8001a4c <ssd1306_Fill>
      ssd1306_SetCursor(10, 10);
 8000efa:	210a      	movs	r1, #10
 8000efc:	200a      	movs	r0, #10
 8000efe:	f000 fef1 	bl	8001ce4 <ssd1306_SetCursor>
      ssd1306_WriteString("I2C FAIL", Font_7x10, White);
 8000f02:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <main+0xd8>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	9200      	str	r2, [sp, #0]
 8000f08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f0a:	481e      	ldr	r0, [pc, #120]	@ (8000f84 <main+0xdc>)
 8000f0c:	f000 fec4 	bl	8001c98 <ssd1306_WriteString>
      ssd1306_UpdateScreen();
 8000f10:	f000 fdb4 	bl	8001a7c <ssd1306_UpdateScreen>
      while (1);
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <main+0x6c>
  }

  // ✅ OLED is detected, continue initialization
  ssd1306_Init();
 8000f18:	f000 fd2e 	bl	8001978 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 fd95 	bl	8001a4c <ssd1306_Fill>
  ssd1306_SetCursor(10, 10);
 8000f22:	210a      	movs	r1, #10
 8000f24:	200a      	movs	r0, #10
 8000f26:	f000 fedd 	bl	8001ce4 <ssd1306_SetCursor>
  ssd1306_WriteString("VA3WAV", Font_11x18, White);
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <main+0xe0>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	9200      	str	r2, [sp, #0]
 8000f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f32:	4816      	ldr	r0, [pc, #88]	@ (8000f8c <main+0xe4>)
 8000f34:	f000 feb0 	bl	8001c98 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000f38:	f000 fda0 	bl	8001a7c <ssd1306_UpdateScreen>

  // ✅ Initialize FFT
  arm_rfft_fast_init_f32(&fft_instance, FFT_SIZE);
 8000f3c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f40:	4813      	ldr	r0, [pc, #76]	@ (8000f90 <main+0xe8>)
 8000f42:	f003 ff67 	bl	8004e14 <arm_rfft_fast_init_f32>

  Init_Display();
 8000f46:	f000 fb05 	bl	8001554 <Init_Display>
  Update_Display();  // Show filter parameters
 8000f4a:	f000 fb25 	bl	8001598 <Update_Display>

  // ✅ Start ADC and PWM DMA
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, AUDIO_BUFFER_SIZE);
 8000f4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f52:	4910      	ldr	r1, [pc, #64]	@ (8000f94 <main+0xec>)
 8000f54:	4810      	ldr	r0, [pc, #64]	@ (8000f98 <main+0xf0>)
 8000f56:	f004 f89f 	bl	8005098 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_2, (uint32_t*)pwm_buffer, AUDIO_BUFFER_SIZE);
 8000f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f9c <main+0xf4>)
 8000f60:	2104      	movs	r1, #4
 8000f62:	480f      	ldr	r0, [pc, #60]	@ (8000fa0 <main+0xf8>)
 8000f64:	f008 fa6c 	bl	8009440 <HAL_TIM_PWM_Start_DMA>


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { Read_Encoder();  // Check encoder rotation
 8000f68:	f000 fc0a 	bl	8001780 <Read_Encoder>
  Update_Display();  // Refresh OLED if value changed
 8000f6c:	f000 fb14 	bl	8001598 <Update_Display>
  HAL_Delay(2);  // Avoid excessive updates
 8000f70:	2002      	movs	r0, #2
 8000f72:	f004 f829 	bl	8004fc8 <HAL_Delay>
  { Read_Encoder();  // Check encoder rotation
 8000f76:	bf00      	nop
 8000f78:	e7f6      	b.n	8000f68 <main+0xc0>
 8000f7a:	bf00      	nop
 8000f7c:	200002b0 	.word	0x200002b0
 8000f80:	0800e4c4 	.word	0x0800e4c4
 8000f84:	0800cfc0 	.word	0x0800cfc0
 8000f88:	0800e4d0 	.word	0x0800e4d0
 8000f8c:	0800cfcc 	.word	0x0800cfcc
 8000f90:	200053ac 	.word	0x200053ac
 8000f94:	200003ac 	.word	0x200003ac
 8000f98:	20000208 	.word	0x20000208
 8000f9c:	20000bac 	.word	0x20000bac
 8000fa0:	20000304 	.word	0x20000304

08000fa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b094      	sub	sp, #80	@ 0x50
 8000fa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000faa:	f107 0320 	add.w	r3, r7, #32
 8000fae:	2230      	movs	r2, #48	@ 0x30
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 feec 	bl	800ad90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	4b23      	ldr	r3, [pc, #140]	@ (800105c <SystemClock_Config+0xb8>)
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	4a22      	ldr	r2, [pc, #136]	@ (800105c <SystemClock_Config+0xb8>)
 8000fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fd8:	4b20      	ldr	r3, [pc, #128]	@ (800105c <SystemClock_Config+0xb8>)
 8000fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <SystemClock_Config+0xbc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	@ (8001060 <SystemClock_Config+0xbc>)
 8000ff2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b19      	ldr	r3, [pc, #100]	@ (8001060 <SystemClock_Config+0xbc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001004:	2302      	movs	r3, #2
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100c:	2310      	movs	r3, #16
 800100e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001010:	2300      	movs	r3, #0
 8001012:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001014:	f107 0320 	add.w	r3, r7, #32
 8001018:	4618      	mov	r0, r3
 800101a:	f007 fd25 	bl	8008a68 <HAL_RCC_OscConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001024:	f000 fc68 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001028:	230f      	movs	r3, #15
 800102a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f007 ff88 	bl	8008f58 <HAL_RCC_ClockConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800104e:	f000 fc53 	bl	80018f8 <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	3750      	adds	r7, #80	@ 0x50
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800106a:	463b      	mov	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001076:	4b21      	ldr	r3, [pc, #132]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001078:	4a21      	ldr	r2, [pc, #132]	@ (8001100 <MX_ADC1_Init+0x9c>)
 800107a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800107c:	4b1f      	ldr	r3, [pc, #124]	@ (80010fc <MX_ADC1_Init+0x98>)
 800107e:	2200      	movs	r2, #0
 8001080:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001082:	4b1e      	ldr	r3, [pc, #120]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001088:	4b1c      	ldr	r3, [pc, #112]	@ (80010fc <MX_ADC1_Init+0x98>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001094:	4b19      	ldr	r3, [pc, #100]	@ (80010fc <MX_ADC1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_ADC1_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010a2:	4b16      	ldr	r3, [pc, #88]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010a4:	4a17      	ldr	r2, [pc, #92]	@ (8001104 <MX_ADC1_Init+0xa0>)
 80010a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80010ae:	4b13      	ldr	r3, [pc, #76]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010b4:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010be:	2201      	movs	r2, #1
 80010c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c2:	480e      	ldr	r0, [pc, #56]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010c4:	f003 ffa4 	bl	8005010 <HAL_ADC_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80010ce:	f000 fc13 	bl	80018f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	4806      	ldr	r0, [pc, #24]	@ (80010fc <MX_ADC1_Init+0x98>)
 80010e4:	f004 f8dc 	bl	80052a0 <HAL_ADC_ConfigChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80010ee:	f000 fc03 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000208 	.word	0x20000208
 8001100:	40012000 	.word	0x40012000
 8001104:	0f000001 	.word	0x0f000001

08001108 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */
	  // Reset I2C Bus: Set SCL and SDA High
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // SCL High
 800110c:	2201      	movs	r2, #1
 800110e:	2140      	movs	r1, #64	@ 0x40
 8001110:	481f      	ldr	r0, [pc, #124]	@ (8001190 <MX_I2C1_Init+0x88>)
 8001112:	f005 f9b3 	bl	800647c <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  // SDA High
 8001116:	2201      	movs	r2, #1
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	481d      	ldr	r0, [pc, #116]	@ (8001190 <MX_I2C1_Init+0x88>)
 800111c:	f005 f9ae 	bl	800647c <HAL_GPIO_WritePin>
	    HAL_Delay(10);
 8001120:	200a      	movs	r0, #10
 8001122:	f003 ff51 	bl	8004fc8 <HAL_Delay>

	    // Force I2C1 Reset
	    __HAL_RCC_I2C1_FORCE_RESET();
 8001126:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_I2C1_Init+0x8c>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	4a1a      	ldr	r2, [pc, #104]	@ (8001194 <MX_I2C1_Init+0x8c>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001130:	6213      	str	r3, [r2, #32]
	    HAL_Delay(10);
 8001132:	200a      	movs	r0, #10
 8001134:	f003 ff48 	bl	8004fc8 <HAL_Delay>
	    __HAL_RCC_I2C1_RELEASE_RESET();
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_I2C1_Init+0x8c>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a15      	ldr	r2, [pc, #84]	@ (8001194 <MX_I2C1_Init+0x8c>)
 800113e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001142:	6213      	str	r3, [r2, #32]

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */

	    hi2c1.Instance = I2C1;
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <MX_I2C1_Init+0x90>)
 8001146:	4a15      	ldr	r2, [pc, #84]	@ (800119c <MX_I2C1_Init+0x94>)
 8001148:	601a      	str	r2, [r3, #0]
	    hi2c1.Init.ClockSpeed = 100000;  // ✅ Standard I2C speed
 800114a:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <MX_I2C1_Init+0x90>)
 800114c:	4a14      	ldr	r2, [pc, #80]	@ (80011a0 <MX_I2C1_Init+0x98>)
 800114e:	605a      	str	r2, [r3, #4]
	    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <MX_I2C1_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
	    hi2c1.Init.OwnAddress1 = 0;
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <MX_I2C1_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
	    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800115c:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <MX_I2C1_Init+0x90>)
 800115e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001162:	611a      	str	r2, [r3, #16]
	    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <MX_I2C1_Init+0x90>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
	    hi2c1.Init.OwnAddress2 = 0;
 800116a:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <MX_I2C1_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
	    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <MX_I2C1_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
	    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001176:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <MX_I2C1_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]

	    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117c:	4806      	ldr	r0, [pc, #24]	@ (8001198 <MX_I2C1_Init+0x90>)
 800117e:	f005 f9af 	bl	80064e0 <HAL_I2C_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x84>
	    {
	        Error_Handler();
 8001188:	f000 fbb6 	bl	80018f8 <Error_Handler>
	    }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40020400 	.word	0x40020400
 8001194:	40023800 	.word	0x40023800
 8001198:	200002b0 	.word	0x200002b0
 800119c:	40005400 	.word	0x40005400
 80011a0:	000186a0 	.word	0x000186a0

080011a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08e      	sub	sp, #56	@ 0x38
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011dc:	4b2b      	ldr	r3, [pc, #172]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 80011e8:	4b28      	ldr	r3, [pc, #160]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011ea:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80011ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b26      	ldr	r3, [pc, #152]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011f6:	4b25      	ldr	r3, [pc, #148]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011f8:	2280      	movs	r2, #128	@ 0x80
 80011fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fc:	4823      	ldr	r0, [pc, #140]	@ (800128c <MX_TIM2_Init+0xe8>)
 80011fe:	f008 f877 	bl	80092f0 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001208:	f000 fb76 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001216:	4619      	mov	r1, r3
 8001218:	481c      	ldr	r0, [pc, #112]	@ (800128c <MX_TIM2_Init+0xe8>)
 800121a:	f008 fb83 	bl	8009924 <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001224:	f000 fb68 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001228:	4818      	ldr	r0, [pc, #96]	@ (800128c <MX_TIM2_Init+0xe8>)
 800122a:	f008 f8b0 	bl	800938e <HAL_TIM_PWM_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001234:	f000 fb60 	bl	80018f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001238:	2300      	movs	r3, #0
 800123a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001240:	f107 0320 	add.w	r3, r7, #32
 8001244:	4619      	mov	r1, r3
 8001246:	4811      	ldr	r0, [pc, #68]	@ (800128c <MX_TIM2_Init+0xe8>)
 8001248:	f008 fffa 	bl	800a240 <HAL_TIMEx_MasterConfigSynchronization>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001252:	f000 fb51 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001256:	2360      	movs	r3, #96	@ 0x60
 8001258:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001262:	2304      	movs	r3, #4
 8001264:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2204      	movs	r2, #4
 800126a:	4619      	mov	r1, r3
 800126c:	4807      	ldr	r0, [pc, #28]	@ (800128c <MX_TIM2_Init+0xe8>)
 800126e:	f008 fa97 	bl	80097a0 <HAL_TIM_PWM_ConfigChannel>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001278:	f000 fb3e 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800127c:	4803      	ldr	r0, [pc, #12]	@ (800128c <MX_TIM2_Init+0xe8>)
 800127e:	f000 fecd 	bl	800201c <HAL_TIM_MspPostInit>

}
 8001282:	bf00      	nop
 8001284:	3738      	adds	r7, #56	@ 0x38
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000304 	.word	0x20000304

08001290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_DMA_Init+0x68>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a16      	ldr	r2, [pc, #88]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	603b      	str	r3, [r7, #0]
 80012b6:	4b10      	ldr	r3, [pc, #64]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a0f      	ldr	r2, [pc, #60]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <MX_DMA_Init+0x68>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2011      	movs	r0, #17
 80012d4:	f004 fb5f 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80012d8:	2011      	movs	r0, #17
 80012da:	f004 fb78 	bl	80059ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012de:	2200      	movs	r2, #0
 80012e0:	2100      	movs	r1, #0
 80012e2:	2038      	movs	r0, #56	@ 0x38
 80012e4:	f004 fb57 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e8:	2038      	movs	r0, #56	@ 0x38
 80012ea:	f004 fb70 	bl	80059ce <HAL_NVIC_EnableIRQ>

}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b21      	ldr	r3, [pc, #132]	@ (800139c <MX_GPIO_Init+0xa0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a20      	ldr	r2, [pc, #128]	@ (800139c <MX_GPIO_Init+0xa0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b1e      	ldr	r3, [pc, #120]	@ (800139c <MX_GPIO_Init+0xa0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b1a      	ldr	r3, [pc, #104]	@ (800139c <MX_GPIO_Init+0xa0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a19      	ldr	r2, [pc, #100]	@ (800139c <MX_GPIO_Init+0xa0>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_GPIO_Init+0xa0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */


  // ✅ Configure CLK (PB14) and DT (PB13) as input **without internal pull-up**
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800134a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800134e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001350:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001354:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;  // ✅ Disable internal pull-up
 8001356:	2300      	movs	r3, #0
 8001358:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	480f      	ldr	r0, [pc, #60]	@ (80013a0 <MX_GPIO_Init+0xa4>)
 8001362:	f004 feef 	bl	8006144 <HAL_GPIO_Init>

  // ✅ Configure SW (PB12) as input **without internal pull-up**
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001366:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800136c:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8001370:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;  // ✅ Disable internal pull-up
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001376:	f107 030c 	add.w	r3, r7, #12
 800137a:	4619      	mov	r1, r3
 800137c:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <MX_GPIO_Init+0xa4>)
 800137e:	f004 fee1 	bl	8006144 <HAL_GPIO_Init>

  // Enable Interrupts for Button Press
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2028      	movs	r0, #40	@ 0x28
 8001388:	f004 fb05 	bl	8005996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138c:	2028      	movs	r0, #40	@ 0x28
 800138e:	f004 fb1e 	bl	80059ce <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001392:	bf00      	nop
 8001394:	3720      	adds	r7, #32
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */



void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1) {  // Ensure this is from ADC1
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001528 <HAL_ADC_ConvCpltCallback+0x184>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	f040 80b4 	bne.w	8001520 <HAL_ADC_ConvCpltCallback+0x17c>
        uint32_t i;
        float freq_resolution = sample_rate / FFT_SIZE;
 80013b8:	4b5c      	ldr	r3, [pc, #368]	@ (800152c <HAL_ADC_ConvCpltCallback+0x188>)
 80013ba:	ed93 7a00 	vldr	s14, [r3]
 80013be:	eddf 6a5c 	vldr	s13, [pc, #368]	@ 8001530 <HAL_ADC_ConvCpltCallback+0x18c>
 80013c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c6:	edc7 7a04 	vstr	s15, [r7, #16]
        int low_bin = (center_freq - bandwidth / 2) / freq_resolution;
 80013ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001534 <HAL_ADC_ConvCpltCallback+0x190>)
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	4b59      	ldr	r3, [pc, #356]	@ (8001538 <HAL_ADC_ConvCpltCallback+0x194>)
 80013d2:	edd3 6a00 	vldr	s13, [r3]
 80013d6:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80013da:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80013de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ee:	ee17 3a90 	vmov	r3, s15
 80013f2:	60fb      	str	r3, [r7, #12]
        int high_bin = (center_freq + bandwidth / 2) / freq_resolution;
 80013f4:	4b50      	ldr	r3, [pc, #320]	@ (8001538 <HAL_ADC_ConvCpltCallback+0x194>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001402:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <HAL_ADC_ConvCpltCallback+0x190>)
 8001404:	edd3 7a00 	vldr	s15, [r3]
 8001408:	ee77 6a27 	vadd.f32	s13, s14, s15
 800140c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001414:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001418:	ee17 3a90 	vmov	r3, s15
 800141c:	60bb      	str	r3, [r7, #8]

        // Convert ADC values to floating point (normalize to -1 to 1)
        for (i = 0; i < FFT_SIZE; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	e024      	b.n	800146e <HAL_ADC_ConvCpltCallback+0xca>
            fft_input[2 * i] = ((float32_t)adc_buffer[i] / 4096.0f) * 2.0f - 1.0f;  // Real part
 8001424:	4a45      	ldr	r2, [pc, #276]	@ (800153c <HAL_ADC_ConvCpltCallback+0x198>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800142c:	ee07 3a90 	vmov	s15, r3
 8001430:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001434:	eddf 6a42 	vldr	s13, [pc, #264]	@ 8001540 <HAL_ADC_ConvCpltCallback+0x19c>
 8001438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800143c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800144c:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	4413      	add	r3, r2
 8001452:	edc3 7a00 	vstr	s15, [r3]
            fft_input[2 * i + 1] = 0.0f;  // Imaginary part = 0
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	3301      	adds	r3, #1
 800145c:	4a39      	ldr	r2, [pc, #228]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
        for (i = 0; i < FFT_SIZE; i++) {
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	3301      	adds	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001474:	d3d6      	bcc.n	8001424 <HAL_ADC_ConvCpltCallback+0x80>
        }

        // Perform FFT
        arm_rfft_fast_f32(&fft_instance, fft_input, fft_output, 0);
 8001476:	2300      	movs	r3, #0
 8001478:	4a33      	ldr	r2, [pc, #204]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800147a:	4932      	ldr	r1, [pc, #200]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800147c:	4833      	ldr	r0, [pc, #204]	@ (800154c <HAL_ADC_ConvCpltCallback+0x1a8>)
 800147e:	f003 fb78 	bl	8004b72 <arm_rfft_fast_f32>

        // Apply Bandpass Filtering in Frequency Domain
        for (i = 0; i < FFT_SIZE / 2; i++) {
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e01b      	b.n	80014c0 <HAL_ADC_ConvCpltCallback+0x11c>
            if (i < low_bin || i > high_bin) {
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	429a      	cmp	r2, r3
 800148e:	d303      	bcc.n	8001498 <HAL_ADC_ConvCpltCallback+0xf4>
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d910      	bls.n	80014ba <HAL_ADC_ConvCpltCallback+0x116>
                fft_output[2 * i] = 0.0f;  // Zero out real part
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4a2a      	ldr	r2, [pc, #168]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x1a4>)
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
                fft_output[2 * i + 1] = 0.0f;  // Zero out imaginary part
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	3301      	adds	r3, #1
 80014ae:	4a26      	ldr	r2, [pc, #152]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
        for (i = 0; i < FFT_SIZE / 2; i++) {
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014c6:	d3df      	bcc.n	8001488 <HAL_ADC_ConvCpltCallback+0xe4>
            }
        }

        // Perform Inverse FFT (IFFT) to reconstruct the filtered signal
        arm_rfft_fast_f32(&fft_instance, fft_output, fft_input, 1);
 80014c8:	2301      	movs	r3, #1
 80014ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80014cc:	491e      	ldr	r1, [pc, #120]	@ (8001548 <HAL_ADC_ConvCpltCallback+0x1a4>)
 80014ce:	481f      	ldr	r0, [pc, #124]	@ (800154c <HAL_ADC_ConvCpltCallback+0x1a8>)
 80014d0:	f003 fb4f 	bl	8004b72 <arm_rfft_fast_f32>

        // Convert back to PWM values (re-normalize)
        for (i = 0; i < FFT_SIZE; i++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e01e      	b.n	8001518 <HAL_ADC_ConvCpltCallback+0x174>
            pwm_buffer[i] = (uint16_t)(((fft_input[2 * i] + 1.0f) / 2.0f) * 4096.0f);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80014f0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80014f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001540 <HAL_ADC_ConvCpltCallback+0x19c>
 80014fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001504:	ee17 3a90 	vmov	r3, s15
 8001508:	b299      	uxth	r1, r3
 800150a:	4a11      	ldr	r2, [pc, #68]	@ (8001550 <HAL_ADC_ConvCpltCallback+0x1ac>)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (i = 0; i < FFT_SIZE; i++) {
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800151e:	d3dc      	bcc.n	80014da <HAL_ADC_ConvCpltCallback+0x136>
        }
    }
}
 8001520:	bf00      	nop
 8001522:	3718      	adds	r7, #24
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40012000 	.word	0x40012000
 800152c:	20000008 	.word	0x20000008
 8001530:	44800000 	.word	0x44800000
 8001534:	20000000 	.word	0x20000000
 8001538:	20000004 	.word	0x20000004
 800153c:	200003ac 	.word	0x200003ac
 8001540:	45800000 	.word	0x45800000
 8001544:	200013ac 	.word	0x200013ac
 8001548:	200033ac 	.word	0x200033ac
 800154c:	200053ac 	.word	0x200053ac
 8001550:	20000bac 	.word	0x20000bac

08001554 <Init_Display>:


// OLED Initialization
void Init_Display(void) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af02      	add	r7, sp, #8
    ssd1306_Init();
 800155a:	f000 fa0d 	bl	8001978 <ssd1306_Init>
    ssd1306_Fill(Black);
 800155e:	2000      	movs	r0, #0
 8001560:	f000 fa74 	bl	8001a4c <ssd1306_Fill>
    ssd1306_SetCursor(10, 10);
 8001564:	210a      	movs	r1, #10
 8001566:	200a      	movs	r0, #10
 8001568:	f000 fbbc 	bl	8001ce4 <ssd1306_SetCursor>
    ssd1306_WriteString("Audio DSP Ready", Font_7x10, White);
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <Init_Display+0x3c>)
 800156e:	2201      	movs	r2, #1
 8001570:	9200      	str	r2, [sp, #0]
 8001572:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001574:	4807      	ldr	r0, [pc, #28]	@ (8001594 <Init_Display+0x40>)
 8001576:	f000 fb8f 	bl	8001c98 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 800157a:	f000 fa7f 	bl	8001a7c <ssd1306_UpdateScreen>
    HAL_Delay(1000);  // ✅ Delay so the user sees the message
 800157e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001582:	f003 fd21 	bl	8004fc8 <HAL_Delay>
    Update_Display();  // ✅ Automatically update to show filter settings
 8001586:	f000 f807 	bl	8001598 <Update_Display>
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0800e4c4 	.word	0x0800e4c4
 8001594:	0800cfd4 	.word	0x0800cfd4

08001598 <Update_Display>:

// Update Display with Current Filter Settings
void Update_Display(void) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af02      	add	r7, sp, #8
    static float last_bandwidth = -1;
    static float last_center_freq = -1;
    static uint8_t last_mode = 255;

    // ✅ Only update if a value has changed
    if (bandwidth == last_bandwidth && center_freq == last_center_freq && setting_mode == last_mode) {
 800159e:	4b33      	ldr	r3, [pc, #204]	@ (800166c <Update_Display+0xd4>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <Update_Display+0xd8>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80015ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015b2:	d111      	bne.n	80015d8 <Update_Display+0x40>
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <Update_Display+0xdc>)
 80015b6:	ed93 7a00 	vldr	s14, [r3]
 80015ba:	4b2f      	ldr	r3, [pc, #188]	@ (8001678 <Update_Display+0xe0>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015c8:	d106      	bne.n	80015d8 <Update_Display+0x40>
 80015ca:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <Update_Display+0xe4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001680 <Update_Display+0xe8>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d044      	beq.n	8001662 <Update_Display+0xca>
        return;  // ✅ Skip screen update if values haven’t changed
    }

    char text[20];
    ssd1306_Fill(Black);  // ✅ Clear screen before updating
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fa37 	bl	8001a4c <ssd1306_Fill>

    // ✅ Show Bandwidth when setting_mode == 0
    if (setting_mode == 0) {
 80015de:	4b27      	ldr	r3, [pc, #156]	@ (800167c <Update_Display+0xe4>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d116      	bne.n	8001616 <Update_Display+0x7e>
        sprintf(text, "BW: %.0fHz", bandwidth);
 80015e8:	4b20      	ldr	r3, [pc, #128]	@ (800166c <Update_Display+0xd4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffb3 	bl	8000558 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	1d38      	adds	r0, r7, #4
 80015f8:	4922      	ldr	r1, [pc, #136]	@ (8001684 <Update_Display+0xec>)
 80015fa:	f009 fae7 	bl	800abcc <siprintf>
        ssd1306_SetCursor(10, 10);
 80015fe:	210a      	movs	r1, #10
 8001600:	200a      	movs	r0, #10
 8001602:	f000 fb6f 	bl	8001ce4 <ssd1306_SetCursor>
        ssd1306_WriteString(text, Font_11x18, White);
 8001606:	4b20      	ldr	r3, [pc, #128]	@ (8001688 <Update_Display+0xf0>)
 8001608:	1d38      	adds	r0, r7, #4
 800160a:	2201      	movs	r2, #1
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001610:	f000 fb42 	bl	8001c98 <ssd1306_WriteString>
 8001614:	e015      	b.n	8001642 <Update_Display+0xaa>
    }
    // ✅ Show Center Frequency when setting_mode == 1
    else {
        sprintf(text, "CF: %.0fHz", center_freq);
 8001616:	4b17      	ldr	r3, [pc, #92]	@ (8001674 <Update_Display+0xdc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff9c 	bl	8000558 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	1d38      	adds	r0, r7, #4
 8001626:	4919      	ldr	r1, [pc, #100]	@ (800168c <Update_Display+0xf4>)
 8001628:	f009 fad0 	bl	800abcc <siprintf>
        ssd1306_SetCursor(10, 10);
 800162c:	210a      	movs	r1, #10
 800162e:	200a      	movs	r0, #10
 8001630:	f000 fb58 	bl	8001ce4 <ssd1306_SetCursor>
        ssd1306_WriteString(text, Font_11x18, White);
 8001634:	4b14      	ldr	r3, [pc, #80]	@ (8001688 <Update_Display+0xf0>)
 8001636:	1d38      	adds	r0, r7, #4
 8001638:	2201      	movs	r2, #1
 800163a:	9200      	str	r2, [sp, #0]
 800163c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163e:	f000 fb2b 	bl	8001c98 <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();  // ✅ Refresh display after all updates
 8001642:	f000 fa1b 	bl	8001a7c <ssd1306_UpdateScreen>

    // ✅ Store last values to track changes
    last_bandwidth = bandwidth;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <Update_Display+0xd4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <Update_Display+0xd8>)
 800164c:	6013      	str	r3, [r2, #0]
    last_center_freq = center_freq;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <Update_Display+0xdc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <Update_Display+0xe0>)
 8001654:	6013      	str	r3, [r2, #0]
    last_mode = setting_mode;
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <Update_Display+0xe4>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <Update_Display+0xe8>)
 800165e:	701a      	strb	r2, [r3, #0]
 8001660:	e000      	b.n	8001664 <Update_Display+0xcc>
        return;  // ✅ Skip screen update if values haven’t changed
 8001662:	bf00      	nop
}
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000004 	.word	0x20000004
 8001670:	2000000c 	.word	0x2000000c
 8001674:	20000000 	.word	0x20000000
 8001678:	20000010 	.word	0x20000010
 800167c:	200053c4 	.word	0x200053c4
 8001680:	20000014 	.word	0x20000014
 8001684:	0800cfe4 	.word	0x0800cfe4
 8001688:	0800e4d0 	.word	0x0800e4d0
 800168c:	0800cff0 	.word	0x0800cff0

08001690 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	80fb      	strh	r3, [r7, #6]
    static uint32_t press_start_time = 0;
    static bool button_held = false;  // ✅ Track if button is held to prevent double-triggering
    uint32_t current_time = HAL_GetTick();
 800169a:	f003 fc89 	bl	8004fb0 <HAL_GetTick>
 800169e:	60f8      	str	r0, [r7, #12]

    // ✅ Handle Encoder Rotation (PB13 or PB14)
    if (GPIO_Pin == GPIO_PIN_13 || GPIO_Pin == GPIO_PIN_14) {
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_EXTI_Callback+0x20>
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016ae:	d102      	bne.n	80016b6 <HAL_GPIO_EXTI_Callback+0x26>
        Read_Encoder();  // ✅ Call Read_Encoder() on every valid transition
 80016b0:	f000 f866 	bl	8001780 <Read_Encoder>
        return;
 80016b4:	e050      	b.n	8001758 <HAL_GPIO_EXTI_Callback+0xc8>
    }

    // ✅ Handle Button Press (PB12)
    if (GPIO_Pin == GPIO_PIN_12) {
 80016b6:	88fb      	ldrh	r3, [r7, #6]
 80016b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016bc:	d14c      	bne.n	8001758 <HAL_GPIO_EXTI_Callback+0xc8>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET) {
 80016be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016c2:	4827      	ldr	r0, [pc, #156]	@ (8001760 <HAL_GPIO_EXTI_Callback+0xd0>)
 80016c4:	f004 fec2 	bl	800644c <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d106      	bne.n	80016dc <HAL_GPIO_EXTI_Callback+0x4c>
            // ✅ Button just got pressed (FALLING EDGE)
            press_start_time = current_time;
 80016ce:	4a25      	ldr	r2, [pc, #148]	@ (8001764 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6013      	str	r3, [r2, #0]
            button_held = false;  // ✅ Reset hold status
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <HAL_GPIO_EXTI_Callback+0xd8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	e03d      	b.n	8001758 <HAL_GPIO_EXTI_Callback+0xc8>
        }
        else {
            // ✅ Button released (RISING EDGE)
            uint32_t press_duration = current_time - press_start_time;
 80016dc:	4b21      	ldr	r3, [pc, #132]	@ (8001764 <HAL_GPIO_EXTI_Callback+0xd4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	60bb      	str	r3, [r7, #8]

            // ✅ Long Press Detected (1s) → Jump to Min/Max BW
            if (press_duration > 1000 && !button_held) {
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016ec:	d920      	bls.n	8001730 <HAL_GPIO_EXTI_Callback+0xa0>
 80016ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <HAL_GPIO_EXTI_Callback+0xd8>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f083 0301 	eor.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d019      	beq.n	8001730 <HAL_GPIO_EXTI_Callback+0xa0>
                if (setting_mode == 0) {  // ✅ If in Bandwidth mode
 80016fc:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <HAL_GPIO_EXTI_Callback+0xdc>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	2b00      	cmp	r3, #0
 8001704:	d110      	bne.n	8001728 <HAL_GPIO_EXTI_Callback+0x98>
                    bandwidth = (bandwidth < (MAX_BANDWIDTH + MIN_BANDWIDTH) / 2) ? MAX_BANDWIDTH : MIN_BANDWIDTH;
 8001706:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001708:	edd3 7a00 	vldr	s15, [r3]
 800170c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8001774 <HAL_GPIO_EXTI_Callback+0xe4>
 8001710:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	d501      	bpl.n	800171e <HAL_GPIO_EXTI_Callback+0x8e>
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_GPIO_EXTI_Callback+0xe8>)
 800171c:	e000      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0x90>
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_GPIO_EXTI_Callback+0xec>)
 8001720:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001722:	6013      	str	r3, [r2, #0]
                    Update_Display();
 8001724:	f7ff ff38 	bl	8001598 <Update_Display>
                }
                button_held = true;  // ✅ Prevent double-triggers
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_GPIO_EXTI_Callback+0xd8>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
 800172e:	e013      	b.n	8001758 <HAL_GPIO_EXTI_Callback+0xc8>
            }
            // ✅ Short Press Detected (Fast toggle)
            else if (press_duration > 50 && press_duration < 300) {
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b32      	cmp	r3, #50	@ 0x32
 8001734:	d910      	bls.n	8001758 <HAL_GPIO_EXTI_Callback+0xc8>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800173c:	d20c      	bcs.n	8001758 <HAL_GPIO_EXTI_Callback+0xc8>
                setting_mode = !setting_mode;  // ✅ Toggle between BW and CF pages
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001752:	701a      	strb	r2, [r3, #0]
                Update_Display();  // ✅ Immediately update OLED
 8001754:	f7ff ff20 	bl	8001598 <Update_Display>
            }
        }
    }
}
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40020400 	.word	0x40020400
 8001764:	200053c8 	.word	0x200053c8
 8001768:	200053cc 	.word	0x200053cc
 800176c:	200053c4 	.word	0x200053c4
 8001770:	20000004 	.word	0x20000004
 8001774:	44034000 	.word	0x44034000
 8001778:	447a0000 	.word	0x447a0000
 800177c:	42480000 	.word	0x42480000

08001780 <Read_Encoder>:





void Read_Encoder(void) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
    static uint8_t last_clk = 1;
    static uint32_t last_step_time = 0;
    uint32_t current_time = HAL_GetTick();
 8001786:	f003 fc13 	bl	8004fb0 <HAL_GetTick>
 800178a:	60f8      	str	r0, [r7, #12]

    // ✅ Debounce movement (Ignore fast double steps)
    if (current_time - last_step_time < 5) {  // 5ms debounce
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <Read_Encoder+0x150>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	68fa      	ldr	r2, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b04      	cmp	r3, #4
 8001796:	f240 8097 	bls.w	80018c8 <Read_Encoder+0x148>
        return;
    }

    uint8_t clk = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800179a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800179e:	484d      	ldr	r0, [pc, #308]	@ (80018d4 <Read_Encoder+0x154>)
 80017a0:	f004 fe54 	bl	800644c <HAL_GPIO_ReadPin>
 80017a4:	4603      	mov	r3, r0
 80017a6:	72fb      	strb	r3, [r7, #11]
    uint8_t dt = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80017a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017ac:	4849      	ldr	r0, [pc, #292]	@ (80018d4 <Read_Encoder+0x154>)
 80017ae:	f004 fe4d 	bl	800644c <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	72bb      	strb	r3, [r7, #10]

    if (clk == 0 && last_clk == 1) {  // ✅ Detect falling edge of CLK
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f040 8081 	bne.w	80018c0 <Read_Encoder+0x140>
 80017be:	4b46      	ldr	r3, [pc, #280]	@ (80018d8 <Read_Encoder+0x158>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d17c      	bne.n	80018c0 <Read_Encoder+0x140>
        int step_size = 10;  // ✅ Normal step size
 80017c6:	230a      	movs	r3, #10
 80017c8:	607b      	str	r3, [r7, #4]

        if (setting_mode == 0) {  // ✅ Adjust Bandwidth
 80017ca:	4b44      	ldr	r3, [pc, #272]	@ (80018dc <Read_Encoder+0x15c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d138      	bne.n	8001846 <Read_Encoder+0xc6>
            if (dt == 1) {
 80017d4:	7abb      	ldrb	r3, [r7, #10]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d11a      	bne.n	8001810 <Read_Encoder+0x90>
                bandwidth += step_size;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e4:	4b3e      	ldr	r3, [pc, #248]	@ (80018e0 <Read_Encoder+0x160>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	4b3c      	ldr	r3, [pc, #240]	@ (80018e0 <Read_Encoder+0x160>)
 80017f0:	edc3 7a00 	vstr	s15, [r3]
                if (bandwidth > 3000.0f) bandwidth = 3000.0f;
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <Read_Encoder+0x160>)
 80017f6:	edd3 7a00 	vldr	s15, [r3]
 80017fa:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80018e4 <Read_Encoder+0x164>
 80017fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001806:	dd56      	ble.n	80018b6 <Read_Encoder+0x136>
 8001808:	4b35      	ldr	r3, [pc, #212]	@ (80018e0 <Read_Encoder+0x160>)
 800180a:	4a37      	ldr	r2, [pc, #220]	@ (80018e8 <Read_Encoder+0x168>)
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e052      	b.n	80018b6 <Read_Encoder+0x136>
            } else {
                bandwidth -= step_size;
 8001810:	4b33      	ldr	r3, [pc, #204]	@ (80018e0 <Read_Encoder+0x160>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001824:	4b2e      	ldr	r3, [pc, #184]	@ (80018e0 <Read_Encoder+0x160>)
 8001826:	edc3 7a00 	vstr	s15, [r3]
                if (bandwidth < 50.0f) bandwidth = 50.0f;
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <Read_Encoder+0x160>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80018ec <Read_Encoder+0x16c>
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d53b      	bpl.n	80018b6 <Read_Encoder+0x136>
 800183e:	4b28      	ldr	r3, [pc, #160]	@ (80018e0 <Read_Encoder+0x160>)
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <Read_Encoder+0x170>)
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	e037      	b.n	80018b6 <Read_Encoder+0x136>
            }
        }
        else {  // ✅ Adjust Center Frequency
            if (dt == 1) {
 8001846:	7abb      	ldrb	r3, [r7, #10]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d11a      	bne.n	8001882 <Read_Encoder+0x102>
                center_freq += step_size;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001856:	4b27      	ldr	r3, [pc, #156]	@ (80018f4 <Read_Encoder+0x174>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	4b24      	ldr	r3, [pc, #144]	@ (80018f4 <Read_Encoder+0x174>)
 8001862:	edc3 7a00 	vstr	s15, [r3]
                if (center_freq > 3000.0f) center_freq = 3000.0f;
 8001866:	4b23      	ldr	r3, [pc, #140]	@ (80018f4 <Read_Encoder+0x174>)
 8001868:	edd3 7a00 	vldr	s15, [r3]
 800186c:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80018e4 <Read_Encoder+0x164>
 8001870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	dd1d      	ble.n	80018b6 <Read_Encoder+0x136>
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <Read_Encoder+0x174>)
 800187c:	4a1a      	ldr	r2, [pc, #104]	@ (80018e8 <Read_Encoder+0x168>)
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e019      	b.n	80018b6 <Read_Encoder+0x136>
            } else {
                center_freq -= step_size;
 8001882:	4b1c      	ldr	r3, [pc, #112]	@ (80018f4 <Read_Encoder+0x174>)
 8001884:	ed93 7a00 	vldr	s14, [r3]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	ee07 3a90 	vmov	s15, r3
 800188e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001896:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <Read_Encoder+0x174>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
                if (center_freq < 50.0f) center_freq = 50.0f;
 800189c:	4b15      	ldr	r3, [pc, #84]	@ (80018f4 <Read_Encoder+0x174>)
 800189e:	edd3 7a00 	vldr	s15, [r3]
 80018a2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80018ec <Read_Encoder+0x16c>
 80018a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ae:	d502      	bpl.n	80018b6 <Read_Encoder+0x136>
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <Read_Encoder+0x174>)
 80018b2:	4a0f      	ldr	r2, [pc, #60]	@ (80018f0 <Read_Encoder+0x170>)
 80018b4:	601a      	str	r2, [r3, #0]
            }
        }

        Update_Display();  // ✅ Update OLED only when value actually changes
 80018b6:	f7ff fe6f 	bl	8001598 <Update_Display>
        last_step_time = current_time;  // ✅ Store last valid step time
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <Read_Encoder+0x150>)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6013      	str	r3, [r2, #0]
    }

    last_clk = clk;  // ✅ Store last CLK state
 80018c0:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <Read_Encoder+0x158>)
 80018c2:	7afb      	ldrb	r3, [r7, #11]
 80018c4:	7013      	strb	r3, [r2, #0]
 80018c6:	e000      	b.n	80018ca <Read_Encoder+0x14a>
        return;
 80018c8:	bf00      	nop
}
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200053d0 	.word	0x200053d0
 80018d4:	40020400 	.word	0x40020400
 80018d8:	20000015 	.word	0x20000015
 80018dc:	200053c4 	.word	0x200053c4
 80018e0:	20000004 	.word	0x20000004
 80018e4:	453b8000 	.word	0x453b8000
 80018e8:	453b8000 	.word	0x453b8000
 80018ec:	42480000 	.word	0x42480000
 80018f0:	42480000 	.word	0x42480000
 80018f4:	20000000 	.word	0x20000000

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <Error_Handler+0x8>

08001904 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af04      	add	r7, sp, #16
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800191e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	2301      	movs	r3, #1
 8001926:	9301      	str	r3, [sp, #4]
 8001928:	1dfb      	adds	r3, r7, #7
 800192a:	9300      	str	r3, [sp, #0]
 800192c:	2301      	movs	r3, #1
 800192e:	2200      	movs	r2, #0
 8001930:	2178      	movs	r1, #120	@ 0x78
 8001932:	4803      	ldr	r0, [pc, #12]	@ (8001940 <ssd1306_WriteCommand+0x2c>)
 8001934:	f004 ff2e 	bl	8006794 <HAL_I2C_Mem_Write>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200002b0 	.word	0x200002b0

08001944 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af04      	add	r7, sp, #16
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b29b      	uxth	r3, r3
 8001952:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001956:	9202      	str	r2, [sp, #8]
 8001958:	9301      	str	r3, [sp, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	2301      	movs	r3, #1
 8001960:	2240      	movs	r2, #64	@ 0x40
 8001962:	2178      	movs	r1, #120	@ 0x78
 8001964:	4803      	ldr	r0, [pc, #12]	@ (8001974 <ssd1306_WriteData+0x30>)
 8001966:	f004 ff15 	bl	8006794 <HAL_I2C_Mem_Write>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200002b0 	.word	0x200002b0

08001978 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800197c:	f7ff ffc2 	bl	8001904 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001980:	2064      	movs	r0, #100	@ 0x64
 8001982:	f003 fb21 	bl	8004fc8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f9d8 	bl	8001d3c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800198c:	2020      	movs	r0, #32
 800198e:	f7ff ffc1 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff ffbe 	bl	8001914 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001998:	20b0      	movs	r0, #176	@ 0xb0
 800199a:	f7ff ffbb 	bl	8001914 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800199e:	20c8      	movs	r0, #200	@ 0xc8
 80019a0:	f7ff ffb8 	bl	8001914 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff ffb5 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019aa:	2010      	movs	r0, #16
 80019ac:	f7ff ffb2 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80019b0:	2040      	movs	r0, #64	@ 0x40
 80019b2:	f7ff ffaf 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80019b6:	20ff      	movs	r0, #255	@ 0xff
 80019b8:	f000 f9ac 	bl	8001d14 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019bc:	20a1      	movs	r0, #161	@ 0xa1
 80019be:	f7ff ffa9 	bl	8001914 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019c2:	20a6      	movs	r0, #166	@ 0xa6
 80019c4:	f7ff ffa6 	bl	8001914 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019c8:	20a8      	movs	r0, #168	@ 0xa8
 80019ca:	f7ff ffa3 	bl	8001914 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80019ce:	201f      	movs	r0, #31
 80019d0:	f7ff ffa0 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019d4:	20a4      	movs	r0, #164	@ 0xa4
 80019d6:	f7ff ff9d 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019da:	20d3      	movs	r0, #211	@ 0xd3
 80019dc:	f7ff ff9a 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff ff97 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019e6:	20d5      	movs	r0, #213	@ 0xd5
 80019e8:	f7ff ff94 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019ec:	20f0      	movs	r0, #240	@ 0xf0
 80019ee:	f7ff ff91 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019f2:	20d9      	movs	r0, #217	@ 0xd9
 80019f4:	f7ff ff8e 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019f8:	2022      	movs	r0, #34	@ 0x22
 80019fa:	f7ff ff8b 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019fe:	20da      	movs	r0, #218	@ 0xda
 8001a00:	f7ff ff88 	bl	8001914 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7ff ff85 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a0a:	20db      	movs	r0, #219	@ 0xdb
 8001a0c:	f7ff ff82 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a10:	2020      	movs	r0, #32
 8001a12:	f7ff ff7f 	bl	8001914 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a16:	208d      	movs	r0, #141	@ 0x8d
 8001a18:	f7ff ff7c 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a1c:	2014      	movs	r0, #20
 8001a1e:	f7ff ff79 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a22:	2001      	movs	r0, #1
 8001a24:	f000 f98a 	bl	8001d3c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f80f 	bl	8001a4c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a2e:	f000 f825 	bl	8001a7c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <ssd1306_Init+0xd0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <ssd1306_Init+0xd0>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a3e:	4b02      	ldr	r3, [pc, #8]	@ (8001a48 <ssd1306_Init+0xd0>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	711a      	strb	r2, [r3, #4]
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	200055d4 	.word	0x200055d4

08001a4c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <ssd1306_Fill+0x14>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	e000      	b.n	8001a62 <ssd1306_Fill+0x16>
 8001a60:	23ff      	movs	r3, #255	@ 0xff
 8001a62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a66:	4619      	mov	r1, r3
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <ssd1306_Fill+0x2c>)
 8001a6a:	f009 f991 	bl	800ad90 <memset>
}
 8001a6e:	bf00      	nop
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200053d4 	.word	0x200053d4

08001a7c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	e016      	b.n	8001ab6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	3b50      	subs	r3, #80	@ 0x50
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff ff40 	bl	8001914 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff ff3d 	bl	8001914 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a9a:	2010      	movs	r0, #16
 8001a9c:	f7ff ff3a 	bl	8001914 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	01db      	lsls	r3, r3, #7
 8001aa4:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <ssd1306_UpdateScreen+0x4c>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff ff4a 	bl	8001944 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	2b03      	cmp	r3, #3
 8001aba:	d9e5      	bls.n	8001a88 <ssd1306_UpdateScreen+0xc>
    }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200053d4 	.word	0x200053d4

08001acc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	71bb      	strb	r3, [r7, #6]
 8001ada:	4613      	mov	r3, r2
 8001adc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db3d      	blt.n	8001b62 <ssd1306_DrawPixel+0x96>
 8001ae6:	79bb      	ldrb	r3, [r7, #6]
 8001ae8:	2b1f      	cmp	r3, #31
 8001aea:	d83a      	bhi.n	8001b62 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001aec:	797b      	ldrb	r3, [r7, #5]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d11a      	bne.n	8001b28 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001af2:	79fa      	ldrb	r2, [r7, #7]
 8001af4:	79bb      	ldrb	r3, [r7, #6]
 8001af6:	08db      	lsrs	r3, r3, #3
 8001af8:	b2d8      	uxtb	r0, r3
 8001afa:	4603      	mov	r3, r0
 8001afc:	01db      	lsls	r3, r3, #7
 8001afe:	4413      	add	r3, r2
 8001b00:	4a1b      	ldr	r2, [pc, #108]	@ (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	b25a      	sxtb	r2, r3
 8001b06:	79bb      	ldrb	r3, [r7, #6]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	b25b      	sxtb	r3, r3
 8001b14:	4313      	orrs	r3, r2
 8001b16:	b259      	sxtb	r1, r3
 8001b18:	79fa      	ldrb	r2, [r7, #7]
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	01db      	lsls	r3, r3, #7
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2c9      	uxtb	r1, r1
 8001b22:	4a13      	ldr	r2, [pc, #76]	@ (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b24:	54d1      	strb	r1, [r2, r3]
 8001b26:	e01d      	b.n	8001b64 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b28:	79fa      	ldrb	r2, [r7, #7]
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	4603      	mov	r3, r0
 8001b32:	01db      	lsls	r3, r3, #7
 8001b34:	4413      	add	r3, r2
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b38:	5cd3      	ldrb	r3, [r2, r3]
 8001b3a:	b25a      	sxtb	r2, r3
 8001b3c:	79bb      	ldrb	r3, [r7, #6]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	2101      	movs	r1, #1
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	b259      	sxtb	r1, r3
 8001b52:	79fa      	ldrb	r2, [r7, #7]
 8001b54:	4603      	mov	r3, r0
 8001b56:	01db      	lsls	r3, r3, #7
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2c9      	uxtb	r1, r1
 8001b5c:	4a04      	ldr	r2, [pc, #16]	@ (8001b70 <ssd1306_DrawPixel+0xa4>)
 8001b5e:	54d1      	strb	r1, [r2, r3]
 8001b60:	e000      	b.n	8001b64 <ssd1306_DrawPixel+0x98>
        return;
 8001b62:	bf00      	nop
    }
}
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	200053d4 	.word	0x200053d4

08001b74 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4638      	mov	r0, r7
 8001b7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001b82:	4623      	mov	r3, r4
 8001b84:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	2b1f      	cmp	r3, #31
 8001b8a:	d902      	bls.n	8001b92 <ssd1306_WriteChar+0x1e>
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b90:	d901      	bls.n	8001b96 <ssd1306_WriteChar+0x22>
        return 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	e079      	b.n	8001c8a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <ssd1306_WriteChar+0x34>
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	3b20      	subs	r3, #32
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	e000      	b.n	8001baa <ssd1306_WriteChar+0x36>
 8001ba8:	783b      	ldrb	r3, [r7, #0]
 8001baa:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001bac:	4b39      	ldr	r3, [pc, #228]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	2b80      	cmp	r3, #128	@ 0x80
 8001bb8:	dc06      	bgt.n	8001bc8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001bba:	4b36      	ldr	r3, [pc, #216]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001bbc:	885b      	ldrh	r3, [r3, #2]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	787b      	ldrb	r3, [r7, #1]
 8001bc2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	dd01      	ble.n	8001bcc <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e05e      	b.n	8001c8a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	e04d      	b.n	8001c6e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	3b20      	subs	r3, #32
 8001bd8:	7879      	ldrb	r1, [r7, #1]
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4619      	mov	r1, r3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	440b      	add	r3, r1
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001bec:	2300      	movs	r3, #0
 8001bee:	61bb      	str	r3, [r7, #24]
 8001bf0:	e036      	b.n	8001c60 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d013      	beq.n	8001c2a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c02:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	b2d8      	uxtb	r0, r3
 8001c10:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001c12:	885b      	ldrh	r3, [r3, #2]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7ff ff52 	bl	8001acc <ssd1306_DrawPixel>
 8001c28:	e017      	b.n	8001c5a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001c2c:	881b      	ldrh	r3, [r3, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	b2d8      	uxtb	r0, r3
 8001c38:	4b16      	ldr	r3, [pc, #88]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001c3a:	885b      	ldrh	r3, [r3, #2]
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4413      	add	r3, r2
 8001c44:	b2d9      	uxtb	r1, r3
 8001c46:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	f7ff ff39 	bl	8001acc <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3c4      	bcc.n	8001bf2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
 8001c6e:	787b      	ldrb	r3, [r7, #1]
 8001c70:	461a      	mov	r2, r3
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d3ac      	bcc.n	8001bd2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	4413      	add	r3, r2
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <ssd1306_WriteChar+0x120>)
 8001c86:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3724      	adds	r7, #36	@ 0x24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd90      	pop	{r4, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	200055d4 	.word	0x200055d4

08001c98 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	4638      	mov	r0, r7
 8001ca2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001ca6:	e013      	b.n	8001cd0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	7818      	ldrb	r0, [r3, #0]
 8001cac:	7e3b      	ldrb	r3, [r7, #24]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb4:	f7ff ff5e 	bl	8001b74 <ssd1306_WriteChar>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d002      	beq.n	8001cca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	e008      	b.n	8001cdc <ssd1306_WriteString+0x44>
        }
        str++;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d1e7      	bne.n	8001ca8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	781b      	ldrb	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3710      	adds	r7, #16
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	460a      	mov	r2, r1
 8001cee:	71fb      	strb	r3, [r7, #7]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <ssd1306_SetCursor+0x2c>)
 8001cfa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001cfc:	79bb      	ldrb	r3, [r7, #6]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <ssd1306_SetCursor+0x2c>)
 8001d02:	805a      	strh	r2, [r3, #2]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	200055d4 	.word	0x200055d4

08001d14 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d1e:	2381      	movs	r3, #129	@ 0x81
 8001d20:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fdf5 	bl	8001914 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff fdf1 	bl	8001914 <ssd1306_WriteCommand>
}
 8001d32:	bf00      	nop
 8001d34:	3710      	adds	r7, #16
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d4c:	23af      	movs	r3, #175	@ 0xaf
 8001d4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <ssd1306_SetDisplayOn+0x38>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	715a      	strb	r2, [r3, #5]
 8001d56:	e004      	b.n	8001d62 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d58:	23ae      	movs	r3, #174	@ 0xae
 8001d5a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	@ (8001d74 <ssd1306_SetDisplayOn+0x38>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff fdd5 	bl	8001914 <ssd1306_WriteCommand>
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200055d4 	.word	0x200055d4

08001d78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]
 8001d82:	4b10      	ldr	r3, [pc, #64]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	4b09      	ldr	r3, [pc, #36]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a08      	ldr	r2, [pc, #32]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_MspInit+0x4c>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	603b      	str	r3, [r7, #0]
 8001db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40023800 	.word	0x40023800

08001dc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	@ 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	@ (8001ea4 <HAL_ADC_MspInit+0xdc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d158      	bne.n	8001e9c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea8 <HAL_ADC_MspInit+0xe0>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea8 <HAL_ADC_MspInit+0xe0>)
 8001df4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ea8 <HAL_ADC_MspInit+0xe0>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <HAL_ADC_MspInit+0xe0>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <HAL_ADC_MspInit+0xe0>)
 8001e10:	f043 0301 	orr.w	r3, r3, #1
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <HAL_ADC_MspInit+0xe0>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e22:	2301      	movs	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e26:	2303      	movs	r3, #3
 8001e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	4619      	mov	r1, r3
 8001e34:	481d      	ldr	r0, [pc, #116]	@ (8001eac <HAL_ADC_MspInit+0xe4>)
 8001e36:	f004 f985 	bl	8006144 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <HAL_ADC_MspInit+0xec>)
 8001e3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e52:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e62:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e70:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e72:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e74:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001e78:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e80:	480b      	ldr	r0, [pc, #44]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e82:	f003 fdbf 	bl	8005a04 <HAL_DMA_Init>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001e8c:	f7ff fd34 	bl	80018f8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a07      	ldr	r2, [pc, #28]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e94:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e96:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_ADC_MspInit+0xe8>)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	@ 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40012000 	.word	0x40012000
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	20000250 	.word	0x20000250
 8001eb4:	40026410 	.word	0x40026410

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_I2C_MspInit+0xa4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d13b      	bne.n	8001f52 <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b20      	ldr	r3, [pc, #128]	@ (8001f60 <HAL_I2C_MspInit+0xa8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_I2C_MspInit+0xa8>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_I2C_MspInit+0xa8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ef6:	23c0      	movs	r3, #192	@ 0xc0
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001efa:	2312      	movs	r3, #18
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f06:	2304      	movs	r3, #4
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4814      	ldr	r0, [pc, #80]	@ (8001f64 <HAL_I2C_MspInit+0xac>)
 8001f12:	f004 f917 	bl	8006144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <HAL_I2C_MspInit+0xa8>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	4a10      	ldr	r2, [pc, #64]	@ (8001f60 <HAL_I2C_MspInit+0xa8>)
 8001f20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f26:	4b0e      	ldr	r3, [pc, #56]	@ (8001f60 <HAL_I2C_MspInit+0xa8>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	201f      	movs	r0, #31
 8001f38:	f003 fd2d 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001f3c:	201f      	movs	r0, #31
 8001f3e:	f003 fd46 	bl	80059ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2020      	movs	r0, #32
 8001f48:	f003 fd25 	bl	8005996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f003 fd3e 	bl	80059ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	@ 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40005400 	.word	0x40005400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020400 	.word	0x40020400

08001f68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f78:	d145      	bne.n	8002006 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b24      	ldr	r3, [pc, #144]	@ (8002010 <HAL_TIM_Base_MspInit+0xa8>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	4a23      	ldr	r2, [pc, #140]	@ (8002010 <HAL_TIM_Base_MspInit+0xa8>)
 8001f84:	f043 0301 	orr.w	r3, r3, #1
 8001f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <HAL_TIM_Base_MspInit+0xa8>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Stream6;
 8001f96:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001f98:	4a1f      	ldr	r2, [pc, #124]	@ (8002018 <HAL_TIM_Base_MspInit+0xb0>)
 8001f9a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Channel = DMA_CHANNEL_3;
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001f9e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001fa2:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001faa:	4b1a      	ldr	r3, [pc, #104]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001fb0:	4b18      	ldr	r3, [pc, #96]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fb6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fbe:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fc2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_CIRCULAR;
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fce:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fd6:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch2_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8001fde:	480d      	ldr	r0, [pc, #52]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001fe0:	f003 fd10 	bl	8005a04 <HAL_DMA_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8001fea:	f7ff fc85 	bl	80018f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001ff2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ff4:	4a07      	ldr	r2, [pc, #28]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a05      	ldr	r2, [pc, #20]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
 8002000:	4a04      	ldr	r2, [pc, #16]	@ (8002014 <HAL_TIM_Base_MspInit+0xac>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	2000034c 	.word	0x2000034c
 8002018:	400260a0 	.word	0x400260a0

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203c:	d11d      	bne.n	800207a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_TIM_MspPostInit+0x68>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a0f      	ldr	r2, [pc, #60]	@ (8002084 <HAL_TIM_MspPostInit+0x68>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <HAL_TIM_MspPostInit+0x68>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800205a:	2302      	movs	r3, #2
 800205c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800206a:	2301      	movs	r3, #1
 800206c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 030c 	add.w	r3, r7, #12
 8002072:	4619      	mov	r1, r3
 8002074:	4804      	ldr	r0, [pc, #16]	@ (8002088 <HAL_TIM_MspPostInit+0x6c>)
 8002076:	f004 f865 	bl	8006144 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800207a:	bf00      	nop
 800207c:	3720      	adds	r7, #32
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40020000 	.word	0x40020000

0800208c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <NMI_Handler+0x4>

08002094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002098:	bf00      	nop
 800209a:	e7fd      	b.n	8002098 <HardFault_Handler+0x4>

0800209c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a0:	bf00      	nop
 80020a2:	e7fd      	b.n	80020a0 <MemManage_Handler+0x4>

080020a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a8:	bf00      	nop
 80020aa:	e7fd      	b.n	80020a8 <BusFault_Handler+0x4>

080020ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b0:	bf00      	nop
 80020b2:	e7fd      	b.n	80020b0 <UsageFault_Handler+0x4>

080020b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e2:	f002 ff51 	bl	8004f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <DMA1_Stream6_IRQHandler+0x10>)
 80020f2:	f003 fdaf 	bl	8005c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2000034c 	.word	0x2000034c

08002100 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <I2C1_EV_IRQHandler+0x10>)
 8002106:	f004 fd6d 	bl	8006be4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200002b0 	.word	0x200002b0

08002114 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <I2C1_ER_IRQHandler+0x10>)
 800211a:	f004 feb6 	bl	8006e8a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200002b0 	.word	0x200002b0

08002128 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800212c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002130:	f004 f9be 	bl	80064b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002134:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002138:	f004 f9ba 	bl	80064b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800213c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002140:	f004 f9b6 	bl	80064b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800214c:	4802      	ldr	r0, [pc, #8]	@ (8002158 <DMA2_Stream0_IRQHandler+0x10>)
 800214e:	f003 fd81 	bl	8005c54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000250 	.word	0x20000250

0800215c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return 1;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_kill>:

int _kill(int pid, int sig)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002176:	f008 fe17 	bl	800ada8 <__errno>
 800217a:	4603      	mov	r3, r0
 800217c:	2216      	movs	r2, #22
 800217e:	601a      	str	r2, [r3, #0]
  return -1;
 8002180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_exit>:

void _exit (int status)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ffe7 	bl	800216c <_kill>
  while (1) {}    /* Make sure we hang here */
 800219e:	bf00      	nop
 80021a0:	e7fd      	b.n	800219e <_exit+0x12>

080021a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00a      	b.n	80021ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021b4:	f3af 8000 	nop.w
 80021b8:	4601      	mov	r1, r0
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	b2ca      	uxtb	r2, r1
 80021c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	dbf0      	blt.n	80021b4 <_read+0x12>
  }

  return len;
 80021d2:	687b      	ldr	r3, [r7, #4]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	e009      	b.n	8002202 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	60ba      	str	r2, [r7, #8]
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	429a      	cmp	r2, r3
 8002208:	dbf1      	blt.n	80021ee <_write+0x12>
  }
  return len;
 800220a:	687b      	ldr	r3, [r7, #4]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <_close>:

int _close(int file)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800221c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800223c:	605a      	str	r2, [r3, #4]
  return 0;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <_isatty>:

int _isatty(int file)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002254:	2301      	movs	r3, #1
}
 8002256:	4618      	mov	r0, r3
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002262:	b480      	push	{r7}
 8002264:	b085      	sub	sp, #20
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <_sbrk+0x5c>)
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <_sbrk+0x60>)
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002290:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <_sbrk+0x64>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002298:	4b11      	ldr	r3, [pc, #68]	@ (80022e0 <_sbrk+0x64>)
 800229a:	4a12      	ldr	r2, [pc, #72]	@ (80022e4 <_sbrk+0x68>)
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <_sbrk+0x64>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d207      	bcs.n	80022bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022ac:	f008 fd7c 	bl	800ada8 <__errno>
 80022b0:	4603      	mov	r3, r0
 80022b2:	220c      	movs	r2, #12
 80022b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022ba:	e009      	b.n	80022d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <_sbrk+0x64>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022c2:	4b07      	ldr	r3, [pc, #28]	@ (80022e0 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	4a05      	ldr	r2, [pc, #20]	@ (80022e0 <_sbrk+0x64>)
 80022cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ce:	68fb      	ldr	r3, [r7, #12]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20010000 	.word	0x20010000
 80022dc:	00000400 	.word	0x00000400
 80022e0:	200055dc 	.word	0x200055dc
 80022e4:	20005730 	.word	0x20005730

080022e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <SystemInit+0x20>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	4a05      	ldr	r2, [pc, #20]	@ (8002308 <SystemInit+0x20>)
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	e000ed00 	.word	0xe000ed00

0800230c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800230c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002344 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002310:	f7ff ffea 	bl	80022e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002314:	480c      	ldr	r0, [pc, #48]	@ (8002348 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002316:	490d      	ldr	r1, [pc, #52]	@ (800234c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002318:	4a0d      	ldr	r2, [pc, #52]	@ (8002350 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800231a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800231c:	e002      	b.n	8002324 <LoopCopyDataInit>

0800231e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800231e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002322:	3304      	adds	r3, #4

08002324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002328:	d3f9      	bcc.n	800231e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232a:	4a0a      	ldr	r2, [pc, #40]	@ (8002354 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800232c:	4c0a      	ldr	r4, [pc, #40]	@ (8002358 <LoopFillZerobss+0x22>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002330:	e001      	b.n	8002336 <LoopFillZerobss>

08002332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002334:	3204      	adds	r2, #4

08002336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002338:	d3fb      	bcc.n	8002332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233a:	f008 fd3b 	bl	800adb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800233e:	f7fe fdb3 	bl	8000ea8 <main>
  bx  lr    
 8002342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002344:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800234c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8002350:	08021d58 	.word	0x08021d58
  ldr r2, =_sbss
 8002354:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002358:	20005730 	.word	0x20005730

0800235c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800235c:	e7fe      	b.n	800235c <ADC_IRQHandler>

0800235e <arm_bitreversal_32>:

ARM_DSP_ATTRIBUTE void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800235e:	b480      	push	{r7}
 8002360:	b089      	sub	sp, #36	@ 0x24
 8002362:	af00      	add	r7, sp, #0
 8002364:	60f8      	str	r0, [r7, #12]
 8002366:	460b      	mov	r3, r1
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	e043      	b.n	80023fa <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	b29b      	uxth	r3, r3
 8002380:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	089b      	lsrs	r3, r3, #2
 8002390:	b29b      	uxth	r3, r3
 8002392:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	441a      	add	r2, r3
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	440b      	add	r3, r1
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	4413      	add	r3, r2
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	3301      	adds	r3, #1
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	441a      	add	r2, r3
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	3301      	adds	r3, #1
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	68f9      	ldr	r1, [r7, #12]
 80023e0:	440b      	add	r3, r1
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	3301      	adds	r3, #1
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	4413      	add	r3, r2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	601a      	str	r2, [r3, #0]

    i += 2;
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	3302      	adds	r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 80023fa:	897b      	ldrh	r3, [r7, #10]
 80023fc:	69fa      	ldr	r2, [r7, #28]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3b7      	bcc.n	8002372 <arm_bitreversal_32+0x14>
  }
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	3724      	adds	r7, #36	@ 0x24
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <arm_cfft_radix8by2_f32>:
  @endcode

 */

static void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b0a0      	sub	sp, #128	@ 0x80
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8002420:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	4413      	add	r3, r2
 8002428:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8002434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002436:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 8002438:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800243e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	4413      	add	r3, r2
 8002446:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 8002448:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800244e:	4413      	add	r3, r2
 8002450:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8002452:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002458:	e1b6      	b.n	80027c8 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 8002472:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 8002478:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 800247e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 8002484:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 800248a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8002490:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8002496:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800249c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 80024a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 80024a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 80024ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80024b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80024ba:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80024be:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	1d1a      	adds	r2, r3, #4
 80024c6:	603a      	str	r2, [r7, #0]
 80024c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024cc:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 80024d0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80024d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	1d1a      	adds	r2, r3, #4
 80024dc:	603a      	str	r2, [r7, #0]
 80024de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 80024e6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80024ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	1d1a      	adds	r2, r3, #4
 80024f2:	603a      	str	r2, [r7, #0]
 80024f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 80024fc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002500:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	603a      	str	r2, [r7, #0]
 800250a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250e:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8002512:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002516:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800251a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800251e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 8002522:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002526:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800252a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800252e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 8002532:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002536:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800253a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8002542:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8002546:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800254a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 8002552:	ed97 7a06 	vldr	s14, [r7, #24]
 8002556:	edd7 7a02 	vldr	s15, [r7, #8]
 800255a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800255c:	1d1a      	adds	r2, r3, #4
 800255e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 8002568:	ed97 7a07 	vldr	s14, [r7, #28]
 800256c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002570:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002572:	1d1a      	adds	r2, r3, #4
 8002574:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800257e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002582:	edd7 7a04 	vldr	s15, [r7, #16]
 8002586:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002588:	1d1a      	adds	r2, r3, #4
 800258a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8002594:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002598:	edd7 7a05 	vldr	s15, [r7, #20]
 800259c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800259e:	1d1a      	adds	r2, r3, #4
 80025a0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80025a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a6:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80025aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80025ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80025b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b6:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80025ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80025be:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025c6:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 80025ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80025ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80025d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025d6:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 80025da:	ed97 7a05 	vldr	s14, [r7, #20]
 80025de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80025e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e6:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 80025ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025ec:	1d1a      	adds	r2, r3, #4
 80025ee:	673a      	str	r2, [r7, #112]	@ 0x70
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80025f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025f6:	1d1a      	adds	r2, r3, #4
 80025f8:	673a      	str	r2, [r7, #112]	@ 0x70
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 80025fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002602:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 800260e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002612:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800261a:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 800261e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002622:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 800262e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002632:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800263a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800263e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002640:	1d1a      	adds	r2, r3, #4
 8002642:	677a      	str	r2, [r7, #116]	@ 0x74
 8002644:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002648:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002650:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8002654:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002656:	1d1a      	adds	r2, r3, #4
 8002658:	677a      	str	r2, [r7, #116]	@ 0x74
 800265a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800265e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002666:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800266a:	edd7 7a02 	vldr	s15, [r7, #8]
 800266e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002676:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 800267a:	edd7 7a03 	vldr	s15, [r7, #12]
 800267e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002686:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 800268a:	edd7 7a03 	vldr	s15, [r7, #12]
 800268e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002696:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 800269a:	edd7 7a02 	vldr	s15, [r7, #8]
 800269e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80026a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026a6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80026aa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026ac:	1d1a      	adds	r2, r3, #4
 80026ae:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026b0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80026b4:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80026b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026bc:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80026c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026c2:	1d1a      	adds	r2, r3, #4
 80026c4:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026c6:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80026ca:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80026ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d2:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 80026d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026d8:	1d1a      	adds	r2, r3, #4
 80026da:	673a      	str	r2, [r7, #112]	@ 0x70
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 80026e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026e2:	1d1a      	adds	r2, r3, #4
 80026e4:	673a      	str	r2, [r7, #112]	@ 0x70
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 80026ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026ee:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80026f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f6:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 80026fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026fe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002706:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 800270a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800270e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002712:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002716:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 800271a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800271e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 800272a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272c:	1d1a      	adds	r2, r3, #4
 800272e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002730:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002734:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800273c:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8002740:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002742:	1d1a      	adds	r2, r3, #4
 8002744:	677a      	str	r2, [r7, #116]	@ 0x74
 8002746:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800274a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800274e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002752:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8002756:	edd7 7a04 	vldr	s15, [r7, #16]
 800275a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800275e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002762:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 8002766:	edd7 7a05 	vldr	s15, [r7, #20]
 800276a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800276e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002772:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 8002776:	edd7 7a05 	vldr	s15, [r7, #20]
 800277a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 8002786:	edd7 7a04 	vldr	s15, [r7, #16]
 800278a:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 8002796:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002798:	1d1a      	adds	r2, r3, #4
 800279a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800279c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80027a0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80027a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a8:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80027ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ae:	1d1a      	adds	r2, r3, #4
 80027b0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80027b2:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80027b6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80027ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027be:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 80027c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027c4:	3b01      	subs	r3, #1
 80027c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f ae45 	bne.w	800245a <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 80027d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027d2:	b299      	uxth	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80027dc:	f001 f80e 	bl	80037fc <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 80027e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027e2:	b299      	uxth	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2302      	movs	r3, #2
 80027ea:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80027ec:	f001 f806 	bl	80037fc <arm_radix8_butterfly_f32>
}
 80027f0:	bf00      	nop
 80027f2:	3780      	adds	r7, #128	@ 0x80
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <arm_cfft_radix8by4_f32>:

static void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b0ac      	sub	sp, #176	@ 0xb0
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	881b      	ldrh	r3, [r3, #0]
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	b29b      	uxth	r3, r3
 800280a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800280e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 800281c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002826:	4413      	add	r3, r2
 8002828:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 800282c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002836:	4413      	add	r3, r2
 8002838:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 8002840:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002844:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8002846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800284a:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 800284c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002850:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8002852:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002856:	3b04      	subs	r3, #4
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 800285c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002860:	3b04      	subs	r3, #4
 8002862:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 8002866:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800286a:	3b04      	subs	r3, #4
 800286c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 8002870:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800287a:	4413      	add	r3, r2
 800287c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002888:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800288c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002890:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002894:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 8002898:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800289c:	085b      	lsrs	r3, r3, #1
 800289e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 80028a6:	2304      	movs	r3, #4
 80028a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 80028aa:	2306      	movs	r3, #6
 80028ac:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	ed93 7a00 	vldr	s14, [r3]
 80028b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	ed93 7a00 	vldr	s14, [r3]
 80028ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d6:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	3304      	adds	r3, #4
 80028de:	ed93 7a00 	vldr	s14, [r3]
 80028e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028e6:	3304      	adds	r3, #4
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	3304      	adds	r3, #4
 80028f8:	ed93 7a00 	vldr	s14, [r3]
 80028fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002900:	3304      	adds	r3, #4
 8002902:	edd3 7a00 	vldr	s15, [r3]
 8002906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800290a:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800290e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002912:	3304      	adds	r3, #4
 8002914:	ed93 7a00 	vldr	s14, [r3]
 8002918:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800291c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002924:	3304      	adds	r3, #4
 8002926:	edd3 7a00 	vldr	s15, [r3]
 800292a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800292e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002932:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800293e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002942:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002946:	edd3 7a00 	vldr	s15, [r3]
 800294a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002952:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002956:	edd3 7a00 	vldr	s15, [r3]
 800295a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800295e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002962:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002966:	edd3 7a00 	vldr	s15, [r3]
 800296a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296e:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002972:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002976:	3304      	adds	r3, #4
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002980:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002984:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002988:	3304      	adds	r3, #4
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002992:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002996:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800299a:	3304      	adds	r3, #4
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80029a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ac:	3304      	adds	r3, #4
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80029ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029be:	ed93 7a00 	vldr	s14, [r3]
 80029c2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80029c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ce:	edd3 7a00 	vldr	s15, [r3]
 80029d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d6:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80029da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029de:	ed93 7a00 	vldr	s14, [r3]
 80029e2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80029e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	1d1a      	adds	r2, r3, #4
 80029f6:	603a      	str	r2, [r7, #0]
 80029f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029fc:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002a00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a04:	3304      	adds	r3, #4
 8002a06:	ed93 7a00 	vldr	s14, [r3]
 8002a0a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a16:	3304      	adds	r3, #4
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1d1a      	adds	r2, r3, #4
 8002a20:	603a      	str	r2, [r7, #0]
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8002a2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002a34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a36:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8002a38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a3c:	1d1a      	adds	r2, r3, #4
 8002a3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a44:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8002a46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a4a:	1d1a      	adds	r2, r3, #4
 8002a4c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8002a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a58:	1d1a      	adds	r2, r3, #4
 8002a5a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8002a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a66:	1d1a      	adds	r2, r3, #4
 8002a68:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8002a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a74:	1d1a      	adds	r2, r3, #4
 8002a76:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8002a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8002a86:	4413      	add	r3, r2
 8002a88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002a94:	4413      	add	r3, r2
 8002a96:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8002a9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8002aa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aac:	3b02      	subs	r3, #2
 8002aae:	085b      	lsrs	r3, r3, #1
 8002ab0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002ab4:	e31c      	b.n	80030f0 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	ed93 7a00 	vldr	s14, [r3]
 8002abc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac8:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	ed93 7a00 	vldr	s14, [r3]
 8002ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ade:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	ed93 7a00 	vldr	s14, [r3]
 8002aea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aee:	3304      	adds	r3, #4
 8002af0:	edd3 7a00 	vldr	s15, [r3]
 8002af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	3304      	adds	r3, #4
 8002b00:	ed93 7a00 	vldr	s14, [r3]
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b08:	3304      	adds	r3, #4
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b12:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	ed93 7a00 	vldr	s14, [r3]
 8002b20:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b3e:	edd3 7a00 	vldr	s15, [r3]
 8002b42:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b5e:	edd3 7a00 	vldr	s15, [r3]
 8002b62:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002b66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b76:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002b7e:	3304      	adds	r3, #4
 8002b80:	edd3 7a00 	vldr	s15, [r3]
 8002b84:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002b88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b90:	3304      	adds	r3, #4
 8002b92:	edd3 7a00 	vldr	s15, [r3]
 8002b96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002b9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ba2:	3304      	adds	r3, #4
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8002bac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbe:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002bc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002bc6:	ed93 7a00 	vldr	s14, [r3]
 8002bca:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bd6:	edd3 7a00 	vldr	s15, [r3]
 8002bda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bde:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002be2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002be6:	ed93 7a00 	vldr	s14, [r3]
 8002bea:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002bf6:	edd3 7a00 	vldr	s15, [r3]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	1d1a      	adds	r2, r3, #4
 8002bfe:	603a      	str	r2, [r7, #0]
 8002c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c04:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002c08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	ed93 7a00 	vldr	s14, [r3]
 8002c12:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c1e:	3304      	adds	r3, #4
 8002c20:	edd3 7a00 	vldr	s15, [r3]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	603a      	str	r2, [r7, #0]
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002c32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c36:	3b04      	subs	r3, #4
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c40:	3b04      	subs	r3, #4
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c52:	3b04      	subs	r3, #4
 8002c54:	ed93 7a00 	vldr	s14, [r3]
 8002c58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c5c:	3b04      	subs	r3, #4
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c66:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8002c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c6e:	ed93 7a00 	vldr	s14, [r3]
 8002c72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c76:	edd3 7a00 	vldr	s15, [r3]
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8002c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c86:	ed93 7a00 	vldr	s14, [r3]
 8002c8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c8e:	edd3 7a00 	vldr	s15, [r3]
 8002c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c96:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8002c9a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c9e:	ed93 7a00 	vldr	s14, [r3]
 8002ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cae:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cbe:	ed93 7a00 	vldr	s14, [r3]
 8002cc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	edd3 7a00 	vldr	s15, [r3]
 8002cd8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ce0:	3b04      	subs	r3, #4
 8002ce2:	edd3 7a00 	vldr	s15, [r3]
 8002ce6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cea:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8002cee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002cfc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d04:	3b04      	subs	r3, #4
 8002d06:	edd3 7a00 	vldr	s15, [r3]
 8002d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8002d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d16:	edd3 7a00 	vldr	s15, [r3]
 8002d1a:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8002d1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8002d32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d36:	ed93 7a00 	vldr	s14, [r3]
 8002d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d46:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8002d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4e:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d56:	3b04      	subs	r3, #4
 8002d58:	ed93 7a00 	vldr	s14, [r3]
 8002d5c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d60:	3b04      	subs	r3, #4
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d6a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d72:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8002d76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002d7a:	ed93 7a00 	vldr	s14, [r3]
 8002d7e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8002d82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d92:	1f1a      	subs	r2, r3, #4
 8002d94:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002da0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002da4:	3b04      	subs	r3, #4
 8002da6:	ed93 7a00 	vldr	s14, [r3]
 8002daa:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8002dae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002db6:	3b04      	subs	r3, #4
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dc0:	1f1a      	subs	r2, r3, #4
 8002dc2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dca:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8002dce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dd2:	1d1a      	adds	r2, r3, #4
 8002dd4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8002ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002de0:	1d1a      	adds	r2, r3, #4
 8002de2:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8002dea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002dee:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8002dfa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002dfe:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e06:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8002e0a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002e0e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8002e1a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002e1e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8002e2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e2e:	1d1a      	adds	r2, r3, #4
 8002e30:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002e34:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002e38:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e40:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8002e44:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e48:	1d1a      	adds	r2, r3, #4
 8002e4a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8002e4e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002e52:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5a:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8002e5e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002e62:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8002e6e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002e72:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8002e7e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002e82:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8002e8e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002e92:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8002e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ea2:	1f1a      	subs	r2, r3, #4
 8002ea4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ea8:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002eac:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eb4:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8002eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ebc:	1f1a      	subs	r2, r3, #4
 8002ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ec2:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002ec6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ece:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8002ed2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 8002eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ede:	3304      	adds	r3, #4
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8002ee4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8002eec:	4413      	add	r3, r2
 8002eee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8002ef2:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ef6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002efe:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8002f02:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f06:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f0e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8002f12:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f16:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f1e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8002f22:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f26:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8002f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f36:	1d1a      	adds	r2, r3, #4
 8002f38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f3c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002f40:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f48:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 8002f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f56:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8002f5a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f62:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 8002f66:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f6a:	eef1 7a67 	vneg.f32	s15, s15
 8002f6e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 8002f7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f7e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 8002f8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f8e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8002f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f96:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 8002f9a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002f9e:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8002fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 8002faa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fae:	1f1a      	subs	r2, r3, #4
 8002fb0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fb4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8002fb8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc0:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8002fc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002fc8:	1f1a      	subs	r2, r3, #4
 8002fca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002fce:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002fd2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fda:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8002fde:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8002fe6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002fea:	3304      	adds	r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8002ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8002ffe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003002:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800300a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 800300e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003012:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 800301e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003022:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800302a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 800302e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003032:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 800303e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003042:	1d1a      	adds	r2, r3, #4
 8003044:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003048:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800304c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003054:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 8003058:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8003062:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003066:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800306a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800306e:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 8003072:	edd7 7a06 	vldr	s15, [r7, #24]
 8003076:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 8003082:	edd7 7a05 	vldr	s15, [r7, #20]
 8003086:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800308a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800308e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 8003092:	edd7 7a05 	vldr	s15, [r7, #20]
 8003096:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800309a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 80030a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a6:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80030aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ae:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 80030b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030b6:	1f1a      	subs	r2, r3, #4
 80030b8:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80030bc:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80030c0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80030c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c8:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 80030cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030d0:	1f1a      	subs	r2, r3, #4
 80030d2:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80030d6:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80030da:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80030de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e2:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 80030e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030ea:	3b01      	subs	r3, #1
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f47f acde 	bne.w	8002ab6 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	ed93 7a00 	vldr	s14, [r3]
 8003100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	ed93 7a00 	vldr	s14, [r3]
 8003116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800311a:	edd3 7a00 	vldr	s15, [r3]
 800311e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003122:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	3304      	adds	r3, #4
 800312a:	ed93 7a00 	vldr	s14, [r3]
 800312e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003132:	3304      	adds	r3, #4
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800313c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	3304      	adds	r3, #4
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800314c:	3304      	adds	r3, #4
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800315a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800315e:	3304      	adds	r3, #4
 8003160:	ed93 7a00 	vldr	s14, [r3]
 8003164:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003168:	ee37 7a27 	vadd.f32	s14, s14, s15
 800316c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003170:	3304      	adds	r3, #4
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800317e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003182:	edd3 7a00 	vldr	s15, [r3]
 8003186:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800318a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800318e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003192:	edd3 7a00 	vldr	s15, [r3]
 8003196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800319a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800319e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80031aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031b2:	edd3 7a00 	vldr	s15, [r3]
 80031b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ba:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 80031be:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031c2:	3304      	adds	r3, #4
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80031cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031d4:	3304      	adds	r3, #4
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031de:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 80031e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80031e6:	3304      	adds	r3, #4
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80031f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031f8:	3304      	adds	r3, #4
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003202:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003206:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800320a:	ed93 7a00 	vldr	s14, [r3]
 800320e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003216:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800321a:	edd3 7a00 	vldr	s15, [r3]
 800321e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003222:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003226:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800322a:	ed93 7a00 	vldr	s14, [r3]
 800322e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003232:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003236:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	1d1a      	adds	r2, r3, #4
 8003242:	603a      	str	r2, [r7, #0]
 8003244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003248:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800324c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003250:	3304      	adds	r3, #4
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800325a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800325e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003262:	3304      	adds	r3, #4
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	1d1a      	adds	r2, r3, #4
 800326c:	603a      	str	r2, [r7, #0]
 800326e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003272:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 8003276:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 800327e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003282:	3304      	adds	r3, #4
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 8003288:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800328c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003294:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 8003298:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800329c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80032a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a4:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 80032a8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80032ac:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80032b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032b4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 80032b8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80032bc:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80032c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 80032c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032cc:	1d1a      	adds	r2, r3, #4
 80032ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80032d2:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80032d6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80032e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80032e6:	1d1a      	adds	r2, r3, #4
 80032e8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80032ec:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80032f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80032f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f8:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 80032fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8003304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003308:	3304      	adds	r3, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 800330e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003312:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800331a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 800331e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003322:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 800332e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003332:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 800333e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003342:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 800334e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003352:	1d1a      	adds	r2, r3, #4
 8003354:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003358:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800335c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8003368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800336c:	1d1a      	adds	r2, r3, #4
 800336e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003372:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8003376:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800337a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337e:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 8003382:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 800338a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800338e:	3304      	adds	r3, #4
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 8003394:	edd7 7a03 	vldr	s15, [r7, #12]
 8003398:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800339c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 80033a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80033a8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80033ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 80033b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80033b8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80033bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 80033c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80033c8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80033cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 80033d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80033de:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80033e2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80033e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ea:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 80033ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033f2:	1d1a      	adds	r2, r3, #4
 80033f4:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80033f8:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80033fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8003400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003404:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 8003408:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800340c:	b299      	uxth	r1, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	2304      	movs	r3, #4
 8003414:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8003416:	f000 f9f1 	bl	80037fc <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800341a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800341e:	b299      	uxth	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	2304      	movs	r3, #4
 8003426:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8003428:	f000 f9e8 	bl	80037fc <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800342c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003430:	b299      	uxth	r1, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	2304      	movs	r3, #4
 8003438:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800343a:	f000 f9df 	bl	80037fc <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800343e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003442:	b299      	uxth	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685a      	ldr	r2, [r3, #4]
 8003448:	2304      	movs	r3, #4
 800344a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800344c:	f000 f9d6 	bl	80037fc <arm_radix8_butterfly_f32>
}
 8003450:	bf00      	nop
 8003452:	37b0      	adds	r7, #176	@ 0xb0
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <arm_cfft_f32>:
ARM_DSP_ATTRIBUTE void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	4611      	mov	r1, r2
 8003464:	461a      	mov	r2, r3
 8003466:	460b      	mov	r3, r1
 8003468:	71fb      	strb	r3, [r7, #7]
 800346a:	4613      	mov	r3, r2
 800346c:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d117      	bne.n	80034aa <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	3304      	adds	r3, #4
 800347e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	e00d      	b.n	80034a2 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	edd3 7a00 	vldr	s15, [r3]
 800348c:	eef1 7a67 	vneg.f32	s15, s15
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	3308      	adds	r3, #8
 800349a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3301      	adds	r3, #1
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d3ed      	bcc.n	8003486 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b0:	d040      	beq.n	8003534 <arm_cfft_f32+0xdc>
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034b8:	d845      	bhi.n	8003546 <arm_cfft_f32+0xee>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c0:	d033      	beq.n	800352a <arm_cfft_f32+0xd2>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c8:	d83d      	bhi.n	8003546 <arm_cfft_f32+0xee>
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d0:	d026      	beq.n	8003520 <arm_cfft_f32+0xc8>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d8:	d835      	bhi.n	8003546 <arm_cfft_f32+0xee>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e0:	d028      	beq.n	8003534 <arm_cfft_f32+0xdc>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034e8:	d82d      	bhi.n	8003546 <arm_cfft_f32+0xee>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f0:	d01b      	beq.n	800352a <arm_cfft_f32+0xd2>
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f8:	d825      	bhi.n	8003546 <arm_cfft_f32+0xee>
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b80      	cmp	r3, #128	@ 0x80
 80034fe:	d00f      	beq.n	8003520 <arm_cfft_f32+0xc8>
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b80      	cmp	r3, #128	@ 0x80
 8003504:	d81f      	bhi.n	8003546 <arm_cfft_f32+0xee>
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b40      	cmp	r3, #64	@ 0x40
 800350a:	d013      	beq.n	8003534 <arm_cfft_f32+0xdc>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b40      	cmp	r3, #64	@ 0x40
 8003510:	d819      	bhi.n	8003546 <arm_cfft_f32+0xee>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b10      	cmp	r3, #16
 8003516:	d003      	beq.n	8003520 <arm_cfft_f32+0xc8>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	2b20      	cmp	r3, #32
 800351c:	d005      	beq.n	800352a <arm_cfft_f32+0xd2>
 800351e:	e012      	b.n	8003546 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f7fe ff74 	bl	8002410 <arm_cfft_radix8by2_f32>
    break;
 8003528:	e00d      	b.n	8003546 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f7ff f963 	bl	80027f8 <arm_cfft_radix8by4_f32>
    break;
 8003532:	e008      	b.n	8003546 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	b299      	uxth	r1, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	2301      	movs	r3, #1
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	f000 f95c 	bl	80037fc <arm_radix8_butterfly_f32>
    break;
 8003544:	bf00      	nop
  }

  if ( bitReverseFlag )
 8003546:	79bb      	ldrb	r3, [r7, #6]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8999      	ldrh	r1, [r3, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	461a      	mov	r2, r3
 8003556:	68b8      	ldr	r0, [r7, #8]
 8003558:	f7fe ff01 	bl	800235e <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d130      	bne.n	80035c4 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800356c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003574:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800357c:	2300      	movs	r3, #0
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	e01c      	b.n	80035bc <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	1d1a      	adds	r2, r3, #4
 8003586:	61ba      	str	r2, [r7, #24]
 8003588:	ed93 7a00 	vldr	s14, [r3]
 800358c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003594:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	edd3 7a00 	vldr	s15, [r3]
 800359e:	eeb1 7a67 	vneg.f32	s14, s15
 80035a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	3304      	adds	r3, #4
 80035b4:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3301      	adds	r3, #1
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d3de      	bcc.n	8003582 <arm_cfft_f32+0x12a>
    }
  }
}
 80035c4:	bf00      	nop
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <arm_cfft_init_2048_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(2048,1024)
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	2300      	movs	r3, #0
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035de:	801a      	strh	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <arm_cfft_init_2048_f32+0x44>)
 80035e8:	899a      	ldrh	r2, [r3, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	819a      	strh	r2, [r3, #12]
 80035ee:	4b08      	ldr	r3, [pc, #32]	@ (8003610 <arm_cfft_init_2048_f32+0x44>)
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	609a      	str	r2, [r3, #8]
 80035f6:	4b06      	ldr	r3, [pc, #24]	@ (8003610 <arm_cfft_init_2048_f32+0x44>)
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	080219bc 	.word	0x080219bc

08003614 <arm_cfft_init_1024_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(1024,1024)
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	2300      	movs	r3, #0
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003626:	801a      	strh	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <arm_cfft_init_1024_f32+0x44>)
 8003630:	899a      	ldrh	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	819a      	strh	r2, [r3, #12]
 8003636:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <arm_cfft_init_1024_f32+0x44>)
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	609a      	str	r2, [r3, #8]
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <arm_cfft_init_1024_f32+0x44>)
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	080219ac 	.word	0x080219ac

0800365c <arm_cfft_init_512_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(512,256)
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	4b0a      	ldr	r3, [pc, #40]	@ (80036a0 <arm_cfft_init_512_f32+0x44>)
 8003678:	899a      	ldrh	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	819a      	strh	r2, [r3, #12]
 800367e:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <arm_cfft_init_512_f32+0x44>)
 8003680:	689a      	ldr	r2, [r3, #8]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <arm_cfft_init_512_f32+0x44>)
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003692:	4618      	mov	r0, r3
 8003694:	3714      	adds	r7, #20
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	0802199c 	.word	0x0802199c

080036a4 <arm_cfft_init_256_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(256,256)
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <arm_cfft_init_256_f32+0x44>)
 80036c0:	899a      	ldrh	r2, [r3, #12]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	819a      	strh	r2, [r3, #12]
 80036c6:	4b08      	ldr	r3, [pc, #32]	@ (80036e8 <arm_cfft_init_256_f32+0x44>)
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	4b06      	ldr	r3, [pc, #24]	@ (80036e8 <arm_cfft_init_256_f32+0x44>)
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	0802198c 	.word	0x0802198c

080036ec <arm_cfft_init_128_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(128,64)
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	2300      	movs	r3, #0
 80036f6:	73fb      	strb	r3, [r7, #15]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2280      	movs	r2, #128	@ 0x80
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	4b09      	ldr	r3, [pc, #36]	@ (800372c <arm_cfft_init_128_f32+0x40>)
 8003706:	899a      	ldrh	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	819a      	strh	r2, [r3, #12]
 800370c:	4b07      	ldr	r3, [pc, #28]	@ (800372c <arm_cfft_init_128_f32+0x40>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	4b05      	ldr	r3, [pc, #20]	@ (800372c <arm_cfft_init_128_f32+0x40>)
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
 800371c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	0802197c 	.word	0x0802197c

08003730 <arm_cfft_init_64_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(64,64)
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	2300      	movs	r3, #0
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2240      	movs	r2, #64	@ 0x40
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	4b09      	ldr	r3, [pc, #36]	@ (8003770 <arm_cfft_init_64_f32+0x40>)
 800374a:	899a      	ldrh	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	819a      	strh	r2, [r3, #12]
 8003750:	4b07      	ldr	r3, [pc, #28]	@ (8003770 <arm_cfft_init_64_f32+0x40>)
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <arm_cfft_init_64_f32+0x40>)
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	0802196c 	.word	0x0802196c

08003774 <arm_cfft_init_32_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(32,16)
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	2300      	movs	r3, #0
 800377e:	73fb      	strb	r3, [r7, #15]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2220      	movs	r2, #32
 8003784:	801a      	strh	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <arm_cfft_init_32_f32+0x40>)
 800378e:	899a      	ldrh	r2, [r3, #12]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	819a      	strh	r2, [r3, #12]
 8003794:	4b07      	ldr	r3, [pc, #28]	@ (80037b4 <arm_cfft_init_32_f32+0x40>)
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <arm_cfft_init_32_f32+0x40>)
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	0802195c 	.word	0x0802195c

080037b8 <arm_cfft_init_16_f32>:

  @par          Use of this function is mandatory only for the MVE version of the FFT.
                Other versions can still initialize directly the data structure using 
                variables declared in arm_const_structs.h
 */
CFFTINIT_F32(16,16)
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2210      	movs	r2, #16
 80037c8:	801a      	strh	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <arm_cfft_init_16_f32+0x40>)
 80037d2:	899a      	ldrh	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	819a      	strh	r2, [r3, #12]
 80037d8:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <arm_cfft_init_16_f32+0x40>)
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <arm_cfft_init_16_f32+0x40>)
 80037e2:	685a      	ldr	r2, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	605a      	str	r2, [r3, #4]
 80037e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	0802194c 	.word	0x0802194c

080037fc <arm_radix8_butterfly_f32>:
ARM_DSP_ATTRIBUTE void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b0bd      	sub	sp, #244	@ 0xf4
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	461a      	mov	r2, r3
 8003808:	460b      	mov	r3, r1
 800380a:	817b      	strh	r3, [r7, #10]
 800380c:	4613      	mov	r3, r2
 800380e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8003810:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <arm_radix8_butterfly_f32+0x3c>)
 8003812:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 800381c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8003824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003828:	08db      	lsrs	r3, r3, #3
 800382a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003834:	e002      	b.n	800383c <arm_radix8_butterfly_f32+0x40>
 8003836:	bf00      	nop
 8003838:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800383c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003844:	4413      	add	r3, r2
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 800384a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	4413      	add	r3, r2
 8003854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 8003858:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800385c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003860:	4413      	add	r3, r2
 8003862:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 8003866:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800386a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800386e:	4413      	add	r3, r2
 8003870:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8003874:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800387c:	4413      	add	r3, r2
 800387e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 8003882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800388a:	4413      	add	r3, r2
 800388c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 8003890:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003898:	4413      	add	r3, r2
 800389a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800389e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4413      	add	r3, r2
 80038a8:	ed93 7a00 	vldr	s14, [r3]
 80038ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	4413      	add	r3, r2
 80038b6:	edd3 7a00 	vldr	s15, [r3]
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80038c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4413      	add	r3, r2
 80038cc:	ed93 7a00 	vldr	s14, [r3]
 80038d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	4413      	add	r3, r2
 80038da:	edd3 7a00 	vldr	s15, [r3]
 80038de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e2:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80038e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	ed93 7a00 	vldr	s14, [r3]
 80038f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	edd3 7a00 	vldr	s15, [r3]
 8003902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003906:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800390a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	4413      	add	r3, r2
 8003914:	ed93 7a00 	vldr	s14, [r3]
 8003918:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	edd3 7a00 	vldr	s15, [r3]
 8003926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800392a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800392e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003932:	00db      	lsls	r3, r3, #3
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	ed93 7a00 	vldr	s14, [r3]
 800393c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4413      	add	r3, r2
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394e:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8003952:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4413      	add	r3, r2
 800395c:	ed93 7a00 	vldr	s14, [r3]
 8003960:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	4413      	add	r3, r2
 800396a:	edd3 7a00 	vldr	s15, [r3]
 800396e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003972:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003976:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	ed93 7a00 	vldr	s14, [r3]
 8003984:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4413      	add	r3, r2
 800398e:	edd3 7a00 	vldr	s15, [r3]
 8003992:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003996:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800399a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4413      	add	r3, r2
 80039a4:	ed93 7a00 	vldr	s14, [r3]
 80039a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	edd3 7a00 	vldr	s15, [r3]
 80039b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ba:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 80039be:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80039c2:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80039c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ca:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 80039ce:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80039d2:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80039d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039da:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 80039de:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80039e2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80039e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ea:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 80039ee:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80039f2:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80039f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039fa:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 80039fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	4413      	add	r3, r2
 8003a08:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003a0c:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003a10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a14:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8003a18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a1c:	00db      	lsls	r3, r3, #3
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4413      	add	r3, r2
 8003a22:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003a26:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a2e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8003a32:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	3304      	adds	r3, #4
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	ed93 7a00 	vldr	s14, [r3]
 8003a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	3304      	adds	r3, #4
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a56:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003a5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3304      	adds	r3, #4
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4413      	add	r3, r2
 8003a66:	ed93 7a00 	vldr	s14, [r3]
 8003a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	3304      	adds	r3, #4
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a7e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003a82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3304      	adds	r3, #4
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	ed93 7a00 	vldr	s14, [r3]
 8003a92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	3304      	adds	r3, #4
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aa6:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003aaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	ed93 7a00 	vldr	s14, [r3]
 8003aba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ace:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8003ad2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	3304      	adds	r3, #4
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4413      	add	r3, r2
 8003ade:	ed93 7a00 	vldr	s14, [r3]
 8003ae2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	3304      	adds	r3, #4
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	edd3 7a00 	vldr	s15, [r3]
 8003af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af6:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003afa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	3304      	adds	r3, #4
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	ed93 7a00 	vldr	s14, [r3]
 8003b0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	3304      	adds	r3, #4
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	edd3 7a00 	vldr	s15, [r3]
 8003b1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b1e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003b22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3304      	adds	r3, #4
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	ed93 7a00 	vldr	s14, [r3]
 8003b32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	3304      	adds	r3, #4
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b46:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003b4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	3304      	adds	r3, #4
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	ed93 7a00 	vldr	s14, [r3]
 8003b5a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	3304      	adds	r3, #4
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b6e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 8003b72:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003b76:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b7e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 8003b82:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003b86:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8e:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 8003b92:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003b96:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9e:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 8003ba2:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8003ba6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bae:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8003bb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	3304      	adds	r3, #4
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003bc2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8003bce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3304      	adds	r3, #4
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8003bde:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003be6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8003bea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003bf8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003bfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c00:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8003c04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003c12:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c1a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8003c1e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	3304      	adds	r3, #4
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	4413      	add	r3, r2
 8003c2a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c2e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c36:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8003c3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	3304      	adds	r3, #4
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003c4a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c52:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8003c56:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003c5a:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c62:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 8003c6e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8003c72:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7a:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8003c86:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003c8a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c92:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8003c9e:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8003ca2:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003caa:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8003cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cb2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8003cb6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003cba:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003cbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc2:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8003cc6:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003cca:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8003cce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd2:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8003cd6:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003cda:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003cde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8003ce6:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003cea:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf2:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8003cf6:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003cfa:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d02:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8003d06:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003d0a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8003d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d12:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8003d16:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d1a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d22:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8003d26:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8003d2a:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d32:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8003d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003d44:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d4c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8003d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	4413      	add	r3, r2
 8003d5a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8003d5e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8003d62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d66:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8003d6a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4413      	add	r3, r2
 8003d74:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003d78:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d80:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8003d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003d92:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d9a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8003d9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	3304      	adds	r3, #4
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003dae:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8003dba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8003dca:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003dce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dd2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	3304      	adds	r3, #4
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4413      	add	r3, r2
 8003de2:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003de6:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dee:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8003df2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	3304      	adds	r3, #4
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8003e02:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8003e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e0a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8003e0e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e16:	4413      	add	r3, r2
 8003e18:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8003e1c:	897b      	ldrh	r3, [r7, #10]
 8003e1e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003e22:	429a      	cmp	r2, r3
 8003e24:	f4ff ad0a 	bcc.w	800383c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2c:	2b07      	cmp	r3, #7
 8003e2e:	f240 84e3 	bls.w	80047f8 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8003e3e:	893b      	ldrh	r3, [r7, #8]
 8003e40:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003e44:	4413      	add	r3, r2
 8003e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8003e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8003e4e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8003e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e54:	4413      	add	r3, r2
 8003e56:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8003e58:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e5c:	4413      	add	r3, r2
 8003e5e:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8003e60:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e64:	4413      	add	r3, r2
 8003e66:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8003e68:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003e6a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e6c:	4413      	add	r3, r2
 8003e6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8003e70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e72:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e74:	4413      	add	r3, r2
 8003e76:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8003e78:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003e7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e7c:	4413      	add	r3, r2
 8003e7e:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8003e80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	4413      	add	r3, r2
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8003e8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8003e9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8003ea6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4413      	add	r3, r2
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8003eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8003ebe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ec0:	00db      	lsls	r3, r3, #3
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8003eca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8003ed6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	3304      	adds	r3, #4
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8003ee6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	3304      	adds	r3, #4
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	4413      	add	r3, r2
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8003ef4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	3304      	adds	r3, #4
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	4413      	add	r3, r2
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8003f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	3304      	adds	r3, #4
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8003f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	3304      	adds	r3, #4
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8003f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	3304      	adds	r3, #4
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	4413      	add	r3, r2
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8003f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	3304      	adds	r3, #4
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8003f42:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8003f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8003f50:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8003f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f58:	4413      	add	r3, r2
 8003f5a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8003f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f66:	4413      	add	r3, r2
 8003f68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8003f6c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8003f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f74:	4413      	add	r3, r2
 8003f76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8003f7a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f82:	4413      	add	r3, r2
 8003f84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8003f88:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f90:	4413      	add	r3, r2
 8003f92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8003f96:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003fa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	ed93 7a00 	vldr	s14, [r3]
 8003fb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4413      	add	r3, r2
 8003fbc:	edd3 7a00 	vldr	s15, [r3]
 8003fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003fc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	ed93 7a00 	vldr	s14, [r3]
 8003fd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	edd3 7a00 	vldr	s15, [r3]
 8003fe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fe8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003fec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	ed93 7a00 	vldr	s14, [r3]
 8003ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	edd3 7a00 	vldr	s15, [r3]
 8004008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800400c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8004010:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4413      	add	r3, r2
 800401a:	ed93 7a00 	vldr	s14, [r3]
 800401e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	edd3 7a00 	vldr	s15, [r3]
 800402c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004030:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004034:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	ed93 7a00 	vldr	s14, [r3]
 8004042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	edd3 7a00 	vldr	s15, [r3]
 8004050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004054:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004058:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800405c:	00db      	lsls	r3, r3, #3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4413      	add	r3, r2
 8004062:	ed93 7a00 	vldr	s14, [r3]
 8004066:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	edd3 7a00 	vldr	s15, [r3]
 8004074:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004078:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800407c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4413      	add	r3, r2
 8004086:	ed93 7a00 	vldr	s14, [r3]
 800408a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	edd3 7a00 	vldr	s15, [r3]
 8004098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800409c:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80040a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	ed93 7a00 	vldr	s14, [r3]
 80040ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	edd3 7a00 	vldr	s15, [r3]
 80040bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040c0:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 80040c4:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80040c8:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80040cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d0:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 80040d4:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80040d8:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80040dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040e0:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 80040e4:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80040e8:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80040ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040f0:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 80040f4:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80040f8:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80040fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004100:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8004104:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004112:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800411e:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8004122:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800412a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800412e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	3304      	adds	r3, #4
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4413      	add	r3, r2
 800413a:	ed93 7a00 	vldr	s14, [r3]
 800413e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	3304      	adds	r3, #4
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	4413      	add	r3, r2
 800414a:	edd3 7a00 	vldr	s15, [r3]
 800414e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004152:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004156:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	3304      	adds	r3, #4
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	ed93 7a00 	vldr	s14, [r3]
 8004166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	3304      	adds	r3, #4
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800417a:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800417e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	3304      	adds	r3, #4
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	ed93 7a00 	vldr	s14, [r3]
 800418e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	3304      	adds	r3, #4
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4413      	add	r3, r2
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80041a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	3304      	adds	r3, #4
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4413      	add	r3, r2
 80041b2:	ed93 7a00 	vldr	s14, [r3]
 80041b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	3304      	adds	r3, #4
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ca:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80041ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	3304      	adds	r3, #4
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	4413      	add	r3, r2
 80041da:	ed93 7a00 	vldr	s14, [r3]
 80041de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	3304      	adds	r3, #4
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	edd3 7a00 	vldr	s15, [r3]
 80041ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80041f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	3304      	adds	r3, #4
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4413      	add	r3, r2
 8004202:	ed93 7a00 	vldr	s14, [r3]
 8004206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	3304      	adds	r3, #4
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	edd3 7a00 	vldr	s15, [r3]
 8004216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421a:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800421e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	3304      	adds	r3, #4
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4413      	add	r3, r2
 800422a:	ed93 7a00 	vldr	s14, [r3]
 800422e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	3304      	adds	r3, #4
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004242:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004246:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	3304      	adds	r3, #4
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	ed93 7a00 	vldr	s14, [r3]
 8004256:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	3304      	adds	r3, #4
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4413      	add	r3, r2
 8004262:	edd3 7a00 	vldr	s15, [r3]
 8004266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 800426e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004272:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800427a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 800427e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004282:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8004286:	ee77 7a27 	vadd.f32	s15, s14, s15
 800428a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 800428e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004292:	edd7 7a08 	vldr	s15, [r7, #32]
 8004296:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 800429e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80042a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80042a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 80042ae:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80042b2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80042b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042ba:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 80042be:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80042c2:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80042c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042ca:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80042ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	3304      	adds	r3, #4
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	4413      	add	r3, r2
 80042da:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80042e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042e6:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80042ea:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80042ee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80042f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 80042fa:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80042fe:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004306:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 800430a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800430e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004316:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 800431a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800431e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004326:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800432a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800432e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004336:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800433a:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800433e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004346:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800434a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800434e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8004352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004356:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800435a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4413      	add	r3, r2
 8004364:	ed97 7a07 	vldr	s14, [r7, #28]
 8004368:	edd7 7a06 	vldr	s15, [r7, #24]
 800436c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004370:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8004374:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	3304      	adds	r3, #4
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	ed97 7a05 	vldr	s14, [r7, #20]
 8004384:	edd7 7a04 	vldr	s15, [r7, #16]
 8004388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800438c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8004390:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8004394:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80043a0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80043a4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043ac:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80043b0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80043b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043bc:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80043c0:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80043c4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80043c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043cc:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80043d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	ed97 7a07 	vldr	s14, [r7, #28]
 80043de:	edd7 7a06 	vldr	s15, [r7, #24]
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80043ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	3304      	adds	r3, #4
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4413      	add	r3, r2
 80043f6:	ed97 7a05 	vldr	s14, [r7, #20]
 80043fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80043fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004402:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8004406:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800440a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800440e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8004416:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800441a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800441e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004422:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8004426:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800442a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800442e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004432:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8004436:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800443a:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800443e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004442:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8004446:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	ed97 7a07 	vldr	s14, [r7, #28]
 8004454:	edd7 7a06 	vldr	s15, [r7, #24]
 8004458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800445c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8004460:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	3304      	adds	r3, #4
 8004468:	68fa      	ldr	r2, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004470:	edd7 7a04 	vldr	s15, [r7, #16]
 8004474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004478:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800447c:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004480:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8004484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004488:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 800448c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004490:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 8004494:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8004498:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 800449c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a0:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80044a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a8:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80044ac:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80044b0:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80044b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b8:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 80044c4:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80044c8:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80044cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d0:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80044d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d8:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 80044dc:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80044e0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80044e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e8:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 80044ec:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80044f0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80044f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044f8:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 80044fc:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004500:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004508:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 800450c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8004510:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004518:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 800451c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004520:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004528:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 800452c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8004530:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004538:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 800453c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004540:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004544:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004548:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 800454c:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8004550:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 800455c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004560:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004568:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 800456c:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8004570:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8004574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004578:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 800457c:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004580:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004588:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 800458c:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8004590:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8004594:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004598:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 800459c:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80045a0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80045a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045a8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80045ac:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80045b0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80045b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045b8:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 80045bc:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80045c0:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80045c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045c8:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 80045cc:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80045d0:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80045d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045d8:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 80045dc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80045e0:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80045e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80045ec:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80045f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80045f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80045fc:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8004600:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004608:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800460c:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004610:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8004614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004618:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800461c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004620:	00db      	lsls	r3, r3, #3
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	ed97 7a07 	vldr	s14, [r7, #28]
 800462a:	edd7 7a06 	vldr	s15, [r7, #24]
 800462e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004632:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8004636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	3304      	adds	r3, #4
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	4413      	add	r3, r2
 8004642:	ed97 7a05 	vldr	s14, [r7, #20]
 8004646:	edd7 7a04 	vldr	s15, [r7, #16]
 800464a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800464e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8004652:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004656:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800465a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8004662:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004666:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800466a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8004672:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004676:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8004682:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004686:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8004692:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	ed97 7a07 	vldr	s14, [r7, #28]
 80046a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80046ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	3304      	adds	r3, #4
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80046bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80046c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80046c8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80046cc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80046d8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80046dc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80046e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046e4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80046e8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80046ec:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80046f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80046f8:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80046fc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8004700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004704:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8004708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800470c:	00db      	lsls	r3, r3, #3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	ed97 7a07 	vldr	s14, [r7, #28]
 8004716:	edd7 7a06 	vldr	s15, [r7, #24]
 800471a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800471e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8004722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	3304      	adds	r3, #4
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	4413      	add	r3, r2
 800472e:	ed97 7a05 	vldr	s14, [r7, #20]
 8004732:	edd7 7a04 	vldr	s15, [r7, #16]
 8004736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800473a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800473e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004742:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800474a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800474e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004752:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8004756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800475e:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8004762:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8004766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800476a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800476e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004772:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800477e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	ed97 7a07 	vldr	s14, [r7, #28]
 800478c:	edd7 7a06 	vldr	s15, [r7, #24]
 8004790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004794:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8004798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800479c:	00db      	lsls	r3, r3, #3
 800479e:	3304      	adds	r3, #4
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4413      	add	r3, r2
 80047a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80047a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80047ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047b0:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80047b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047bc:	4413      	add	r3, r2
 80047be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 80047c2:	897b      	ldrh	r3, [r7, #10]
 80047c4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80047c8:	429a      	cmp	r2, r3
 80047ca:	f4ff abba 	bcc.w	8003f42 <arm_radix8_butterfly_f32+0x746>

         j++;
 80047ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047d2:	3301      	adds	r3, #1
 80047d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 80047d8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e0:	429a      	cmp	r2, r3
 80047e2:	f4ff ab2c 	bcc.w	8003e3e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80047e6:	893b      	ldrh	r3, [r7, #8]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f0:	2b07      	cmp	r3, #7
 80047f2:	f63f a813 	bhi.w	800381c <arm_radix8_butterfly_f32+0x20>
}
 80047f6:	e000      	b.n	80047fa <arm_radix8_butterfly_f32+0xffe>
         break;
 80047f8:	bf00      	nop
}
 80047fa:	bf00      	nop
 80047fc:	37f4      	adds	r7, #244	@ 0xf4
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop

08004808 <stage_rfft_f32>:
#else
static void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 8004808:	b480      	push	{r7}
 800480a:	b095      	sub	sp, #84	@ 0x54
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	881b      	ldrh	r3, [r3, #0]
 8004826:	3b01      	subs	r3, #1
 8004828:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800482a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 8004830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004832:	3304      	adds	r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 8004838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 800483e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004840:	3304      	adds	r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 8004846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004848:	1d1a      	adds	r2, r3, #4
 800484a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 8004850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004852:	1d1a      	adds	r2, r3, #4
 8004854:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	62bb      	str	r3, [r7, #40]	@ 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800485a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800485e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004862:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004866:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800486a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800486e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004872:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004876:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800487a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800487e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004882:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1d1a      	adds	r2, r3, #4
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004890:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004894:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8004898:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800489c:	edd7 7a08 	vldr	s15, [r7, #32]
 80048a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	1d1a      	adds	r2, r3, #4
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80048ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048b2:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80048b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	4413      	add	r3, r2
 80048be:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 80048c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048c2:	3308      	adds	r3, #8
 80048c4:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80048c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c8:	3304      	adds	r3, #4
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 80048ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 80048d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 80048da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048dc:	3304      	adds	r3, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80048ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ee:	1d1a      	adds	r2, r3, #4
 80048f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 80048f6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80048fa:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80048fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004902:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8004906:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800490a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800490e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004912:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8004916:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800491a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800491e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004922:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8004926:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800492a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800492e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004932:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8004936:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800493a:	edd7 7a08 	vldr	s15, [r7, #32]
 800493e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004942:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8004946:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800494a:	edd7 7a08 	vldr	s15, [r7, #32]
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8004956:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800495a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800495e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004962:	edd7 7a07 	vldr	s15, [r7, #28]
 8004966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800496a:	edd7 7a04 	vldr	s15, [r7, #16]
 800496e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	1d1a      	adds	r2, r3, #4
 8004976:	607a      	str	r2, [r7, #4]
 8004978:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800497c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004980:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8004984:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004988:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800498c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004990:	edd7 7a06 	vldr	s15, [r7, #24]
 8004994:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004998:	edd7 7a05 	vldr	s15, [r7, #20]
 800499c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1d1a      	adds	r2, r3, #4
 80049a4:	607a      	str	r2, [r7, #4]
 80049a6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80049ae:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 80049b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049b4:	3308      	adds	r3, #8
 80049b6:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80049b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049ba:	3b08      	subs	r3, #8
 80049bc:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80049be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c0:	3b01      	subs	r3, #1
 80049c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0);
 80049c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f73f af7d 	bgt.w	80048c6 <stage_rfft_f32+0xbe>
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	3754      	adds	r7, #84	@ 0x54
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <merge_rfft_f32>:
/* Prepares data for inverse cfft */
static void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
  const float32_t * p,
        float32_t * pOut)
{
 80049da:	b480      	push	{r7}
 80049dc:	b095      	sub	sp, #84	@ 0x54
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  const float32_t *pA = p;                          /* increasing pointer */
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	647b      	str	r3, [r7, #68]	@ 0x44
  const float32_t *pB = p;                          /* decreasing pointer */
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 80049fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 8004a02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a04:	3304      	adds	r3, #4
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8004a10:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004a14:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	1d1a      	adds	r2, r3, #4
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a2a:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8004a2e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004a32:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8004a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	1d1a      	adds	r2, r3, #4
 8004a3e:	607a      	str	r2, [r7, #4]
 8004a40:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a48:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8004a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	4413      	add	r3, r2
 8004a54:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 8004a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a58:	3308      	adds	r3, #8
 8004a5a:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0)
 8004a5c:	e07e      	b.n	8004b5c <merge_rfft_f32+0x182>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a60:	3304      	adds	r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 8004a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 8004a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 8004a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a74:	3304      	adds	r3, #4
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a7c:	1d1a      	adds	r2, r3, #4
 8004a7e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 8004a84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a86:	1d1a      	adds	r2, r3, #4
 8004a88:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 8004a8e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004a92:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 8004a9e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004aa2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004aa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aaa:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8004aae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004ab2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8004abe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004ac2:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8004ace:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004ad2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ada:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8004ade:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004ae2:	edd7 7a08 	vldr	s15, [r7, #32]
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8004aee:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004af2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004afa:	edd7 7a07 	vldr	s15, [r7, #28]
 8004afe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b02:	edd7 7a06 	vldr	s15, [r7, #24]
 8004b06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	1d1a      	adds	r2, r3, #4
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004b14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b18:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8004b1c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8004b20:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b28:	edd7 7a05 	vldr	s15, [r7, #20]
 8004b2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8004b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	607a      	str	r2, [r7, #4]
 8004b3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004b42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b46:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8004b4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4c:	3308      	adds	r3, #8
 8004b4e:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8004b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b52:	3b08      	subs	r3, #8
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8004b56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0)
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f73f af7d 	bgt.w	8004a5e <merge_rfft_f32+0x84>
   }

}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3754      	adds	r7, #84	@ 0x54
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <arm_rfft_fast_f32>:
ARM_DSP_ATTRIBUTE void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b086      	sub	sp, #24
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	607a      	str	r2, [r7, #4]
 8004b7e:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff ff23 	bl	80049da <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8004b94:	78fa      	ldrb	r2, [r7, #3]
 8004b96:	2301      	movs	r3, #1
 8004b98:	6879      	ldr	r1, [r7, #4]
 8004b9a:	6978      	ldr	r0, [r7, #20]
 8004b9c:	f7fe fc5c 	bl	8003458 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8004ba0:	e00a      	b.n	8004bb8 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8004ba2:	78fa      	ldrb	r2, [r7, #3]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f7fe fc55 	bl	8003458 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fe28 	bl	8004808 <stage_rfft_f32>
}
 8004bb8:	bf00      	nop
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <arm_rfft_fast_init_32_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_32_f32( arm_rfft_fast_instance_f32 * S ) {
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d102      	bne.n	8004bd4 <arm_rfft_fast_init_32_f32+0x14>
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bd2:	e013      	b.n	8004bfc <arm_rfft_fast_init_32_f32+0x3c>

  status=arm_cfft_init_16_f32(&(S->Sint));
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fe fdee 	bl	80037b8 <arm_cfft_init_16_f32>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <arm_rfft_fast_init_32_f32+0x2e>
  {
    return(status);
 8004be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bec:	e006      	b.n	8004bfc <arm_rfft_fast_init_32_f32+0x3c>
  }

  S->fftLenRFFT = 32U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2220      	movs	r2, #32
 8004bf2:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a03      	ldr	r2, [pc, #12]	@ (8004c04 <arm_rfft_fast_init_32_f32+0x44>)
 8004bf8:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	080199cc 	.word	0x080199cc

08004c08 <arm_rfft_fast_init_64_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_64_f32( arm_rfft_fast_instance_f32 * S ) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d102      	bne.n	8004c1c <arm_rfft_fast_init_64_f32+0x14>
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c1a:	e013      	b.n	8004c44 <arm_rfft_fast_init_64_f32+0x3c>

  status=arm_cfft_init_32_f32(&(S->Sint));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fda8 	bl	8003774 <arm_cfft_init_32_f32>
 8004c24:	4603      	mov	r3, r0
 8004c26:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <arm_rfft_fast_init_64_f32+0x2e>
  {
    return(status);
 8004c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c34:	e006      	b.n	8004c44 <arm_rfft_fast_init_64_f32+0x3c>
  }
  S->fftLenRFFT = 64U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2240      	movs	r2, #64	@ 0x40
 8004c3a:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a03      	ldr	r2, [pc, #12]	@ (8004c4c <arm_rfft_fast_init_64_f32+0x44>)
 8004c40:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004c42:	2300      	movs	r3, #0
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3710      	adds	r7, #16
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	08019a4c 	.word	0x08019a4c

08004c50 <arm_rfft_fast_init_128_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_128_f32( arm_rfft_fast_instance_f32 * S ) {
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d102      	bne.n	8004c64 <arm_rfft_fast_init_128_f32+0x14>
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c62:	e013      	b.n	8004c8c <arm_rfft_fast_init_128_f32+0x3c>

  status=arm_cfft_init_64_f32(&(S->Sint));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fd62 	bl	8003730 <arm_cfft_init_64_f32>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <arm_rfft_fast_init_128_f32+0x2e>
  {
    return(status);
 8004c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c7c:	e006      	b.n	8004c8c <arm_rfft_fast_init_128_f32+0x3c>
  }
  S->fftLenRFFT = 128;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2280      	movs	r2, #128	@ 0x80
 8004c82:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a03      	ldr	r2, [pc, #12]	@ (8004c94 <arm_rfft_fast_init_128_f32+0x44>)
 8004c88:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08019b4c 	.word	0x08019b4c

08004c98 <arm_rfft_fast_init_256_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_256_f32( arm_rfft_fast_instance_f32 * S ) {
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d102      	bne.n	8004cac <arm_rfft_fast_init_256_f32+0x14>
 8004ca6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004caa:	e014      	b.n	8004cd6 <arm_rfft_fast_init_256_f32+0x3e>

  status=arm_cfft_init_128_f32(&(S->Sint));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fd1c 	bl	80036ec <arm_cfft_init_128_f32>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <arm_rfft_fast_init_256_f32+0x2e>
  {
    return(status);
 8004cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cc4:	e007      	b.n	8004cd6 <arm_rfft_fast_init_256_f32+0x3e>
  }
  S->fftLenRFFT = 256U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ccc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a03      	ldr	r2, [pc, #12]	@ (8004ce0 <arm_rfft_fast_init_256_f32+0x48>)
 8004cd2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3710      	adds	r7, #16
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	08019d4c 	.word	0x08019d4c

08004ce4 <arm_rfft_fast_init_512_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_512_f32( arm_rfft_fast_instance_f32 * S ) {
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d102      	bne.n	8004cf8 <arm_rfft_fast_init_512_f32+0x14>
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cf6:	e014      	b.n	8004d22 <arm_rfft_fast_init_512_f32+0x3e>

  status=arm_cfft_init_256_f32(&(S->Sint));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe fcd2 	bl	80036a4 <arm_cfft_init_256_f32>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d002      	beq.n	8004d12 <arm_rfft_fast_init_512_f32+0x2e>
  {
    return(status);
 8004d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d10:	e007      	b.n	8004d22 <arm_rfft_fast_init_512_f32+0x3e>
  }
  S->fftLenRFFT = 512U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d18:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a03      	ldr	r2, [pc, #12]	@ (8004d2c <arm_rfft_fast_init_512_f32+0x48>)
 8004d1e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	0801a14c 	.word	0x0801a14c

08004d30 <arm_rfft_fast_init_1024_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_1024_f32( arm_rfft_fast_instance_f32 * S ) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <arm_rfft_fast_init_1024_f32+0x14>
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d42:	e014      	b.n	8004d6e <arm_rfft_fast_init_1024_f32+0x3e>

  status=arm_cfft_init_512_f32(&(S->Sint));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fc88 	bl	800365c <arm_cfft_init_512_f32>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <arm_rfft_fast_init_1024_f32+0x2e>
  {
    return(status);
 8004d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d5c:	e007      	b.n	8004d6e <arm_rfft_fast_init_1024_f32+0x3e>
  }
  S->fftLenRFFT = 1024U;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d64:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a03      	ldr	r2, [pc, #12]	@ (8004d78 <arm_rfft_fast_init_1024_f32+0x48>)
 8004d6a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	0801a94c 	.word	0x0801a94c

08004d7c <arm_rfft_fast_init_2048_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_2048_f32( arm_rfft_fast_instance_f32 * S ) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <arm_rfft_fast_init_2048_f32+0x14>
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d8e:	e014      	b.n	8004dba <arm_rfft_fast_init_2048_f32+0x3e>

  status=arm_cfft_init_1024_f32(&(S->Sint));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe fc3e 	bl	8003614 <arm_cfft_init_1024_f32>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d002      	beq.n	8004daa <arm_rfft_fast_init_2048_f32+0x2e>
  {
    return(status);
 8004da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004da8:	e007      	b.n	8004dba <arm_rfft_fast_init_2048_f32+0x3e>
  }
  S->fftLenRFFT = 2048U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004db0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a03      	ldr	r2, [pc, #12]	@ (8004dc4 <arm_rfft_fast_init_2048_f32+0x48>)
 8004db6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	0801b94c 	.word	0x0801b94c

08004dc8 <arm_rfft_fast_init_4096_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_4096_f32( arm_rfft_fast_instance_f32 * S ) {
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d102      	bne.n	8004ddc <arm_rfft_fast_init_4096_f32+0x14>
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dda:	e014      	b.n	8004e06 <arm_rfft_fast_init_4096_f32+0x3e>

  status=arm_cfft_init_2048_f32(&(S->Sint));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fbf4 	bl	80035cc <arm_cfft_init_2048_f32>
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8004de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <arm_rfft_fast_init_4096_f32+0x2e>
  {
    return(status);
 8004df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df4:	e007      	b.n	8004e06 <arm_rfft_fast_init_4096_f32+0x3e>
  }
  S->fftLenRFFT = 4096U;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004dfc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a03      	ldr	r2, [pc, #12]	@ (8004e10 <arm_rfft_fast_init_4096_f32+0x48>)
 8004e02:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3710      	adds	r7, #16
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	0801d94c 	.word	0x0801d94c

08004e14 <arm_rfft_fast_init_f32>:
 */

ARM_DSP_ATTRIBUTE arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	807b      	strh	r3, [r7, #2]
  arm_status status;


  switch (fftLen)
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e26:	d023      	beq.n	8004e70 <arm_rfft_fast_init_f32+0x5c>
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2c:	dc50      	bgt.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
 8004e2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e32:	d023      	beq.n	8004e7c <arm_rfft_fast_init_f32+0x68>
 8004e34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e38:	dc4a      	bgt.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
 8004e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e3e:	d023      	beq.n	8004e88 <arm_rfft_fast_init_f32+0x74>
 8004e40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e44:	dc44      	bgt.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
 8004e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e4a:	d023      	beq.n	8004e94 <arm_rfft_fast_init_f32+0x80>
 8004e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e50:	dc3e      	bgt.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
 8004e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e56:	d023      	beq.n	8004ea0 <arm_rfft_fast_init_f32+0x8c>
 8004e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e5c:	dc38      	bgt.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
 8004e5e:	2b80      	cmp	r3, #128	@ 0x80
 8004e60:	d024      	beq.n	8004eac <arm_rfft_fast_init_f32+0x98>
 8004e62:	2b80      	cmp	r3, #128	@ 0x80
 8004e64:	dc34      	bgt.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
 8004e66:	2b20      	cmp	r3, #32
 8004e68:	d02c      	beq.n	8004ec4 <arm_rfft_fast_init_f32+0xb0>
 8004e6a:	2b40      	cmp	r3, #64	@ 0x40
 8004e6c:	d024      	beq.n	8004eb8 <arm_rfft_fast_init_f32+0xa4>
 8004e6e:	e02f      	b.n	8004ed0 <arm_rfft_fast_init_f32+0xbc>
  {
  case 4096U:
    status = arm_rfft_fast_init_4096_f32(S);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff ffa9 	bl	8004dc8 <arm_rfft_fast_init_4096_f32>
 8004e76:	4603      	mov	r3, r0
 8004e78:	73fb      	strb	r3, [r7, #15]
    break;
 8004e7a:	e02c      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 2048U:
    status = arm_rfft_fast_init_2048_f32(S);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff ff7d 	bl	8004d7c <arm_rfft_fast_init_2048_f32>
 8004e82:	4603      	mov	r3, r0
 8004e84:	73fb      	strb	r3, [r7, #15]
    break;
 8004e86:	e026      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 1024U:
    status = arm_rfft_fast_init_1024_f32(S);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff ff51 	bl	8004d30 <arm_rfft_fast_init_1024_f32>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	73fb      	strb	r3, [r7, #15]
    break;
 8004e92:	e020      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 512U:
    status = arm_rfft_fast_init_512_f32(S);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff25 	bl	8004ce4 <arm_rfft_fast_init_512_f32>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	73fb      	strb	r3, [r7, #15]
    break;
 8004e9e:	e01a      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 256U:
    status = arm_rfft_fast_init_256_f32(S);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7ff fef9 	bl	8004c98 <arm_rfft_fast_init_256_f32>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8004eaa:	e014      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 128U:
    status = arm_rfft_fast_init_128_f32(S);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff fecf 	bl	8004c50 <arm_rfft_fast_init_128_f32>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8004eb6:	e00e      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 64U:
    status = arm_rfft_fast_init_64_f32(S);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f7ff fea5 	bl	8004c08 <arm_rfft_fast_init_64_f32>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8004ec2:	e008      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  case 32U:
    status = arm_rfft_fast_init_32_f32(S);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fe7b 	bl	8004bc0 <arm_rfft_fast_init_32_f32>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8004ece:	e002      	b.n	8004ed6 <arm_rfft_fast_init_f32+0xc2>
  default:
    return(ARM_MATH_ARGUMENT_ERROR);
 8004ed0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ed4:	e001      	b.n	8004eda <arm_rfft_fast_init_f32+0xc6>
    break;
  }

  return(status);
 8004ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <HAL_Init+0x40>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a0d      	ldr	r2, [pc, #52]	@ (8004f24 <HAL_Init+0x40>)
 8004eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <HAL_Init+0x40>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f24 <HAL_Init+0x40>)
 8004efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f00:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <HAL_Init+0x40>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a07      	ldr	r2, [pc, #28]	@ (8004f24 <HAL_Init+0x40>)
 8004f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f0c:	2003      	movs	r0, #3
 8004f0e:	f000 fd37 	bl	8005980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f12:	200f      	movs	r0, #15
 8004f14:	f000 f808 	bl	8004f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f18:	f7fc ff2e 	bl	8001d78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40023c00 	.word	0x40023c00

08004f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f30:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <HAL_InitTick+0x54>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4b12      	ldr	r3, [pc, #72]	@ (8004f80 <HAL_InitTick+0x58>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f46:	4618      	mov	r0, r3
 8004f48:	f000 fd4f 	bl	80059ea <HAL_SYSTICK_Config>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e00e      	b.n	8004f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b0f      	cmp	r3, #15
 8004f5a:	d80a      	bhi.n	8004f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	6879      	ldr	r1, [r7, #4]
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f64:	f000 fd17 	bl	8005996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f68:	4a06      	ldr	r2, [pc, #24]	@ (8004f84 <HAL_InitTick+0x5c>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	e000      	b.n	8004f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000018 	.word	0x20000018
 8004f80:	20000020 	.word	0x20000020
 8004f84:	2000001c 	.word	0x2000001c

08004f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f8c:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <HAL_IncTick+0x20>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <HAL_IncTick+0x24>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4413      	add	r3, r2
 8004f98:	4a04      	ldr	r2, [pc, #16]	@ (8004fac <HAL_IncTick+0x24>)
 8004f9a:	6013      	str	r3, [r2, #0]
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000020 	.word	0x20000020
 8004fac:	200055e0 	.word	0x200055e0

08004fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <HAL_GetTick+0x14>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200055e0 	.word	0x200055e0

08004fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fd0:	f7ff ffee 	bl	8004fb0 <HAL_GetTick>
 8004fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe0:	d005      	beq.n	8004fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <HAL_Delay+0x44>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004fee:	bf00      	nop
 8004ff0:	f7ff ffde 	bl	8004fb0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d8f7      	bhi.n	8004ff0 <HAL_Delay+0x28>
  {
  }
}
 8005000:	bf00      	nop
 8005002:	bf00      	nop
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000020 	.word	0x20000020

08005010 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005018:	2300      	movs	r3, #0
 800501a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e033      	b.n	800508e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7fc feca 	bl	8001dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	f003 0310 	and.w	r3, r3, #16
 800504a:	2b00      	cmp	r3, #0
 800504c:	d118      	bne.n	8005080 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005052:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005056:	f023 0302 	bic.w	r3, r3, #2
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 fa3e 	bl	80054e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	f023 0303 	bic.w	r3, r3, #3
 8005076:	f043 0201 	orr.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	641a      	str	r2, [r3, #64]	@ 0x40
 800507e:	e001      	b.n	8005084 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800508c:	7bfb      	ldrb	r3, [r7, #15]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d101      	bne.n	80050b6 <HAL_ADC_Start_DMA+0x1e>
 80050b2:	2302      	movs	r3, #2
 80050b4:	e0ce      	b.n	8005254 <HAL_ADC_Start_DMA+0x1bc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d018      	beq.n	80050fe <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0201 	orr.w	r2, r2, #1
 80050da:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80050dc:	4b5f      	ldr	r3, [pc, #380]	@ (800525c <HAL_ADC_Start_DMA+0x1c4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5f      	ldr	r2, [pc, #380]	@ (8005260 <HAL_ADC_Start_DMA+0x1c8>)
 80050e2:	fba2 2303 	umull	r2, r3, r2, r3
 80050e6:	0c9a      	lsrs	r2, r3, #18
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80050f0:	e002      	b.n	80050f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f9      	bne.n	80050f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800510c:	d107      	bne.n	800511e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800511c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b01      	cmp	r3, #1
 800512a:	f040 8086 	bne.w	800523a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005136:	f023 0301 	bic.w	r3, r3, #1
 800513a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514c:	2b00      	cmp	r3, #0
 800514e:	d007      	beq.n	8005160 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8005158:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005168:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516c:	d106      	bne.n	800517c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	f023 0206 	bic.w	r2, r3, #6
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	645a      	str	r2, [r3, #68]	@ 0x44
 800517a:	e002      	b.n	8005182 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800518a:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <HAL_ADC_Start_DMA+0x1cc>)
 800518c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005192:	4a35      	ldr	r2, [pc, #212]	@ (8005268 <HAL_ADC_Start_DMA+0x1d0>)
 8005194:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	4a34      	ldr	r2, [pc, #208]	@ (800526c <HAL_ADC_Start_DMA+0x1d4>)
 800519c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	4a33      	ldr	r2, [pc, #204]	@ (8005270 <HAL_ADC_Start_DMA+0x1d8>)
 80051a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80051ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80051be:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	689a      	ldr	r2, [r3, #8]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051ce:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	334c      	adds	r3, #76	@ 0x4c
 80051da:	4619      	mov	r1, r3
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f000 fcbe 	bl	8005b60 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d10f      	bne.n	8005210 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d129      	bne.n	8005252 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800520c:	609a      	str	r2, [r3, #8]
 800520e:	e020      	b.n	8005252 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <HAL_ADC_Start_DMA+0x1dc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d11b      	bne.n	8005252 <HAL_ADC_Start_DMA+0x1ba>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d114      	bne.n	8005252 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005236:	609a      	str	r2, [r3, #8]
 8005238:	e00b      	b.n	8005252 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	f043 0210 	orr.w	r2, r3, #16
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000018 	.word	0x20000018
 8005260:	431bde83 	.word	0x431bde83
 8005264:	40012300 	.word	0x40012300
 8005268:	080056dd 	.word	0x080056dd
 800526c:	08005797 	.word	0x08005797
 8005270:	080057b3 	.word	0x080057b3
 8005274:	40012000 	.word	0x40012000

08005278 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_ADC_ConfigChannel+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e105      	b.n	80054c8 <HAL_ADC_ConfigChannel+0x228>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b09      	cmp	r3, #9
 80052ca:	d925      	bls.n	8005318 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68d9      	ldr	r1, [r3, #12]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	3b1e      	subs	r3, #30
 80052e2:	2207      	movs	r2, #7
 80052e4:	fa02 f303 	lsl.w	r3, r2, r3
 80052e8:	43da      	mvns	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	400a      	ands	r2, r1
 80052f0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68d9      	ldr	r1, [r3, #12]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	689a      	ldr	r2, [r3, #8]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	4618      	mov	r0, r3
 8005304:	4603      	mov	r3, r0
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	4403      	add	r3, r0
 800530a:	3b1e      	subs	r3, #30
 800530c:	409a      	lsls	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e022      	b.n	800535e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6919      	ldr	r1, [r3, #16]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	4613      	mov	r3, r2
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	4413      	add	r3, r2
 800532c:	2207      	movs	r2, #7
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43da      	mvns	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	400a      	ands	r2, r1
 800533a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6919      	ldr	r1, [r3, #16]
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	4618      	mov	r0, r3
 800534e:	4603      	mov	r3, r0
 8005350:	005b      	lsls	r3, r3, #1
 8005352:	4403      	add	r3, r0
 8005354:	409a      	lsls	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b06      	cmp	r3, #6
 8005364:	d824      	bhi.n	80053b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	4613      	mov	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	3b05      	subs	r3, #5
 8005378:	221f      	movs	r2, #31
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	43da      	mvns	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	400a      	ands	r2, r1
 8005386:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	b29b      	uxth	r3, r3
 8005394:	4618      	mov	r0, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	4413      	add	r3, r2
 80053a0:	3b05      	subs	r3, #5
 80053a2:	fa00 f203 	lsl.w	r2, r0, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80053ae:	e04c      	b.n	800544a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d824      	bhi.n	8005402 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	3b23      	subs	r3, #35	@ 0x23
 80053ca:	221f      	movs	r2, #31
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43da      	mvns	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	400a      	ands	r2, r1
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	4618      	mov	r0, r3
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	3b23      	subs	r3, #35	@ 0x23
 80053f4:	fa00 f203 	lsl.w	r2, r0, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005400:	e023      	b.n	800544a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	4613      	mov	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	4413      	add	r3, r2
 8005412:	3b41      	subs	r3, #65	@ 0x41
 8005414:	221f      	movs	r2, #31
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	43da      	mvns	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	400a      	ands	r2, r1
 8005422:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	b29b      	uxth	r3, r3
 8005430:	4618      	mov	r0, r3
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	3b41      	subs	r3, #65	@ 0x41
 800543e:	fa00 f203 	lsl.w	r2, r0, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800544a:	4b22      	ldr	r3, [pc, #136]	@ (80054d4 <HAL_ADC_ConfigChannel+0x234>)
 800544c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a21      	ldr	r2, [pc, #132]	@ (80054d8 <HAL_ADC_ConfigChannel+0x238>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d109      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1cc>
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2b12      	cmp	r3, #18
 800545e:	d105      	bne.n	800546c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a19      	ldr	r2, [pc, #100]	@ (80054d8 <HAL_ADC_ConfigChannel+0x238>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d123      	bne.n	80054be <HAL_ADC_ConfigChannel+0x21e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b10      	cmp	r3, #16
 800547c:	d003      	beq.n	8005486 <HAL_ADC_ConfigChannel+0x1e6>
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b11      	cmp	r3, #17
 8005484:	d11b      	bne.n	80054be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b10      	cmp	r3, #16
 8005498:	d111      	bne.n	80054be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800549a:	4b10      	ldr	r3, [pc, #64]	@ (80054dc <HAL_ADC_ConfigChannel+0x23c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a10      	ldr	r2, [pc, #64]	@ (80054e0 <HAL_ADC_ConfigChannel+0x240>)
 80054a0:	fba2 2303 	umull	r2, r3, r2, r3
 80054a4:	0c9a      	lsrs	r2, r3, #18
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80054b0:	e002      	b.n	80054b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1f9      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40012300 	.word	0x40012300
 80054d8:	40012000 	.word	0x40012000
 80054dc:	20000018 	.word	0x20000018
 80054e0:	431bde83 	.word	0x431bde83

080054e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b085      	sub	sp, #20
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80054ec:	4b79      	ldr	r3, [pc, #484]	@ (80056d4 <ADC_Init+0x1f0>)
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6859      	ldr	r1, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	021a      	lsls	r2, r3, #8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	430a      	orrs	r2, r1
 800552c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800553c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6859      	ldr	r1, [r3, #4]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800555e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6899      	ldr	r1, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	4a58      	ldr	r2, [pc, #352]	@ (80056d8 <ADC_Init+0x1f4>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d022      	beq.n	80055c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	689a      	ldr	r2, [r3, #8]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800558a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6899      	ldr	r1, [r3, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6899      	ldr	r1, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	e00f      	b.n	80055e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80055d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0202 	bic.w	r2, r2, #2
 80055f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	6899      	ldr	r1, [r3, #8]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	7e1b      	ldrb	r3, [r3, #24]
 80055fc:	005a      	lsls	r2, r3, #1
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01b      	beq.n	8005648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800561e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800562e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6859      	ldr	r1, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	3b01      	subs	r3, #1
 800563c:	035a      	lsls	r2, r3, #13
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	e007      	b.n	8005658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8005666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	3b01      	subs	r3, #1
 8005674:	051a      	lsls	r2, r3, #20
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	430a      	orrs	r2, r1
 800567c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	689a      	ldr	r2, [r3, #8]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800568c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6899      	ldr	r1, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800569a:	025a      	lsls	r2, r3, #9
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6899      	ldr	r1, [r3, #8]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	029a      	lsls	r2, r3, #10
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	40012300 	.word	0x40012300
 80056d8:	0f000001 	.word	0x0f000001

080056dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d13c      	bne.n	8005770 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d12b      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005714:	2b00      	cmp	r3, #0
 8005716:	d127      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005730:	2b00      	cmp	r3, #0
 8005732:	d119      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0220 	bic.w	r2, r2, #32
 8005742:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005748:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d105      	bne.n	8005768 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005760:	f043 0201 	orr.w	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7fb fe1b 	bl	80013a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800576e:	e00e      	b.n	800578e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fd85 	bl	800528c <HAL_ADC_ErrorCallback>
}
 8005782:	e004      	b.n	800578e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	4798      	blx	r3
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b084      	sub	sp, #16
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f7ff fd67 	bl	8005278 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b084      	sub	sp, #16
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2240      	movs	r2, #64	@ 0x40
 80057c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ca:	f043 0204 	orr.w	r2, r3, #4
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f7ff fd5a 	bl	800528c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005824 <__NVIC_SetPriorityGrouping+0x44>)
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80057fc:	4013      	ands	r3, r2
 80057fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005808:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800580c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005812:	4a04      	ldr	r2, [pc, #16]	@ (8005824 <__NVIC_SetPriorityGrouping+0x44>)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	60d3      	str	r3, [r2, #12]
}
 8005818:	bf00      	nop
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	e000ed00 	.word	0xe000ed00

08005828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800582c:	4b04      	ldr	r3, [pc, #16]	@ (8005840 <__NVIC_GetPriorityGrouping+0x18>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	0a1b      	lsrs	r3, r3, #8
 8005832:	f003 0307 	and.w	r3, r3, #7
}
 8005836:	4618      	mov	r0, r3
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr
 8005840:	e000ed00 	.word	0xe000ed00

08005844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	4603      	mov	r3, r0
 800584c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800584e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005852:	2b00      	cmp	r3, #0
 8005854:	db0b      	blt.n	800586e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	f003 021f 	and.w	r2, r3, #31
 800585c:	4907      	ldr	r1, [pc, #28]	@ (800587c <__NVIC_EnableIRQ+0x38>)
 800585e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005862:	095b      	lsrs	r3, r3, #5
 8005864:	2001      	movs	r0, #1
 8005866:	fa00 f202 	lsl.w	r2, r0, r2
 800586a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	e000e100 	.word	0xe000e100

08005880 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	4603      	mov	r3, r0
 8005888:	6039      	str	r1, [r7, #0]
 800588a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800588c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db0a      	blt.n	80058aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	b2da      	uxtb	r2, r3
 8005898:	490c      	ldr	r1, [pc, #48]	@ (80058cc <__NVIC_SetPriority+0x4c>)
 800589a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589e:	0112      	lsls	r2, r2, #4
 80058a0:	b2d2      	uxtb	r2, r2
 80058a2:	440b      	add	r3, r1
 80058a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058a8:	e00a      	b.n	80058c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4908      	ldr	r1, [pc, #32]	@ (80058d0 <__NVIC_SetPriority+0x50>)
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	f003 030f 	and.w	r3, r3, #15
 80058b6:	3b04      	subs	r3, #4
 80058b8:	0112      	lsls	r2, r2, #4
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	440b      	add	r3, r1
 80058be:	761a      	strb	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	e000e100 	.word	0xe000e100
 80058d0:	e000ed00 	.word	0xe000ed00

080058d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b089      	sub	sp, #36	@ 0x24
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0307 	and.w	r3, r3, #7
 80058e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f1c3 0307 	rsb	r3, r3, #7
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	bf28      	it	cs
 80058f2:	2304      	movcs	r3, #4
 80058f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3304      	adds	r3, #4
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d902      	bls.n	8005904 <NVIC_EncodePriority+0x30>
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3b03      	subs	r3, #3
 8005902:	e000      	b.n	8005906 <NVIC_EncodePriority+0x32>
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005908:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	fa02 f303 	lsl.w	r3, r2, r3
 8005912:	43da      	mvns	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	401a      	ands	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800591c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	fa01 f303 	lsl.w	r3, r1, r3
 8005926:	43d9      	mvns	r1, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800592c:	4313      	orrs	r3, r2
         );
}
 800592e:	4618      	mov	r0, r3
 8005930:	3724      	adds	r7, #36	@ 0x24
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
	...

0800593c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	3b01      	subs	r3, #1
 8005948:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800594c:	d301      	bcc.n	8005952 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800594e:	2301      	movs	r3, #1
 8005950:	e00f      	b.n	8005972 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005952:	4a0a      	ldr	r2, [pc, #40]	@ (800597c <SysTick_Config+0x40>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	3b01      	subs	r3, #1
 8005958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595a:	210f      	movs	r1, #15
 800595c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005960:	f7ff ff8e 	bl	8005880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <SysTick_Config+0x40>)
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596a:	4b04      	ldr	r3, [pc, #16]	@ (800597c <SysTick_Config+0x40>)
 800596c:	2207      	movs	r2, #7
 800596e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	e000e010 	.word	0xe000e010

08005980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b082      	sub	sp, #8
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff29 	bl	80057e0 <__NVIC_SetPriorityGrouping>
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005996:	b580      	push	{r7, lr}
 8005998:	b086      	sub	sp, #24
 800599a:	af00      	add	r7, sp, #0
 800599c:	4603      	mov	r3, r0
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059a8:	f7ff ff3e 	bl	8005828 <__NVIC_GetPriorityGrouping>
 80059ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	68b9      	ldr	r1, [r7, #8]
 80059b2:	6978      	ldr	r0, [r7, #20]
 80059b4:	f7ff ff8e 	bl	80058d4 <NVIC_EncodePriority>
 80059b8:	4602      	mov	r2, r0
 80059ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059be:	4611      	mov	r1, r2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff ff5d 	bl	8005880 <__NVIC_SetPriority>
}
 80059c6:	bf00      	nop
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80059d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7ff ff31 	bl	8005844 <__NVIC_EnableIRQ>
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b082      	sub	sp, #8
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7ff ffa2 	bl	800593c <SysTick_Config>
 80059f8:	4603      	mov	r3, r0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005a10:	f7ff face 	bl	8004fb0 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d101      	bne.n	8005a20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e099      	b.n	8005b54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0201 	bic.w	r2, r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a40:	e00f      	b.n	8005a62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a42:	f7ff fab5 	bl	8004fb0 <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	2b05      	cmp	r3, #5
 8005a4e:	d908      	bls.n	8005a62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2203      	movs	r2, #3
 8005a5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e078      	b.n	8005b54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d1e8      	bne.n	8005a42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	4b38      	ldr	r3, [pc, #224]	@ (8005b5c <HAL_DMA_Init+0x158>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	699b      	ldr	r3, [r3, #24]
 8005aa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
 8005aac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	2b04      	cmp	r3, #4
 8005aba:	d107      	bne.n	8005acc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f023 0307 	bic.w	r3, r3, #7
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d117      	bne.n	8005b26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fa9f 	bl	800604c <DMA_CheckFifoParam>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2240      	movs	r2, #64	@ 0x40
 8005b18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005b22:	2301      	movs	r3, #1
 8005b24:	e016      	b.n	8005b54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa56 	bl	8005fe0 <DMA_CalcBaseAndBitshift>
 8005b34:	4603      	mov	r3, r0
 8005b36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	223f      	movs	r2, #63	@ 0x3f
 8005b3e:	409a      	lsls	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	f010803f 	.word	0xf010803f

08005b60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_DMA_Start_IT+0x26>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e040      	b.n	8005c08 <HAL_DMA_Start_IT+0xa8>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d12f      	bne.n	8005bfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 f9e8 	bl	8005f84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bb8:	223f      	movs	r2, #63	@ 0x3f
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0216 	orr.w	r2, r2, #22
 8005bce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0208 	orr.w	r2, r2, #8
 8005be6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0201 	orr.w	r2, r2, #1
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e005      	b.n	8005c06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005c02:	2302      	movs	r3, #2
 8005c04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b02      	cmp	r3, #2
 8005c22:	d004      	beq.n	8005c2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2280      	movs	r2, #128	@ 0x80
 8005c28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e00c      	b.n	8005c48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2205      	movs	r2, #5
 8005c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c60:	4b8e      	ldr	r3, [pc, #568]	@ (8005e9c <HAL_DMA_IRQHandler+0x248>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a8e      	ldr	r2, [pc, #568]	@ (8005ea0 <HAL_DMA_IRQHandler+0x24c>)
 8005c66:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6a:	0a9b      	lsrs	r3, r3, #10
 8005c6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c7e:	2208      	movs	r2, #8
 8005c80:	409a      	lsls	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d01a      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d013      	beq.n	8005cc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0204 	bic.w	r2, r2, #4
 8005ca6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cac:	2208      	movs	r2, #8
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	f043 0201 	orr.w	r2, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d012      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	409a      	lsls	r2, r3
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cee:	f043 0202 	orr.w	r2, r3, #2
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	2204      	movs	r2, #4
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d012      	beq.n	8005d2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0302 	and.w	r3, r3, #2
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d18:	2204      	movs	r2, #4
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d24:	f043 0204 	orr.w	r2, r3, #4
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	2210      	movs	r2, #16
 8005d32:	409a      	lsls	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4013      	ands	r3, r2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d043      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d03c      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4e:	2210      	movs	r2, #16
 8005d50:	409a      	lsls	r2, r3
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d018      	beq.n	8005d96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d108      	bne.n	8005d84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d024      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	e01f      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d01b      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	4798      	blx	r3
 8005d94:	e016      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d107      	bne.n	8005db4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0208 	bic.w	r2, r2, #8
 8005db2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc8:	2220      	movs	r2, #32
 8005dca:	409a      	lsls	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 808f 	beq.w	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0310 	and.w	r3, r3, #16
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 8087 	beq.w	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dea:	2220      	movs	r2, #32
 8005dec:	409a      	lsls	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d136      	bne.n	8005e6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0216 	bic.w	r2, r2, #22
 8005e0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	695a      	ldr	r2, [r3, #20]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_DMA_IRQHandler+0x1da>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d007      	beq.n	8005e3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f022 0208 	bic.w	r2, r2, #8
 8005e3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e42:	223f      	movs	r2, #63	@ 0x3f
 8005e44:	409a      	lsls	r2, r3
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d07e      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
        }
        return;
 8005e6a:	e079      	b.n	8005f60 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d01d      	beq.n	8005eb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10d      	bne.n	8005ea4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d031      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	e02c      	b.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
 8005e9a:	bf00      	nop
 8005e9c:	20000018 	.word	0x20000018
 8005ea0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d023      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	4798      	blx	r3
 8005eb4:	e01e      	b.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10f      	bne.n	8005ee4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 0210 	bic.w	r2, r2, #16
 8005ed2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d032      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d022      	beq.n	8005f4e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f022 0201 	bic.w	r2, r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	3301      	adds	r3, #1
 8005f24:	60bb      	str	r3, [r7, #8]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d307      	bcc.n	8005f3c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1f2      	bne.n	8005f20 <HAL_DMA_IRQHandler+0x2cc>
 8005f3a:	e000      	b.n	8005f3e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005f3c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d005      	beq.n	8005f62 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
 8005f5e:	e000      	b.n	8005f62 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005f60:	bf00      	nop
    }
  }
}
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f76:	b2db      	uxtb	r3, r3
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	2b40      	cmp	r3, #64	@ 0x40
 8005fb0:	d108      	bne.n	8005fc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005fc2:	e007      	b.n	8005fd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68ba      	ldr	r2, [r7, #8]
 8005fca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	60da      	str	r2, [r3, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	3b10      	subs	r3, #16
 8005ff0:	4a14      	ldr	r2, [pc, #80]	@ (8006044 <DMA_CalcBaseAndBitshift+0x64>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005ffa:	4a13      	ldr	r2, [pc, #76]	@ (8006048 <DMA_CalcBaseAndBitshift+0x68>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2b03      	cmp	r3, #3
 800600c:	d909      	bls.n	8006022 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	659a      	str	r2, [r3, #88]	@ 0x58
 8006020:	e007      	b.n	8006032 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006036:	4618      	mov	r0, r3
 8006038:	3714      	adds	r7, #20
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop
 8006044:	aaaaaaab 	.word	0xaaaaaaab
 8006048:	080219cc 	.word	0x080219cc

0800604c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800605c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11f      	bne.n	80060a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b03      	cmp	r3, #3
 800606a:	d856      	bhi.n	800611a <DMA_CheckFifoParam+0xce>
 800606c:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <DMA_CheckFifoParam+0x28>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	08006085 	.word	0x08006085
 8006078:	08006097 	.word	0x08006097
 800607c:	08006085 	.word	0x08006085
 8006080:	0800611b 	.word	0x0800611b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006088:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d046      	beq.n	800611e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006094:	e043      	b.n	800611e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800609e:	d140      	bne.n	8006122 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060a4:	e03d      	b.n	8006122 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060ae:	d121      	bne.n	80060f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d837      	bhi.n	8006126 <DMA_CheckFifoParam+0xda>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <DMA_CheckFifoParam+0x70>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060d3 	.word	0x080060d3
 80060c4:	080060cd 	.word	0x080060cd
 80060c8:	080060e5 	.word	0x080060e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	73fb      	strb	r3, [r7, #15]
      break;
 80060d0:	e030      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d025      	beq.n	800612a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060e2:	e022      	b.n	800612a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80060ec:	d11f      	bne.n	800612e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80060f2:	e01c      	b.n	800612e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d903      	bls.n	8006102 <DMA_CheckFifoParam+0xb6>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d003      	beq.n	8006108 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006100:	e018      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	73fb      	strb	r3, [r7, #15]
      break;
 8006106:	e015      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00e      	beq.n	8006132 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
      break;
 8006118:	e00b      	b.n	8006132 <DMA_CheckFifoParam+0xe6>
      break;
 800611a:	bf00      	nop
 800611c:	e00a      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 800611e:	bf00      	nop
 8006120:	e008      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 8006122:	bf00      	nop
 8006124:	e006      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;   
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <DMA_CheckFifoParam+0xe8>
      break;
 8006132:	bf00      	nop
    }
  } 
  
  return status; 
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop

08006144 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006144:	b480      	push	{r7}
 8006146:	b089      	sub	sp, #36	@ 0x24
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006156:	2300      	movs	r3, #0
 8006158:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
 800615e:	e159      	b.n	8006414 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006160:	2201      	movs	r2, #1
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4013      	ands	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006174:	693a      	ldr	r2, [r7, #16]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	429a      	cmp	r2, r3
 800617a:	f040 8148 	bne.w	800640e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b01      	cmp	r3, #1
 8006188:	d005      	beq.n	8006196 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006192:	2b02      	cmp	r3, #2
 8006194:	d130      	bne.n	80061f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	2203      	movs	r2, #3
 80061a2:	fa02 f303 	lsl.w	r3, r2, r3
 80061a6:	43db      	mvns	r3, r3
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	4013      	ands	r3, r2
 80061ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	69ba      	ldr	r2, [r7, #24]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061cc:	2201      	movs	r2, #1
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4013      	ands	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	091b      	lsrs	r3, r3, #4
 80061e2:	f003 0201 	and.w	r2, r3, #1
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b03      	cmp	r3, #3
 8006202:	d017      	beq.n	8006234 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	2203      	movs	r2, #3
 8006210:	fa02 f303 	lsl.w	r3, r2, r3
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689a      	ldr	r2, [r3, #8]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4313      	orrs	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69ba      	ldr	r2, [r7, #24]
 8006232:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	f003 0303 	and.w	r3, r3, #3
 800623c:	2b02      	cmp	r3, #2
 800623e:	d123      	bne.n	8006288 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	08da      	lsrs	r2, r3, #3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3208      	adds	r2, #8
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	220f      	movs	r2, #15
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69ba      	ldr	r2, [r7, #24]
 8006260:	4013      	ands	r3, r2
 8006262:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fa02 f303 	lsl.w	r3, r2, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	08da      	lsrs	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3208      	adds	r2, #8
 8006282:	69b9      	ldr	r1, [r7, #24]
 8006284:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	005b      	lsls	r3, r3, #1
 8006292:	2203      	movs	r2, #3
 8006294:	fa02 f303 	lsl.w	r3, r2, r3
 8006298:	43db      	mvns	r3, r3
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	4013      	ands	r3, r2
 800629e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f003 0203 	and.w	r2, r3, #3
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	005b      	lsls	r3, r3, #1
 80062ac:	fa02 f303 	lsl.w	r3, r2, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 80a2 	beq.w	800640e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
 80062ce:	4b57      	ldr	r3, [pc, #348]	@ (800642c <HAL_GPIO_Init+0x2e8>)
 80062d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d2:	4a56      	ldr	r2, [pc, #344]	@ (800642c <HAL_GPIO_Init+0x2e8>)
 80062d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80062d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80062da:	4b54      	ldr	r3, [pc, #336]	@ (800642c <HAL_GPIO_Init+0x2e8>)
 80062dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062e6:	4a52      	ldr	r2, [pc, #328]	@ (8006430 <HAL_GPIO_Init+0x2ec>)
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	089b      	lsrs	r3, r3, #2
 80062ec:	3302      	adds	r3, #2
 80062ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0303 	and.w	r3, r3, #3
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	220f      	movs	r2, #15
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	43db      	mvns	r3, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	4013      	ands	r3, r2
 8006308:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a49      	ldr	r2, [pc, #292]	@ (8006434 <HAL_GPIO_Init+0x2f0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d019      	beq.n	8006346 <HAL_GPIO_Init+0x202>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a48      	ldr	r2, [pc, #288]	@ (8006438 <HAL_GPIO_Init+0x2f4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_GPIO_Init+0x1fe>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a47      	ldr	r2, [pc, #284]	@ (800643c <HAL_GPIO_Init+0x2f8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00d      	beq.n	800633e <HAL_GPIO_Init+0x1fa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a46      	ldr	r2, [pc, #280]	@ (8006440 <HAL_GPIO_Init+0x2fc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <HAL_GPIO_Init+0x1f6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a45      	ldr	r2, [pc, #276]	@ (8006444 <HAL_GPIO_Init+0x300>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_GPIO_Init+0x1f2>
 8006332:	2304      	movs	r3, #4
 8006334:	e008      	b.n	8006348 <HAL_GPIO_Init+0x204>
 8006336:	2307      	movs	r3, #7
 8006338:	e006      	b.n	8006348 <HAL_GPIO_Init+0x204>
 800633a:	2303      	movs	r3, #3
 800633c:	e004      	b.n	8006348 <HAL_GPIO_Init+0x204>
 800633e:	2302      	movs	r3, #2
 8006340:	e002      	b.n	8006348 <HAL_GPIO_Init+0x204>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <HAL_GPIO_Init+0x204>
 8006346:	2300      	movs	r3, #0
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	f002 0203 	and.w	r2, r2, #3
 800634e:	0092      	lsls	r2, r2, #2
 8006350:	4093      	lsls	r3, r2
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006358:	4935      	ldr	r1, [pc, #212]	@ (8006430 <HAL_GPIO_Init+0x2ec>)
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	089b      	lsrs	r3, r3, #2
 800635e:	3302      	adds	r3, #2
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006366:	4b38      	ldr	r3, [pc, #224]	@ (8006448 <HAL_GPIO_Init+0x304>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	43db      	mvns	r3, r3
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4013      	ands	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d003      	beq.n	800638a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800638a:	4a2f      	ldr	r2, [pc, #188]	@ (8006448 <HAL_GPIO_Init+0x304>)
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006390:	4b2d      	ldr	r3, [pc, #180]	@ (8006448 <HAL_GPIO_Init+0x304>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	43db      	mvns	r3, r3
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	4013      	ands	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063b4:	4a24      	ldr	r2, [pc, #144]	@ (8006448 <HAL_GPIO_Init+0x304>)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80063ba:	4b23      	ldr	r3, [pc, #140]	@ (8006448 <HAL_GPIO_Init+0x304>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	43db      	mvns	r3, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4013      	ands	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	4313      	orrs	r3, r2
 80063dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063de:	4a1a      	ldr	r2, [pc, #104]	@ (8006448 <HAL_GPIO_Init+0x304>)
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063e4:	4b18      	ldr	r3, [pc, #96]	@ (8006448 <HAL_GPIO_Init+0x304>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	43db      	mvns	r3, r3
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	4013      	ands	r3, r2
 80063f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006400:	69ba      	ldr	r2, [r7, #24]
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006408:	4a0f      	ldr	r2, [pc, #60]	@ (8006448 <HAL_GPIO_Init+0x304>)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3301      	adds	r3, #1
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b0f      	cmp	r3, #15
 8006418:	f67f aea2 	bls.w	8006160 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800641c:	bf00      	nop
 800641e:	bf00      	nop
 8006420:	3724      	adds	r7, #36	@ 0x24
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40023800 	.word	0x40023800
 8006430:	40013800 	.word	0x40013800
 8006434:	40020000 	.word	0x40020000
 8006438:	40020400 	.word	0x40020400
 800643c:	40020800 	.word	0x40020800
 8006440:	40020c00 	.word	0x40020c00
 8006444:	40021000 	.word	0x40021000
 8006448:	40013c00 	.word	0x40013c00

0800644c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	887b      	ldrh	r3, [r7, #2]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006464:	2301      	movs	r3, #1
 8006466:	73fb      	strb	r3, [r7, #15]
 8006468:	e001      	b.n	800646e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800646a:	2300      	movs	r3, #0
 800646c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	807b      	strh	r3, [r7, #2]
 8006488:	4613      	mov	r3, r2
 800648a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800648c:	787b      	ldrb	r3, [r7, #1]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006492:	887a      	ldrh	r2, [r7, #2]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006498:	e003      	b.n	80064a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800649a:	887b      	ldrh	r3, [r7, #2]
 800649c:	041a      	lsls	r2, r3, #16
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	619a      	str	r2, [r3, #24]
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr
	...

080064b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80064ba:	4b08      	ldr	r3, [pc, #32]	@ (80064dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d006      	beq.n	80064d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80064c6:	4a05      	ldr	r2, [pc, #20]	@ (80064dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80064cc:	88fb      	ldrh	r3, [r7, #6]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fb f8de 	bl	8001690 <HAL_GPIO_EXTI_Callback>
  }
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	40013c00 	.word	0x40013c00

080064e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e12b      	b.n	800674a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb fcd6 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2224      	movs	r2, #36	@ 0x24
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f022 0201 	bic.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006532:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006542:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006544:	f002 fec0 	bl	80092c8 <HAL_RCC_GetPCLK1Freq>
 8006548:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	4a81      	ldr	r2, [pc, #516]	@ (8006754 <HAL_I2C_Init+0x274>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d807      	bhi.n	8006564 <HAL_I2C_Init+0x84>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4a80      	ldr	r2, [pc, #512]	@ (8006758 <HAL_I2C_Init+0x278>)
 8006558:	4293      	cmp	r3, r2
 800655a:	bf94      	ite	ls
 800655c:	2301      	movls	r3, #1
 800655e:	2300      	movhi	r3, #0
 8006560:	b2db      	uxtb	r3, r3
 8006562:	e006      	b.n	8006572 <HAL_I2C_Init+0x92>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a7d      	ldr	r2, [pc, #500]	@ (800675c <HAL_I2C_Init+0x27c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	bf94      	ite	ls
 800656c:	2301      	movls	r3, #1
 800656e:	2300      	movhi	r3, #0
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e0e7      	b.n	800674a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4a78      	ldr	r2, [pc, #480]	@ (8006760 <HAL_I2C_Init+0x280>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	0c9b      	lsrs	r3, r3, #18
 8006584:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	430a      	orrs	r2, r1
 8006598:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	4a6a      	ldr	r2, [pc, #424]	@ (8006754 <HAL_I2C_Init+0x274>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d802      	bhi.n	80065b4 <HAL_I2C_Init+0xd4>
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3301      	adds	r3, #1
 80065b2:	e009      	b.n	80065c8 <HAL_I2C_Init+0xe8>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80065ba:	fb02 f303 	mul.w	r3, r2, r3
 80065be:	4a69      	ldr	r2, [pc, #420]	@ (8006764 <HAL_I2C_Init+0x284>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	099b      	lsrs	r3, r3, #6
 80065c6:	3301      	adds	r3, #1
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6812      	ldr	r2, [r2, #0]
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80065da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	495c      	ldr	r1, [pc, #368]	@ (8006754 <HAL_I2C_Init+0x274>)
 80065e4:	428b      	cmp	r3, r1
 80065e6:	d819      	bhi.n	800661c <HAL_I2C_Init+0x13c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1e59      	subs	r1, r3, #1
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80065f6:	1c59      	adds	r1, r3, #1
 80065f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065fc:	400b      	ands	r3, r1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_I2C_Init+0x138>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	1e59      	subs	r1, r3, #1
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006610:	3301      	adds	r3, #1
 8006612:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006616:	e051      	b.n	80066bc <HAL_I2C_Init+0x1dc>
 8006618:	2304      	movs	r3, #4
 800661a:	e04f      	b.n	80066bc <HAL_I2C_Init+0x1dc>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d111      	bne.n	8006648 <HAL_I2C_Init+0x168>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	1e58      	subs	r0, r3, #1
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6859      	ldr	r1, [r3, #4]
 800662c:	460b      	mov	r3, r1
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	440b      	add	r3, r1
 8006632:	fbb0 f3f3 	udiv	r3, r0, r3
 8006636:	3301      	adds	r3, #1
 8006638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e012      	b.n	800666e <HAL_I2C_Init+0x18e>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	1e58      	subs	r0, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6859      	ldr	r1, [r3, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	440b      	add	r3, r1
 8006656:	0099      	lsls	r1, r3, #2
 8006658:	440b      	add	r3, r1
 800665a:	fbb0 f3f3 	udiv	r3, r0, r3
 800665e:	3301      	adds	r3, #1
 8006660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006664:	2b00      	cmp	r3, #0
 8006666:	bf0c      	ite	eq
 8006668:	2301      	moveq	r3, #1
 800666a:	2300      	movne	r3, #0
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <HAL_I2C_Init+0x196>
 8006672:	2301      	movs	r3, #1
 8006674:	e022      	b.n	80066bc <HAL_I2C_Init+0x1dc>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10e      	bne.n	800669c <HAL_I2C_Init+0x1bc>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	1e58      	subs	r0, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6859      	ldr	r1, [r3, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	440b      	add	r3, r1
 800668c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006690:	3301      	adds	r3, #1
 8006692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800669a:	e00f      	b.n	80066bc <HAL_I2C_Init+0x1dc>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1e58      	subs	r0, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6859      	ldr	r1, [r3, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	0099      	lsls	r1, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b2:	3301      	adds	r3, #1
 80066b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	6809      	ldr	r1, [r1, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69da      	ldr	r2, [r3, #28]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80066ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	6911      	ldr	r1, [r2, #16]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	68d2      	ldr	r2, [r2, #12]
 80066f6:	4311      	orrs	r1, r2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	430b      	orrs	r3, r1
 80066fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	695a      	ldr	r2, [r3, #20]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	431a      	orrs	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0201 	orr.w	r2, r2, #1
 800672a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	000186a0 	.word	0x000186a0
 8006758:	001e847f 	.word	0x001e847f
 800675c:	003d08ff 	.word	0x003d08ff
 8006760:	431bde83 	.word	0x431bde83
 8006764:	10624dd3 	.word	0x10624dd3

08006768 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800677a:	2b80      	cmp	r3, #128	@ 0x80
 800677c:	d103      	bne.n	8006786 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]
  }
}
 8006786:	bf00      	nop
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
	...

08006794 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	461a      	mov	r2, r3
 80067a2:	4603      	mov	r3, r0
 80067a4:	817b      	strh	r3, [r7, #10]
 80067a6:	460b      	mov	r3, r1
 80067a8:	813b      	strh	r3, [r7, #8]
 80067aa:	4613      	mov	r3, r2
 80067ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80067ae:	f7fe fbff 	bl	8004fb0 <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b20      	cmp	r3, #32
 80067be:	f040 80d9 	bne.w	8006974 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	2319      	movs	r3, #25
 80067c8:	2201      	movs	r2, #1
 80067ca:	496d      	ldr	r1, [pc, #436]	@ (8006980 <HAL_I2C_Mem_Write+0x1ec>)
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f001 ff25 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
 80067da:	e0cc      	b.n	8006976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_I2C_Mem_Write+0x56>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e0c5      	b.n	8006976 <HAL_I2C_Mem_Write+0x1e2>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d007      	beq.n	8006810 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800681e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2221      	movs	r2, #33	@ 0x21
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2240      	movs	r2, #64	@ 0x40
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2200      	movs	r2, #0
 8006834:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6a3a      	ldr	r2, [r7, #32]
 800683a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006840:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4a4d      	ldr	r2, [pc, #308]	@ (8006984 <HAL_I2C_Mem_Write+0x1f0>)
 8006850:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006852:	88f8      	ldrh	r0, [r7, #6]
 8006854:	893a      	ldrh	r2, [r7, #8]
 8006856:	8979      	ldrh	r1, [r7, #10]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	4603      	mov	r3, r0
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f001 fd9c 	bl	80083a0 <I2C_RequestMemoryWrite>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d052      	beq.n	8006914 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e081      	b.n	8006976 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f001 ffea 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d00d      	beq.n	800689e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006886:	2b04      	cmp	r3, #4
 8006888:	d107      	bne.n	800689a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006898:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e06b      	b.n	8006976 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068a2:	781a      	ldrb	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068b8:	3b01      	subs	r3, #1
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695b      	ldr	r3, [r3, #20]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d11b      	bne.n	8006914 <HAL_I2C_Mem_Write+0x180>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d017      	beq.n	8006914 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e8:	781a      	ldrb	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1aa      	bne.n	8006872 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f001 ffdd 	bl	80088e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00d      	beq.n	8006948 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006930:	2b04      	cmp	r3, #4
 8006932:	d107      	bne.n	8006944 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006942:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e016      	b.n	8006976 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2220      	movs	r2, #32
 800695c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006970:	2300      	movs	r3, #0
 8006972:	e000      	b.n	8006976 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006974:	2302      	movs	r3, #2
  }
}
 8006976:	4618      	mov	r0, r3
 8006978:	3718      	adds	r7, #24
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	00100002 	.word	0x00100002
 8006984:	ffff0000 	.word	0xffff0000

08006988 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08a      	sub	sp, #40	@ 0x28
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	603b      	str	r3, [r7, #0]
 8006994:	460b      	mov	r3, r1
 8006996:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8006998:	f7fe fb0a 	bl	8004fb0 <HAL_GetTick>
 800699c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	f040 8111 	bne.w	8006bd2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2319      	movs	r3, #25
 80069b6:	2201      	movs	r2, #1
 80069b8:	4988      	ldr	r1, [pc, #544]	@ (8006bdc <HAL_I2C_IsDeviceReady+0x254>)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f001 fe2e 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
 80069c8:	e104      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <HAL_I2C_IsDeviceReady+0x50>
 80069d4:	2302      	movs	r3, #2
 80069d6:	e0fd      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d007      	beq.n	80069fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f042 0201 	orr.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2224      	movs	r2, #36	@ 0x24
 8006a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a70      	ldr	r2, [pc, #448]	@ (8006be0 <HAL_I2C_IsDeviceReady+0x258>)
 8006a20:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a30:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f001 fdec 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 8006a44:	4603      	mov	r3, r0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00d      	beq.n	8006a66 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a58:	d103      	bne.n	8006a62 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a60:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8006a62:	2303      	movs	r3, #3
 8006a64:	e0b6      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006a74:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8006a76:	f7fe fa9b 	bl	8004fb0 <HAL_GetTick>
 8006a7a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	bf0c      	ite	eq
 8006a8a:	2301      	moveq	r3, #1
 8006a8c:	2300      	movne	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aa0:	bf0c      	ite	eq
 8006aa2:	2301      	moveq	r3, #1
 8006aa4:	2300      	movne	r3, #0
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006aaa:	e025      	b.n	8006af8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006aac:	f7fe fa80 	bl	8004fb0 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d302      	bcc.n	8006ac2 <HAL_I2C_IsDeviceReady+0x13a>
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	22a0      	movs	r2, #160	@ 0xa0
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	bf0c      	ite	eq
 8006ad8:	2301      	moveq	r3, #1
 8006ada:	2300      	movne	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006aee:	bf0c      	ite	eq
 8006af0:	2301      	moveq	r3, #1
 8006af2:	2300      	movne	r3, #0
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b02:	d005      	beq.n	8006b10 <HAL_I2C_IsDeviceReady+0x188>
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <HAL_I2C_IsDeviceReady+0x188>
 8006b0a:	7dbb      	ldrb	r3, [r7, #22]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d0cd      	beq.n	8006aac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d129      	bne.n	8006b7a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b34:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	2319      	movs	r3, #25
 8006b52:	2201      	movs	r2, #1
 8006b54:	4921      	ldr	r1, [pc, #132]	@ (8006bdc <HAL_I2C_IsDeviceReady+0x254>)
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f001 fd60 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e036      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	e02c      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b88:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b92:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	9300      	str	r3, [sp, #0]
 8006b98:	2319      	movs	r3, #25
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	490f      	ldr	r1, [pc, #60]	@ (8006bdc <HAL_I2C_IsDeviceReady+0x254>)
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f001 fd3c 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e012      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	f4ff af32 	bcc.w	8006a22 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e000      	b.n	8006bd4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8006bd2:	2302      	movs	r3, #2
  }
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3720      	adds	r7, #32
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	00100002 	.word	0x00100002
 8006be0:	ffff0000 	.word	0xffff0000

08006be4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bfc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2b10      	cmp	r3, #16
 8006c12:	d003      	beq.n	8006c1c <HAL_I2C_EV_IRQHandler+0x38>
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b40      	cmp	r3, #64	@ 0x40
 8006c18:	f040 80b1 	bne.w	8006d7e <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	695b      	ldr	r3, [r3, #20]
 8006c2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d10d      	bne.n	8006c52 <HAL_I2C_EV_IRQHandler+0x6e>
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006c3c:	d003      	beq.n	8006c46 <HAL_I2C_EV_IRQHandler+0x62>
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006c44:	d101      	bne.n	8006c4a <HAL_I2C_EV_IRQHandler+0x66>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <HAL_I2C_EV_IRQHandler+0x68>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	f000 8114 	beq.w	8006e7a <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0301 	and.w	r3, r3, #1
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00b      	beq.n	8006c74 <HAL_I2C_EV_IRQHandler+0x90>
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d006      	beq.n	8006c74 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f001 fee3 	bl	8008a32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fd7a 	bl	8007766 <I2C_Master_SB>
 8006c72:	e083      	b.n	8006d7c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_I2C_EV_IRQHandler+0xac>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fdf2 	bl	8007872 <I2C_Master_ADD10>
 8006c8e:	e075      	b.n	8006d7c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <HAL_I2C_EV_IRQHandler+0xc8>
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fe0e 	bl	80078c6 <I2C_Master_ADDR>
 8006caa:	e067      	b.n	8006d7c <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	f003 0304 	and.w	r3, r3, #4
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d036      	beq.n	8006d24 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cc4:	f000 80db 	beq.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <HAL_I2C_EV_IRQHandler+0x10a>
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d008      	beq.n	8006cee <HAL_I2C_EV_IRQHandler+0x10a>
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d103      	bne.n	8006cee <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f9d6 	bl	8007098 <I2C_MasterTransmit_TXE>
 8006cec:	e046      	b.n	8006d7c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80c2 	beq.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80bc 	beq.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006d06:	7bbb      	ldrb	r3, [r7, #14]
 8006d08:	2b21      	cmp	r3, #33	@ 0x21
 8006d0a:	d103      	bne.n	8006d14 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 fa5f 	bl	80071d0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d12:	e0b4      	b.n	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b40      	cmp	r3, #64	@ 0x40
 8006d18:	f040 80b1 	bne.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 facd 	bl	80072bc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d22:	e0ac      	b.n	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d32:	f000 80a4 	beq.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00d      	beq.n	8006d5c <HAL_I2C_EV_IRQHandler+0x178>
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d008      	beq.n	8006d5c <HAL_I2C_EV_IRQHandler+0x178>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 fb49 	bl	80073ec <I2C_MasterReceive_RXNE>
 8006d5a:	e00f      	b.n	8006d7c <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	f003 0304 	and.w	r3, r3, #4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 808b 	beq.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8085 	beq.w	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fc01 	bl	800757c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006d7a:	e080      	b.n	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
 8006d7c:	e07f      	b.n	8006e7e <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	e007      	b.n	8006da0 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d011      	beq.n	8006dce <HAL_I2C_EV_IRQHandler+0x1ea>
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d00c      	beq.n	8006dce <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006dc4:	69b9      	ldr	r1, [r7, #24]
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 ffcc 	bl	8007d64 <I2C_Slave_ADDR>
 8006dcc:	e05a      	b.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f003 0310 	and.w	r3, r3, #16
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d008      	beq.n	8006dea <HAL_I2C_EV_IRQHandler+0x206>
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f806 	bl	8007df4 <I2C_Slave_STOPF>
 8006de8:	e04c      	b.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b21      	cmp	r3, #33	@ 0x21
 8006dee:	d002      	beq.n	8006df6 <HAL_I2C_EV_IRQHandler+0x212>
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b29      	cmp	r3, #41	@ 0x29
 8006df4:	d120      	bne.n	8006e38 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00d      	beq.n	8006e1c <HAL_I2C_EV_IRQHandler+0x238>
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d008      	beq.n	8006e1c <HAL_I2C_EV_IRQHandler+0x238>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fee7 	bl	8007be8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e1a:	e032      	b.n	8006e82 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	f003 0304 	and.w	r3, r3, #4
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d02d      	beq.n	8006e82 <HAL_I2C_EV_IRQHandler+0x29e>
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d028      	beq.n	8006e82 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 ff16 	bl	8007c62 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e36:	e024      	b.n	8006e82 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00d      	beq.n	8006e5e <HAL_I2C_EV_IRQHandler+0x27a>
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <HAL_I2C_EV_IRQHandler+0x27a>
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 ff24 	bl	8007ca4 <I2C_SlaveReceive_RXNE>
 8006e5c:	e012      	b.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	f003 0304 	and.w	r3, r3, #4
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00d      	beq.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 ff54 	bl	8007d20 <I2C_SlaveReceive_BTF>
 8006e78:	e004      	b.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8006e7a:	bf00      	nop
 8006e7c:	e002      	b.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e7e:	bf00      	nop
 8006e80:	e000      	b.n	8006e84 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e82:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8006e84:	3720      	adds	r7, #32
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b08a      	sub	sp, #40	@ 0x28
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eac:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00d      	beq.n	8006ed4 <HAL_I2C_ER_IRQHandler+0x4a>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d008      	beq.n	8006ed4 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec4:	f043 0301 	orr.w	r3, r3, #1
 8006ec8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006ed2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00d      	beq.n	8006efa <HAL_I2C_ER_IRQHandler+0x70>
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eea:	f043 0302 	orr.w	r3, r3, #2
 8006eee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8006ef8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d03e      	beq.n	8006f82 <HAL_I2C_ER_IRQHandler+0xf8>
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d039      	beq.n	8006f82 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8006f0e:	7efb      	ldrb	r3, [r7, #27]
 8006f10:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f20:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f26:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006f28:	7ebb      	ldrb	r3, [r7, #26]
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	d112      	bne.n	8006f54 <HAL_I2C_ER_IRQHandler+0xca>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10f      	bne.n	8006f54 <HAL_I2C_ER_IRQHandler+0xca>
 8006f34:	7cfb      	ldrb	r3, [r7, #19]
 8006f36:	2b21      	cmp	r3, #33	@ 0x21
 8006f38:	d008      	beq.n	8006f4c <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006f3a:	7cfb      	ldrb	r3, [r7, #19]
 8006f3c:	2b29      	cmp	r3, #41	@ 0x29
 8006f3e:	d005      	beq.n	8006f4c <HAL_I2C_ER_IRQHandler+0xc2>
 8006f40:	7cfb      	ldrb	r3, [r7, #19]
 8006f42:	2b28      	cmp	r3, #40	@ 0x28
 8006f44:	d106      	bne.n	8006f54 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b21      	cmp	r3, #33	@ 0x21
 8006f4a:	d103      	bne.n	8006f54 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f001 f881 	bl	8008054 <I2C_Slave_AF>
 8006f52:	e016      	b.n	8006f82 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f5c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	f043 0304 	orr.w	r3, r3, #4
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006f66:	7efb      	ldrb	r3, [r7, #27]
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d002      	beq.n	8006f72 <HAL_I2C_ER_IRQHandler+0xe8>
 8006f6c:	7efb      	ldrb	r3, [r7, #27]
 8006f6e:	2b40      	cmp	r3, #64	@ 0x40
 8006f70:	d107      	bne.n	8006f82 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f80:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00d      	beq.n	8006fa8 <HAL_I2C_ER_IRQHandler+0x11e>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	f043 0308 	orr.w	r3, r3, #8
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8006fa6:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d008      	beq.n	8006fc0 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f001 f8be 	bl	800813c <I2C_ITError>
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	3728      	adds	r7, #40	@ 0x28
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ff8:	bf00      	nop
 8006ffa:	370c      	adds	r7, #12
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
 8007024:	4613      	mov	r3, r2
 8007026:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070a6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070ae:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d150      	bne.n	8007160 <I2C_MasterTransmit_TXE+0xc8>
 80070be:	7bfb      	ldrb	r3, [r7, #15]
 80070c0:	2b21      	cmp	r3, #33	@ 0x21
 80070c2:	d14d      	bne.n	8007160 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d01d      	beq.n	8007106 <I2C_MasterTransmit_TXE+0x6e>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d01a      	beq.n	8007106 <I2C_MasterTransmit_TXE+0x6e>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80070d6:	d016      	beq.n	8007106 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80070e6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2211      	movs	r2, #17
 80070ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff ff62 	bl	8006fc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007104:	e060      	b.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007114:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007124:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b40      	cmp	r3, #64	@ 0x40
 800713e:	d107      	bne.n	8007150 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ff7d 	bl	8007048 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800714e:	e03b      	b.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f7ff ff35 	bl	8006fc8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800715e:	e033      	b.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b21      	cmp	r3, #33	@ 0x21
 8007164:	d005      	beq.n	8007172 <I2C_MasterTransmit_TXE+0xda>
 8007166:	7bbb      	ldrb	r3, [r7, #14]
 8007168:	2b40      	cmp	r3, #64	@ 0x40
 800716a:	d12d      	bne.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	2b22      	cmp	r3, #34	@ 0x22
 8007170:	d12a      	bne.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007176:	b29b      	uxth	r3, r3
 8007178:	2b00      	cmp	r3, #0
 800717a:	d108      	bne.n	800718e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685a      	ldr	r2, [r3, #4]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800718a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800718c:	e01c      	b.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b40      	cmp	r3, #64	@ 0x40
 8007198:	d103      	bne.n	80071a2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f88e 	bl	80072bc <I2C_MemoryTransmit_TXE_BTF>
}
 80071a0:	e012      	b.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a6:	781a      	ldrb	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071bc:	b29b      	uxth	r3, r3
 80071be:	3b01      	subs	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80071c6:	e7ff      	b.n	80071c8 <I2C_MasterTransmit_TXE+0x130>
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b21      	cmp	r3, #33	@ 0x21
 80071e8:	d164      	bne.n	80072b4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d012      	beq.n	800721a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f8:	781a      	ldrb	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	1c5a      	adds	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800720e:	b29b      	uxth	r3, r3
 8007210:	3b01      	subs	r3, #1
 8007212:	b29a      	uxth	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007218:	e04c      	b.n	80072b4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d01d      	beq.n	800725c <I2C_MasterTransmit_BTF+0x8c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2b20      	cmp	r3, #32
 8007224:	d01a      	beq.n	800725c <I2C_MasterTransmit_BTF+0x8c>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800722c:	d016      	beq.n	800725c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800723c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2211      	movs	r2, #17
 8007242:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff feb7 	bl	8006fc8 <HAL_I2C_MasterTxCpltCallback>
}
 800725a:	e02b      	b.n	80072b4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685a      	ldr	r2, [r3, #4]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800726a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800727a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2220      	movs	r2, #32
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b40      	cmp	r3, #64	@ 0x40
 8007294:	d107      	bne.n	80072a6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fed2 	bl	8007048 <HAL_I2C_MemTxCpltCallback>
}
 80072a4:	e006      	b.n	80072b4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7ff fe8a 	bl	8006fc8 <HAL_I2C_MasterTxCpltCallback>
}
 80072b4:	bf00      	nop
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d11d      	bne.n	8007310 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d10b      	bne.n	80072f4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ec:	1c9a      	adds	r2, r3, #2
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80072f2:	e077      	b.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	121b      	asrs	r3, r3, #8
 80072fc:	b2da      	uxtb	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800730e:	e069      	b.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007314:	2b01      	cmp	r3, #1
 8007316:	d10b      	bne.n	8007330 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800731c:	b2da      	uxtb	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800732e:	e059      	b.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007334:	2b02      	cmp	r3, #2
 8007336:	d152      	bne.n	80073de <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	2b22      	cmp	r3, #34	@ 0x22
 800733c:	d10d      	bne.n	800735a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800734c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007358:	e044      	b.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d015      	beq.n	8007390 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	2b21      	cmp	r3, #33	@ 0x21
 8007368:	d112      	bne.n	8007390 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736e:	781a      	ldrb	r2, [r3, #0]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800738e:	e029      	b.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007394:	b29b      	uxth	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d124      	bne.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b21      	cmp	r3, #33	@ 0x21
 800739e:	d121      	bne.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80073ae:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fe36 	bl	8007048 <HAL_I2C_MemTxCpltCallback>
}
 80073dc:	e002      	b.n	80073e4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff f9c2 	bl	8006768 <I2C_Flush_DR>
}
 80073e4:	bf00      	nop
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b22      	cmp	r3, #34	@ 0x22
 80073fe:	f040 80b9 	bne.w	8007574 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007406:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800740c:	b29b      	uxth	r3, r3
 800740e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	2b03      	cmp	r3, #3
 8007414:	d921      	bls.n	800745a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	691a      	ldr	r2, [r3, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b03      	cmp	r3, #3
 8007444:	f040 8096 	bne.w	8007574 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007456:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007458:	e08c      	b.n	8007574 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800745e:	2b02      	cmp	r3, #2
 8007460:	d07f      	beq.n	8007562 <I2C_MasterReceive_RXNE+0x176>
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d002      	beq.n	800746e <I2C_MasterReceive_RXNE+0x82>
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d179      	bne.n	8007562 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f001 fa7e 	bl	8008970 <I2C_WaitOnSTOPRequestThroughIT>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d14c      	bne.n	8007514 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007488:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007498:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	691a      	ldr	r2, [r3, #16]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a4:	b2d2      	uxtb	r2, r2
 80074a6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3b01      	subs	r3, #1
 80074ba:	b29a      	uxth	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2220      	movs	r2, #32
 80074c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b40      	cmp	r3, #64	@ 0x40
 80074d2:	d10a      	bne.n	80074ea <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7ff fdba 	bl	800705c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80074e8:	e044      	b.n	8007574 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2b08      	cmp	r3, #8
 80074f6:	d002      	beq.n	80074fe <I2C_MasterReceive_RXNE+0x112>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d103      	bne.n	8007506 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	631a      	str	r2, [r3, #48]	@ 0x30
 8007504:	e002      	b.n	800750c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2212      	movs	r2, #18
 800750a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7ff fd65 	bl	8006fdc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007512:	e02f      	b.n	8007574 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007522:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	691a      	ldr	r2, [r3, #16]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752e:	b2d2      	uxtb	r2, r2
 8007530:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007536:	1c5a      	adds	r2, r3, #1
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007540:	b29b      	uxth	r3, r3
 8007542:	3b01      	subs	r3, #1
 8007544:	b29a      	uxth	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff fd88 	bl	8007070 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007560:	e008      	b.n	8007574 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	685a      	ldr	r2, [r3, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007570:	605a      	str	r2, [r3, #4]
}
 8007572:	e7ff      	b.n	8007574 <I2C_MasterReceive_RXNE+0x188>
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007588:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b04      	cmp	r3, #4
 8007592:	d11b      	bne.n	80075cc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075a2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691a      	ldr	r2, [r3, #16]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	3b01      	subs	r3, #1
 80075c4:	b29a      	uxth	r2, r3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80075ca:	e0c8      	b.n	800775e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d129      	bne.n	800762a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075e4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d00a      	beq.n	8007602 <I2C_MasterReceive_BTF+0x86>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	d007      	beq.n	8007602 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007600:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800760c:	b2d2      	uxtb	r2, r2
 800760e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8007628:	e099      	b.n	800775e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800762e:	b29b      	uxth	r3, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	f040 8081 	bne.w	8007738 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d002      	beq.n	8007642 <I2C_MasterReceive_BTF+0xc6>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2b10      	cmp	r3, #16
 8007640:	d108      	bne.n	8007654 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e019      	b.n	8007688 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b04      	cmp	r3, #4
 8007658:	d002      	beq.n	8007660 <I2C_MasterReceive_BTF+0xe4>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d108      	bne.n	8007672 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	e00a      	b.n	8007688 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b10      	cmp	r3, #16
 8007676:	d007      	beq.n	8007688 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007686:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800769a:	1c5a      	adds	r2, r3, #1
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	3b01      	subs	r3, #1
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	691a      	ldr	r2, [r3, #16]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b8:	b2d2      	uxtb	r2, r2
 80076ba:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	3b01      	subs	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80076e2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	d10a      	bne.n	800770e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7ff fca8 	bl	800705c <HAL_I2C_MemRxCpltCallback>
}
 800770c:	e027      	b.n	800775e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b08      	cmp	r3, #8
 800771a:	d002      	beq.n	8007722 <I2C_MasterReceive_BTF+0x1a6>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2b20      	cmp	r3, #32
 8007720:	d103      	bne.n	800772a <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	631a      	str	r2, [r3, #48]	@ 0x30
 8007728:	e002      	b.n	8007730 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2212      	movs	r2, #18
 800772e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f7ff fc53 	bl	8006fdc <HAL_I2C_MasterRxCpltCallback>
}
 8007736:	e012      	b.n	800775e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	691a      	ldr	r2, [r3, #16]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007742:	b2d2      	uxtb	r2, r2
 8007744:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007754:	b29b      	uxth	r3, r3
 8007756:	3b01      	subs	r3, #1
 8007758:	b29a      	uxth	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800775e:	bf00      	nop
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b40      	cmp	r3, #64	@ 0x40
 8007778:	d117      	bne.n	80077aa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800777e:	2b00      	cmp	r3, #0
 8007780:	d109      	bne.n	8007796 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007786:	b2db      	uxtb	r3, r3
 8007788:	461a      	mov	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007792:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007794:	e067      	b.n	8007866 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779a:	b2db      	uxtb	r3, r3
 800779c:	f043 0301 	orr.w	r3, r3, #1
 80077a0:	b2da      	uxtb	r2, r3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	611a      	str	r2, [r3, #16]
}
 80077a8:	e05d      	b.n	8007866 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80077b2:	d133      	bne.n	800781c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b21      	cmp	r3, #33	@ 0x21
 80077be:	d109      	bne.n	80077d4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077c4:	b2db      	uxtb	r3, r3
 80077c6:	461a      	mov	r2, r3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80077d0:	611a      	str	r2, [r3, #16]
 80077d2:	e008      	b.n	80077e6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f043 0301 	orr.w	r3, r3, #1
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d004      	beq.n	80077f8 <I2C_Master_SB+0x92>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d108      	bne.n	800780a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d032      	beq.n	8007866 <I2C_Master_SB+0x100>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007806:	2b00      	cmp	r3, #0
 8007808:	d02d      	beq.n	8007866 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007818:	605a      	str	r2, [r3, #4]
}
 800781a:	e024      	b.n	8007866 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10e      	bne.n	8007842 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007828:	b29b      	uxth	r3, r3
 800782a:	11db      	asrs	r3, r3, #7
 800782c:	b2db      	uxtb	r3, r3
 800782e:	f003 0306 	and.w	r3, r3, #6
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f063 030f 	orn	r3, r3, #15
 8007838:	b2da      	uxtb	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	611a      	str	r2, [r3, #16]
}
 8007840:	e011      	b.n	8007866 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10d      	bne.n	8007866 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800784e:	b29b      	uxth	r3, r3
 8007850:	11db      	asrs	r3, r3, #7
 8007852:	b2db      	uxtb	r3, r3
 8007854:	f003 0306 	and.w	r3, r3, #6
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f063 030e 	orn	r3, r3, #14
 800785e:	b2da      	uxtb	r2, r3
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	611a      	str	r2, [r3, #16]
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800787e:	b2da      	uxtb	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800788a:	2b00      	cmp	r3, #0
 800788c:	d004      	beq.n	8007898 <I2C_Master_ADD10+0x26>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d108      	bne.n	80078aa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800789c:	2b00      	cmp	r3, #0
 800789e:	d00c      	beq.n	80078ba <I2C_Master_ADD10+0x48>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d007      	beq.n	80078ba <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	685a      	ldr	r2, [r3, #4]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078b8:	605a      	str	r2, [r3, #4]
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b091      	sub	sp, #68	@ 0x44
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80078d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b22      	cmp	r3, #34	@ 0x22
 80078ee:	f040 8169 	bne.w	8007bc4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10f      	bne.n	800791a <I2C_Master_ADDR+0x54>
 80078fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d10b      	bne.n	800791a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007902:	2300      	movs	r3, #0
 8007904:	633b      	str	r3, [r7, #48]	@ 0x30
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	633b      	str	r3, [r7, #48]	@ 0x30
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	633b      	str	r3, [r7, #48]	@ 0x30
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	e160      	b.n	8007bdc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791e:	2b00      	cmp	r3, #0
 8007920:	d11d      	bne.n	800795e <I2C_Master_ADDR+0x98>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800792a:	d118      	bne.n	800795e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800792c:	2300      	movs	r3, #0
 800792e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007950:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	651a      	str	r2, [r3, #80]	@ 0x50
 800795c:	e13e      	b.n	8007bdc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007962:	b29b      	uxth	r3, r3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d113      	bne.n	8007990 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007968:	2300      	movs	r3, #0
 800796a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	695b      	ldr	r3, [r3, #20]
 8007972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699b      	ldr	r3, [r3, #24]
 800797a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800797c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e115      	b.n	8007bbc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b01      	cmp	r3, #1
 8007998:	f040 808a 	bne.w	8007ab0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800799c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800799e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80079a2:	d137      	bne.n	8007a14 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079b2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80079be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079c2:	d113      	bne.n	80079ec <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079d2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079d4:	2300      	movs	r3, #0
 80079d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ea:	e0e7      	b.n	8007bbc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ec:	2300      	movs	r3, #0
 80079ee:	623b      	str	r3, [r7, #32]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	623b      	str	r3, [r7, #32]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	623b      	str	r3, [r7, #32]
 8007a00:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007a10:	601a      	str	r2, [r3, #0]
 8007a12:	e0d3      	b.n	8007bbc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a16:	2b08      	cmp	r3, #8
 8007a18:	d02e      	beq.n	8007a78 <I2C_Master_ADDR+0x1b2>
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d02b      	beq.n	8007a78 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a22:	2b12      	cmp	r3, #18
 8007a24:	d102      	bne.n	8007a2c <I2C_Master_ADDR+0x166>
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d125      	bne.n	8007a78 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	2b04      	cmp	r3, #4
 8007a30:	d00e      	beq.n	8007a50 <I2C_Master_ADDR+0x18a>
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d00b      	beq.n	8007a50 <I2C_Master_ADDR+0x18a>
 8007a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d008      	beq.n	8007a50 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a4c:	601a      	str	r2, [r3, #0]
 8007a4e:	e007      	b.n	8007a60 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007a5e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a60:	2300      	movs	r3, #0
 8007a62:	61fb      	str	r3, [r7, #28]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	e0a1      	b.n	8007bbc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a86:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a88:	2300      	movs	r3, #0
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	61bb      	str	r3, [r7, #24]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	61bb      	str	r3, [r7, #24]
 8007a9c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007aac:	601a      	str	r2, [r3, #0]
 8007aae:	e085      	b.n	8007bbc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d14d      	bne.n	8007b56 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d016      	beq.n	8007aee <I2C_Master_ADDR+0x228>
 8007ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d013      	beq.n	8007aee <I2C_Master_ADDR+0x228>
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ac8:	2b10      	cmp	r3, #16
 8007aca:	d010      	beq.n	8007aee <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ada:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	e007      	b.n	8007afe <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007afc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b0c:	d117      	bne.n	8007b3e <I2C_Master_ADDR+0x278>
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b14:	d00b      	beq.n	8007b2e <I2C_Master_ADDR+0x268>
 8007b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d008      	beq.n	8007b2e <I2C_Master_ADDR+0x268>
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b1e:	2b08      	cmp	r3, #8
 8007b20:	d005      	beq.n	8007b2e <I2C_Master_ADDR+0x268>
 8007b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b24:	2b10      	cmp	r3, #16
 8007b26:	d002      	beq.n	8007b2e <I2C_Master_ADDR+0x268>
 8007b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d107      	bne.n	8007b3e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b3c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b3e:	2300      	movs	r3, #0
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	617b      	str	r3, [r7, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	617b      	str	r3, [r7, #20]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	e032      	b.n	8007bbc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007b64:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b74:	d117      	bne.n	8007ba6 <I2C_Master_ADDR+0x2e0>
 8007b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b7c:	d00b      	beq.n	8007b96 <I2C_Master_ADDR+0x2d0>
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d008      	beq.n	8007b96 <I2C_Master_ADDR+0x2d0>
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	2b08      	cmp	r3, #8
 8007b88:	d005      	beq.n	8007b96 <I2C_Master_ADDR+0x2d0>
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b8c:	2b10      	cmp	r3, #16
 8007b8e:	d002      	beq.n	8007b96 <I2C_Master_ADDR+0x2d0>
 8007b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	d107      	bne.n	8007ba6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007ba4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007bc2:	e00b      	b.n	8007bdc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	60fb      	str	r3, [r7, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
}
 8007bda:	e7ff      	b.n	8007bdc <I2C_Master_ADDR+0x316>
 8007bdc:	bf00      	nop
 8007bde:	3744      	adds	r7, #68	@ 0x44
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007bf6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d02b      	beq.n	8007c5a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c12:	1c5a      	adds	r2, r3, #1
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d114      	bne.n	8007c5a <I2C_SlaveTransmit_TXE+0x72>
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b29      	cmp	r3, #41	@ 0x29
 8007c34:	d111      	bne.n	8007c5a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c44:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2221      	movs	r2, #33	@ 0x21
 8007c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2228      	movs	r2, #40	@ 0x28
 8007c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f7ff f9cb 	bl	8006ff0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007c5a:	bf00      	nop
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007c62:	b480      	push	{r7}
 8007c64:	b083      	sub	sp, #12
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d011      	beq.n	8007c98 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c78:	781a      	ldrb	r2, [r3, #0]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	1c5a      	adds	r2, r3, #1
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	3b01      	subs	r3, #1
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d02c      	beq.n	8007d18 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d114      	bne.n	8007d18 <I2C_SlaveReceive_RXNE+0x74>
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cf2:	d111      	bne.n	8007d18 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d02:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2222      	movs	r2, #34	@ 0x22
 8007d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2228      	movs	r2, #40	@ 0x28
 8007d0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7ff f976 	bl	8007004 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007d18:	bf00      	nop
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d012      	beq.n	8007d58 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3c:	b2d2      	uxtb	r2, r2
 8007d3e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d44:	1c5a      	adds	r2, r3, #1
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d7e:	2b28      	cmp	r3, #40	@ 0x28
 8007d80:	d125      	bne.n	8007dce <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d90:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d103      	bne.n	8007db2 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	81bb      	strh	r3, [r7, #12]
 8007db0:	e002      	b.n	8007db8 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007dc0:	89ba      	ldrh	r2, [r7, #12]
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7ff f926 	bl	8007018 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007dcc:	e00e      	b.n	8007dec <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dce:	2300      	movs	r3, #0
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	60bb      	str	r3, [r7, #8]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8007dec:	bf00      	nop
 8007dee:	3710      	adds	r7, #16
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e02:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007e12:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007e14:	2300      	movs	r3, #0
 8007e16:	60bb      	str	r3, [r7, #8]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	60bb      	str	r3, [r7, #8]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0201 	orr.w	r2, r2, #1
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e40:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e50:	d172      	bne.n	8007f38 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e52:	7bfb      	ldrb	r3, [r7, #15]
 8007e54:	2b22      	cmp	r3, #34	@ 0x22
 8007e56:	d002      	beq.n	8007e5e <I2C_Slave_STOPF+0x6a>
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e5c:	d135      	bne.n	8007eca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7a:	f043 0204 	orr.w	r2, r3, #4
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe f866 	bl	8005f68 <HAL_DMA_GetState>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d049      	beq.n	8007f36 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	4a69      	ldr	r2, [pc, #420]	@ (800804c <I2C_Slave_STOPF+0x258>)
 8007ea8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fd feae 	bl	8005c10 <HAL_DMA_Abort_IT>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d03d      	beq.n	8007f36 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ec8:	e035      	b.n	8007f36 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	685b      	ldr	r3, [r3, #4]
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d005      	beq.n	8007eee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	f043 0204 	orr.w	r2, r3, #4
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007efc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fe f830 	bl	8005f68 <HAL_DMA_GetState>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d014      	beq.n	8007f38 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f12:	4a4e      	ldr	r2, [pc, #312]	@ (800804c <I2C_Slave_STOPF+0x258>)
 8007f14:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fd fe78 	bl	8005c10 <HAL_DMA_Abort_IT>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d008      	beq.n	8007f38 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	e000      	b.n	8007f38 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007f36:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d03e      	beq.n	8007fc0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	d112      	bne.n	8007f76 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	691a      	ldr	r2, [r3, #16]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	695b      	ldr	r3, [r3, #20]
 8007f7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f80:	2b40      	cmp	r3, #64	@ 0x40
 8007f82:	d112      	bne.n	8007faa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f8e:	b2d2      	uxtb	r2, r2
 8007f90:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f96:	1c5a      	adds	r2, r3, #1
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fb8:	f043 0204 	orr.w	r2, r3, #4
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d003      	beq.n	8007fd0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f8b7 	bl	800813c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007fce:	e039      	b.n	8008044 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007fd0:	7bfb      	ldrb	r3, [r7, #15]
 8007fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fd4:	d109      	bne.n	8007fea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2228      	movs	r2, #40	@ 0x28
 8007fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff f80d 	bl	8007004 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	2b28      	cmp	r3, #40	@ 0x28
 8007ff4:	d111      	bne.n	800801a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	4a15      	ldr	r2, [pc, #84]	@ (8008050 <I2C_Slave_STOPF+0x25c>)
 8007ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2220      	movs	r2, #32
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff f80e 	bl	8007034 <HAL_I2C_ListenCpltCallback>
}
 8008018:	e014      	b.n	8008044 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801e:	2b22      	cmp	r3, #34	@ 0x22
 8008020:	d002      	beq.n	8008028 <I2C_Slave_STOPF+0x234>
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2b22      	cmp	r3, #34	@ 0x22
 8008026:	d10d      	bne.n	8008044 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2220      	movs	r2, #32
 8008032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fe ffe0 	bl	8007004 <HAL_I2C_SlaveRxCpltCallback>
}
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	080084cd 	.word	0x080084cd
 8008050:	ffff0000 	.word	0xffff0000

08008054 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008062:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008068:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	2b08      	cmp	r3, #8
 800806e:	d002      	beq.n	8008076 <I2C_Slave_AF+0x22>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b20      	cmp	r3, #32
 8008074:	d129      	bne.n	80080ca <I2C_Slave_AF+0x76>
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b28      	cmp	r3, #40	@ 0x28
 800807a:	d126      	bne.n	80080ca <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a2e      	ldr	r2, [pc, #184]	@ (8008138 <I2C_Slave_AF+0xe4>)
 8008080:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008090:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800809a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80080aa:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2220      	movs	r2, #32
 80080b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f7fe ffb6 	bl	8007034 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80080c8:	e031      	b.n	800812e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80080ca:	7bfb      	ldrb	r3, [r7, #15]
 80080cc:	2b21      	cmp	r3, #33	@ 0x21
 80080ce:	d129      	bne.n	8008124 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a19      	ldr	r2, [pc, #100]	@ (8008138 <I2C_Slave_AF+0xe4>)
 80080d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2221      	movs	r2, #33	@ 0x21
 80080da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	685a      	ldr	r2, [r3, #4]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80080fa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008104:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008114:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7fe fb26 	bl	8006768 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7fe ff67 	bl	8006ff0 <HAL_I2C_SlaveTxCpltCallback>
}
 8008122:	e004      	b.n	800812e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800812c:	615a      	str	r2, [r3, #20]
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	ffff0000 	.word	0xffff0000

0800813c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800814a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008152:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008154:	7bbb      	ldrb	r3, [r7, #14]
 8008156:	2b10      	cmp	r3, #16
 8008158:	d002      	beq.n	8008160 <I2C_ITError+0x24>
 800815a:	7bbb      	ldrb	r3, [r7, #14]
 800815c:	2b40      	cmp	r3, #64	@ 0x40
 800815e:	d10a      	bne.n	8008176 <I2C_ITError+0x3a>
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	2b22      	cmp	r3, #34	@ 0x22
 8008164:	d107      	bne.n	8008176 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008174:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008176:	7bfb      	ldrb	r3, [r7, #15]
 8008178:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800817c:	2b28      	cmp	r3, #40	@ 0x28
 800817e:	d107      	bne.n	8008190 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2228      	movs	r2, #40	@ 0x28
 800818a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800818e:	e015      	b.n	80081bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800819a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800819e:	d00a      	beq.n	80081b6 <I2C_ITError+0x7a>
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	2b60      	cmp	r3, #96	@ 0x60
 80081a4:	d007      	beq.n	80081b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2220      	movs	r2, #32
 80081aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081ca:	d162      	bne.n	8008292 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685a      	ldr	r2, [r3, #4]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d020      	beq.n	800822c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081ee:	4a6a      	ldr	r2, [pc, #424]	@ (8008398 <I2C_ITError+0x25c>)
 80081f0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd fd0a 	bl	8005c10 <HAL_DMA_Abort_IT>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8089 	beq.w	8008316 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2220      	movs	r2, #32
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008226:	4610      	mov	r0, r2
 8008228:	4798      	blx	r3
 800822a:	e074      	b.n	8008316 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008230:	4a59      	ldr	r2, [pc, #356]	@ (8008398 <I2C_ITError+0x25c>)
 8008232:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008238:	4618      	mov	r0, r3
 800823a:	f7fd fce9 	bl	8005c10 <HAL_DMA_Abort_IT>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d068      	beq.n	8008316 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824e:	2b40      	cmp	r3, #64	@ 0x40
 8008250:	d10b      	bne.n	800826a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	691a      	ldr	r2, [r3, #16]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825c:	b2d2      	uxtb	r2, r2
 800825e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008264:	1c5a      	adds	r2, r3, #1
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0201 	bic.w	r2, r2, #1
 8008278:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	e041      	b.n	8008316 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b60      	cmp	r3, #96	@ 0x60
 800829c:	d125      	bne.n	80082ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2220      	movs	r2, #32
 80082a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	695b      	ldr	r3, [r3, #20]
 80082b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082b6:	2b40      	cmp	r3, #64	@ 0x40
 80082b8:	d10b      	bne.n	80082d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	691a      	ldr	r2, [r3, #16]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c4:	b2d2      	uxtb	r2, r2
 80082c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082cc:	1c5a      	adds	r2, r3, #1
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f022 0201 	bic.w	r2, r2, #1
 80082e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7fe fece 	bl	8007084 <HAL_I2C_AbortCpltCallback>
 80082e8:	e015      	b.n	8008316 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	695b      	ldr	r3, [r3, #20]
 80082f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f4:	2b40      	cmp	r3, #64	@ 0x40
 80082f6:	d10b      	bne.n	8008310 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	691a      	ldr	r2, [r3, #16]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008302:	b2d2      	uxtb	r2, r2
 8008304:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800830a:	1c5a      	adds	r2, r3, #1
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7fe fead 	bl	8007070 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10e      	bne.n	8008344 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800832c:	2b00      	cmp	r3, #0
 800832e:	d109      	bne.n	8008344 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008336:	2b00      	cmp	r3, #0
 8008338:	d104      	bne.n	8008344 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	685a      	ldr	r2, [r3, #4]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008352:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800835a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b04      	cmp	r3, #4
 8008366:	d113      	bne.n	8008390 <I2C_ITError+0x254>
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b28      	cmp	r3, #40	@ 0x28
 800836c:	d110      	bne.n	8008390 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a0a      	ldr	r2, [pc, #40]	@ (800839c <I2C_ITError+0x260>)
 8008372:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2220      	movs	r2, #32
 800837e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fe fe52 	bl	8007034 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008390:	bf00      	nop
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	080084cd 	.word	0x080084cd
 800839c:	ffff0000 	.word	0xffff0000

080083a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b088      	sub	sp, #32
 80083a4:	af02      	add	r7, sp, #8
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	4608      	mov	r0, r1
 80083aa:	4611      	mov	r1, r2
 80083ac:	461a      	mov	r2, r3
 80083ae:	4603      	mov	r3, r0
 80083b0:	817b      	strh	r3, [r7, #10]
 80083b2:	460b      	mov	r3, r1
 80083b4:	813b      	strh	r3, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80083c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 f920 	bl	800861c <I2C_WaitOnFlagUntilTimeout>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00d      	beq.n	80083fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083f0:	d103      	bne.n	80083fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80083f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e05f      	b.n	80084be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083fe:	897b      	ldrh	r3, [r7, #10]
 8008400:	b2db      	uxtb	r3, r3
 8008402:	461a      	mov	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800840c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	6a3a      	ldr	r2, [r7, #32]
 8008412:	492d      	ldr	r1, [pc, #180]	@ (80084c8 <I2C_RequestMemoryWrite+0x128>)
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 f97b 	bl	8008710 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e04c      	b.n	80084be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	617b      	str	r3, [r7, #20]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800843a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800843c:	6a39      	ldr	r1, [r7, #32]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fa06 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 8008444:	4603      	mov	r3, r0
 8008446:	2b00      	cmp	r3, #0
 8008448:	d00d      	beq.n	8008466 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844e:	2b04      	cmp	r3, #4
 8008450:	d107      	bne.n	8008462 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008460:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e02b      	b.n	80084be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d105      	bne.n	8008478 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800846c:	893b      	ldrh	r3, [r7, #8]
 800846e:	b2da      	uxtb	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	611a      	str	r2, [r3, #16]
 8008476:	e021      	b.n	80084bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008478:	893b      	ldrh	r3, [r7, #8]
 800847a:	0a1b      	lsrs	r3, r3, #8
 800847c:	b29b      	uxth	r3, r3
 800847e:	b2da      	uxtb	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008488:	6a39      	ldr	r1, [r7, #32]
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f000 f9e0 	bl	8008850 <I2C_WaitOnTXEFlagUntilTimeout>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849a:	2b04      	cmp	r3, #4
 800849c:	d107      	bne.n	80084ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e005      	b.n	80084be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80084b2:	893b      	ldrh	r3, [r7, #8]
 80084b4:	b2da      	uxtb	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3718      	adds	r7, #24
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	00010002 	.word	0x00010002

080084cc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b086      	sub	sp, #24
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084dc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80084e6:	4b4b      	ldr	r3, [pc, #300]	@ (8008614 <I2C_DMAAbort+0x148>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	08db      	lsrs	r3, r3, #3
 80084ec:	4a4a      	ldr	r2, [pc, #296]	@ (8008618 <I2C_DMAAbort+0x14c>)
 80084ee:	fba2 2303 	umull	r2, r3, r2, r3
 80084f2:	0a1a      	lsrs	r2, r3, #8
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	00da      	lsls	r2, r3, #3
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	f043 0220 	orr.w	r2, r3, #32
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8008512:	e00a      	b.n	800852a <I2C_DMAAbort+0x5e>
    }
    count--;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	3b01      	subs	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008528:	d0ea      	beq.n	8008500 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008536:	2200      	movs	r2, #0
 8008538:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800853e:	2b00      	cmp	r3, #0
 8008540:	d003      	beq.n	800854a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008546:	2200      	movs	r2, #0
 8008548:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008558:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2200      	movs	r2, #0
 800855e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800856c:	2200      	movs	r2, #0
 800856e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008574:	2b00      	cmp	r3, #0
 8008576:	d003      	beq.n	8008580 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857c:	2200      	movs	r2, #0
 800857e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008596:	b2db      	uxtb	r3, r3
 8008598:	2b60      	cmp	r3, #96	@ 0x60
 800859a:	d10e      	bne.n	80085ba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2220      	movs	r2, #32
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2200      	movs	r2, #0
 80085b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80085b2:	6978      	ldr	r0, [r7, #20]
 80085b4:	f7fe fd66 	bl	8007084 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085b8:	e027      	b.n	800860a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80085ba:	7cfb      	ldrb	r3, [r7, #19]
 80085bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80085c0:	2b28      	cmp	r3, #40	@ 0x28
 80085c2:	d117      	bne.n	80085f4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f042 0201 	orr.w	r2, r2, #1
 80085d2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80085e2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2200      	movs	r2, #0
 80085e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2228      	movs	r2, #40	@ 0x28
 80085ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80085f2:	e007      	b.n	8008604 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008604:	6978      	ldr	r0, [r7, #20]
 8008606:	f7fe fd33 	bl	8007070 <HAL_I2C_ErrorCallback>
}
 800860a:	bf00      	nop
 800860c:	3718      	adds	r7, #24
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	20000018 	.word	0x20000018
 8008618:	14f8b589 	.word	0x14f8b589

0800861c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	4613      	mov	r3, r2
 800862a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800862c:	e048      	b.n	80086c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008634:	d044      	beq.n	80086c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008636:	f7fc fcbb 	bl	8004fb0 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	429a      	cmp	r2, r3
 8008644:	d302      	bcc.n	800864c <I2C_WaitOnFlagUntilTimeout+0x30>
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d139      	bne.n	80086c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	0c1b      	lsrs	r3, r3, #16
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b01      	cmp	r3, #1
 8008654:	d10d      	bne.n	8008672 <I2C_WaitOnFlagUntilTimeout+0x56>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	695b      	ldr	r3, [r3, #20]
 800865c:	43da      	mvns	r2, r3
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	4013      	ands	r3, r2
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	bf0c      	ite	eq
 8008668:	2301      	moveq	r3, #1
 800866a:	2300      	movne	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	461a      	mov	r2, r3
 8008670:	e00c      	b.n	800868c <I2C_WaitOnFlagUntilTimeout+0x70>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	43da      	mvns	r2, r3
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	4013      	ands	r3, r2
 800867e:	b29b      	uxth	r3, r3
 8008680:	2b00      	cmp	r3, #0
 8008682:	bf0c      	ite	eq
 8008684:	2301      	moveq	r3, #1
 8008686:	2300      	movne	r3, #0
 8008688:	b2db      	uxtb	r3, r3
 800868a:	461a      	mov	r2, r3
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	429a      	cmp	r2, r3
 8008690:	d116      	bne.n	80086c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086ac:	f043 0220 	orr.w	r2, r3, #32
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2200      	movs	r2, #0
 80086b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e023      	b.n	8008708 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	0c1b      	lsrs	r3, r3, #16
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d10d      	bne.n	80086e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	43da      	mvns	r2, r3
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4013      	ands	r3, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	2b00      	cmp	r3, #0
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	e00c      	b.n	8008700 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699b      	ldr	r3, [r3, #24]
 80086ec:	43da      	mvns	r2, r3
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4013      	ands	r3, r2
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	bf0c      	ite	eq
 80086f8:	2301      	moveq	r3, #1
 80086fa:	2300      	movne	r3, #0
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	461a      	mov	r2, r3
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	429a      	cmp	r2, r3
 8008704:	d093      	beq.n	800862e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800871e:	e071      	b.n	8008804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800872a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872e:	d123      	bne.n	8008778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800873e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008748:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2220      	movs	r2, #32
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008764:	f043 0204 	orr.w	r2, r3, #4
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e067      	b.n	8008848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800877e:	d041      	beq.n	8008804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008780:	f7fc fc16 	bl	8004fb0 <HAL_GetTick>
 8008784:	4602      	mov	r2, r0
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d302      	bcc.n	8008796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d136      	bne.n	8008804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	0c1b      	lsrs	r3, r3, #16
 800879a:	b2db      	uxtb	r3, r3
 800879c:	2b01      	cmp	r3, #1
 800879e:	d10c      	bne.n	80087ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	43da      	mvns	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4013      	ands	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	bf14      	ite	ne
 80087b2:	2301      	movne	r3, #1
 80087b4:	2300      	moveq	r3, #0
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	e00b      	b.n	80087d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	43da      	mvns	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	4013      	ands	r3, r2
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bf14      	ite	ne
 80087cc:	2301      	movne	r3, #1
 80087ce:	2300      	moveq	r3, #0
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d016      	beq.n	8008804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f0:	f043 0220 	orr.w	r2, r3, #32
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008800:	2301      	movs	r3, #1
 8008802:	e021      	b.n	8008848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	0c1b      	lsrs	r3, r3, #16
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	d10c      	bne.n	8008828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	43da      	mvns	r2, r3
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	4013      	ands	r3, r2
 800881a:	b29b      	uxth	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
 8008824:	b2db      	uxtb	r3, r3
 8008826:	e00b      	b.n	8008840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	43da      	mvns	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4013      	ands	r3, r2
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	bf14      	ite	ne
 800883a:	2301      	movne	r3, #1
 800883c:	2300      	moveq	r3, #0
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	f47f af6d 	bne.w	8008720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800885c:	e034      	b.n	80088c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f8b8 	bl	80089d4 <I2C_IsAcknowledgeFailed>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d001      	beq.n	800886e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e034      	b.n	80088d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008874:	d028      	beq.n	80088c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008876:	f7fc fb9b 	bl	8004fb0 <HAL_GetTick>
 800887a:	4602      	mov	r2, r0
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	d302      	bcc.n	800888c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d11d      	bne.n	80088c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008896:	2b80      	cmp	r3, #128	@ 0x80
 8008898:	d016      	beq.n	80088c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b4:	f043 0220 	orr.w	r2, r3, #32
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e007      	b.n	80088d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d2:	2b80      	cmp	r3, #128	@ 0x80
 80088d4:	d1c3      	bne.n	800885e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088ec:	e034      	b.n	8008958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f870 	bl	80089d4 <I2C_IsAcknowledgeFailed>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e034      	b.n	8008968 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008904:	d028      	beq.n	8008958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008906:	f7fc fb53 	bl	8004fb0 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	d302      	bcc.n	800891c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11d      	bne.n	8008958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	f003 0304 	and.w	r3, r3, #4
 8008926:	2b04      	cmp	r3, #4
 8008928:	d016      	beq.n	8008958 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2220      	movs	r2, #32
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008944:	f043 0220 	orr.w	r2, r3, #32
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008954:	2301      	movs	r3, #1
 8008956:	e007      	b.n	8008968 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b04      	cmp	r3, #4
 8008964:	d1c3      	bne.n	80088ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008966:	2300      	movs	r3, #0
}
 8008968:	4618      	mov	r0, r3
 800896a:	3710      	adds	r7, #16
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008970:	b480      	push	{r7}
 8008972:	b085      	sub	sp, #20
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800897c:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	08db      	lsrs	r3, r3, #3
 8008982:	4a13      	ldr	r2, [pc, #76]	@ (80089d0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008984:	fba2 2303 	umull	r2, r3, r2, r3
 8008988:	0a1a      	lsrs	r2, r3, #8
 800898a:	4613      	mov	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4413      	add	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	3b01      	subs	r3, #1
 8008996:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d107      	bne.n	80089ae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a2:	f043 0220 	orr.w	r2, r3, #32
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e008      	b.n	80089c0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089bc:	d0e9      	beq.n	8008992 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000018 	.word	0x20000018
 80089d0:	14f8b589 	.word	0x14f8b589

080089d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089ea:	d11b      	bne.n	8008a24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80089f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2220      	movs	r2, #32
 8008a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a10:	f043 0204 	orr.w	r2, r3, #4
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e000      	b.n	8008a26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8008a42:	d103      	bne.n	8008a4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a4a:	e007      	b.n	8008a5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a50:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8008a54:	d102      	bne.n	8008a5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2208      	movs	r2, #8
 8008a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e267      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d075      	beq.n	8008b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008a86:	4b88      	ldr	r3, [pc, #544]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f003 030c 	and.w	r3, r3, #12
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d00c      	beq.n	8008aac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a92:	4b85      	ldr	r3, [pc, #532]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008a9a:	2b08      	cmp	r3, #8
 8008a9c:	d112      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008a9e:	4b82      	ldr	r3, [pc, #520]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aaa:	d10b      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008aac:	4b7e      	ldr	r3, [pc, #504]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d05b      	beq.n	8008b70 <HAL_RCC_OscConfig+0x108>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d157      	bne.n	8008b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e242      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008acc:	d106      	bne.n	8008adc <HAL_RCC_OscConfig+0x74>
 8008ace:	4b76      	ldr	r3, [pc, #472]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a75      	ldr	r2, [pc, #468]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	e01d      	b.n	8008b18 <HAL_RCC_OscConfig+0xb0>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ae4:	d10c      	bne.n	8008b00 <HAL_RCC_OscConfig+0x98>
 8008ae6:	4b70      	ldr	r3, [pc, #448]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	4a6f      	ldr	r2, [pc, #444]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008af0:	6013      	str	r3, [r2, #0]
 8008af2:	4b6d      	ldr	r3, [pc, #436]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a6c      	ldr	r2, [pc, #432]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e00b      	b.n	8008b18 <HAL_RCC_OscConfig+0xb0>
 8008b00:	4b69      	ldr	r3, [pc, #420]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a68      	ldr	r2, [pc, #416]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b0a:	6013      	str	r3, [r2, #0]
 8008b0c:	4b66      	ldr	r3, [pc, #408]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a65      	ldr	r2, [pc, #404]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d013      	beq.n	8008b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7fc fa46 	bl	8004fb0 <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b28:	f7fc fa42 	bl	8004fb0 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b64      	cmp	r3, #100	@ 0x64
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e207      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0f0      	beq.n	8008b28 <HAL_RCC_OscConfig+0xc0>
 8008b46:	e014      	b.n	8008b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b48:	f7fc fa32 	bl	8004fb0 <HAL_GetTick>
 8008b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b4e:	e008      	b.n	8008b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b50:	f7fc fa2e 	bl	8004fb0 <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	2b64      	cmp	r3, #100	@ 0x64
 8008b5c:	d901      	bls.n	8008b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e1f3      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008b62:	4b51      	ldr	r3, [pc, #324]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1f0      	bne.n	8008b50 <HAL_RCC_OscConfig+0xe8>
 8008b6e:	e000      	b.n	8008b72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d063      	beq.n	8008c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 030c 	and.w	r3, r3, #12
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00b      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b8a:	4b47      	ldr	r3, [pc, #284]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008b92:	2b08      	cmp	r3, #8
 8008b94:	d11c      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008b96:	4b44      	ldr	r3, [pc, #272]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d116      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ba2:	4b41      	ldr	r3, [pc, #260]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d005      	beq.n	8008bba <HAL_RCC_OscConfig+0x152>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e1c7      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bba:	4b3b      	ldr	r3, [pc, #236]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	00db      	lsls	r3, r3, #3
 8008bc8:	4937      	ldr	r1, [pc, #220]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008bce:	e03a      	b.n	8008c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d020      	beq.n	8008c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bd8:	4b34      	ldr	r3, [pc, #208]	@ (8008cac <HAL_RCC_OscConfig+0x244>)
 8008bda:	2201      	movs	r2, #1
 8008bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bde:	f7fc f9e7 	bl	8004fb0 <HAL_GetTick>
 8008be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008be4:	e008      	b.n	8008bf8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008be6:	f7fc f9e3 	bl	8004fb0 <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d901      	bls.n	8008bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e1a8      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d0f0      	beq.n	8008be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c04:	4b28      	ldr	r3, [pc, #160]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	00db      	lsls	r3, r3, #3
 8008c12:	4925      	ldr	r1, [pc, #148]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c14:	4313      	orrs	r3, r2
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	e015      	b.n	8008c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c1a:	4b24      	ldr	r3, [pc, #144]	@ (8008cac <HAL_RCC_OscConfig+0x244>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c20:	f7fc f9c6 	bl	8004fb0 <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c28:	f7fc f9c2 	bl	8004fb0 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b02      	cmp	r3, #2
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e187      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0302 	and.w	r3, r3, #2
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f0      	bne.n	8008c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0308 	and.w	r3, r3, #8
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d036      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d016      	beq.n	8008c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c5a:	4b15      	ldr	r3, [pc, #84]	@ (8008cb0 <HAL_RCC_OscConfig+0x248>)
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c60:	f7fc f9a6 	bl	8004fb0 <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c68:	f7fc f9a2 	bl	8004fb0 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e167      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca8 <HAL_RCC_OscConfig+0x240>)
 8008c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c7e:	f003 0302 	and.w	r3, r3, #2
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0f0      	beq.n	8008c68 <HAL_RCC_OscConfig+0x200>
 8008c86:	e01b      	b.n	8008cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c88:	4b09      	ldr	r3, [pc, #36]	@ (8008cb0 <HAL_RCC_OscConfig+0x248>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c8e:	f7fc f98f 	bl	8004fb0 <HAL_GetTick>
 8008c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c94:	e00e      	b.n	8008cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c96:	f7fc f98b 	bl	8004fb0 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d907      	bls.n	8008cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e150      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
 8008ca8:	40023800 	.word	0x40023800
 8008cac:	42470000 	.word	0x42470000
 8008cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008cb4:	4b88      	ldr	r3, [pc, #544]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008cb8:	f003 0302 	and.w	r3, r3, #2
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1ea      	bne.n	8008c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f000 8097 	beq.w	8008dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008cd2:	4b81      	ldr	r3, [pc, #516]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10f      	bne.n	8008cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60bb      	str	r3, [r7, #8]
 8008ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8008cee:	4b7a      	ldr	r3, [pc, #488]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008cf6:	60bb      	str	r3, [r7, #8]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cfe:	4b77      	ldr	r3, [pc, #476]	@ (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d118      	bne.n	8008d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008d0a:	4b74      	ldr	r3, [pc, #464]	@ (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a73      	ldr	r2, [pc, #460]	@ (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d16:	f7fc f94b 	bl	8004fb0 <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d1c:	e008      	b.n	8008d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d1e:	f7fc f947 	bl	8004fb0 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d901      	bls.n	8008d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e10c      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008d30:	4b6a      	ldr	r3, [pc, #424]	@ (8008edc <HAL_RCC_OscConfig+0x474>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d0f0      	beq.n	8008d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d106      	bne.n	8008d52 <HAL_RCC_OscConfig+0x2ea>
 8008d44:	4b64      	ldr	r3, [pc, #400]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d48:	4a63      	ldr	r2, [pc, #396]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d4a:	f043 0301 	orr.w	r3, r3, #1
 8008d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d50:	e01c      	b.n	8008d8c <HAL_RCC_OscConfig+0x324>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	2b05      	cmp	r3, #5
 8008d58:	d10c      	bne.n	8008d74 <HAL_RCC_OscConfig+0x30c>
 8008d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d60:	f043 0304 	orr.w	r3, r3, #4
 8008d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d66:	4b5c      	ldr	r3, [pc, #368]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d6c:	f043 0301 	orr.w	r3, r3, #1
 8008d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d72:	e00b      	b.n	8008d8c <HAL_RCC_OscConfig+0x324>
 8008d74:	4b58      	ldr	r3, [pc, #352]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d78:	4a57      	ldr	r2, [pc, #348]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d7a:	f023 0301 	bic.w	r3, r3, #1
 8008d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008d80:	4b55      	ldr	r3, [pc, #340]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d84:	4a54      	ldr	r2, [pc, #336]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008d86:	f023 0304 	bic.w	r3, r3, #4
 8008d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d015      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d94:	f7fc f90c 	bl	8004fb0 <HAL_GetTick>
 8008d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d9a:	e00a      	b.n	8008db2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d9c:	f7fc f908 	bl	8004fb0 <HAL_GetTick>
 8008da0:	4602      	mov	r2, r0
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e0cb      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008db2:	4b49      	ldr	r3, [pc, #292]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0ee      	beq.n	8008d9c <HAL_RCC_OscConfig+0x334>
 8008dbe:	e014      	b.n	8008dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dc0:	f7fc f8f6 	bl	8004fb0 <HAL_GetTick>
 8008dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dc6:	e00a      	b.n	8008dde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc8:	f7fc f8f2 	bl	8004fb0 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d901      	bls.n	8008dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	e0b5      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008dde:	4b3e      	ldr	r3, [pc, #248]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de2:	f003 0302 	and.w	r3, r3, #2
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1ee      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008dea:	7dfb      	ldrb	r3, [r7, #23]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d105      	bne.n	8008dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008df0:	4b39      	ldr	r3, [pc, #228]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df4:	4a38      	ldr	r2, [pc, #224]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 80a1 	beq.w	8008f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e06:	4b34      	ldr	r3, [pc, #208]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f003 030c 	and.w	r3, r3, #12
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d05c      	beq.n	8008ecc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d141      	bne.n	8008e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e1a:	4b31      	ldr	r3, [pc, #196]	@ (8008ee0 <HAL_RCC_OscConfig+0x478>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e20:	f7fc f8c6 	bl	8004fb0 <HAL_GetTick>
 8008e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e28:	f7fc f8c2 	bl	8004fb0 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e087      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e3a:	4b27      	ldr	r3, [pc, #156]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f0      	bne.n	8008e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	69da      	ldr	r2, [r3, #28]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a1b      	ldr	r3, [r3, #32]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e54:	019b      	lsls	r3, r3, #6
 8008e56:	431a      	orrs	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e5c:	085b      	lsrs	r3, r3, #1
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	041b      	lsls	r3, r3, #16
 8008e62:	431a      	orrs	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e68:	061b      	lsls	r3, r3, #24
 8008e6a:	491b      	ldr	r1, [pc, #108]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e70:	4b1b      	ldr	r3, [pc, #108]	@ (8008ee0 <HAL_RCC_OscConfig+0x478>)
 8008e72:	2201      	movs	r2, #1
 8008e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e76:	f7fc f89b 	bl	8004fb0 <HAL_GetTick>
 8008e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e7e:	f7fc f897 	bl	8004fb0 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e05c      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e90:	4b11      	ldr	r3, [pc, #68]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0f0      	beq.n	8008e7e <HAL_RCC_OscConfig+0x416>
 8008e9c:	e054      	b.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e9e:	4b10      	ldr	r3, [pc, #64]	@ (8008ee0 <HAL_RCC_OscConfig+0x478>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ea4:	f7fc f884 	bl	8004fb0 <HAL_GetTick>
 8008ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eac:	f7fc f880 	bl	8004fb0 <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b02      	cmp	r3, #2
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e045      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ebe:	4b06      	ldr	r3, [pc, #24]	@ (8008ed8 <HAL_RCC_OscConfig+0x470>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0x444>
 8008eca:	e03d      	b.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e038      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
 8008ed8:	40023800 	.word	0x40023800
 8008edc:	40007000 	.word	0x40007000
 8008ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8008f54 <HAL_RCC_OscConfig+0x4ec>)
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d028      	beq.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d121      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d11a      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008f14:	4013      	ands	r3, r2
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d111      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f2a:	085b      	lsrs	r3, r3, #1
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d107      	bne.n	8008f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d001      	beq.n	8008f48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3718      	adds	r7, #24
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	40023800 	.word	0x40023800

08008f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	e0cc      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008f6c:	4b68      	ldr	r3, [pc, #416]	@ (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f003 0307 	and.w	r3, r3, #7
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d90c      	bls.n	8008f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f7a:	4b65      	ldr	r3, [pc, #404]	@ (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	b2d2      	uxtb	r2, r2
 8008f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f82:	4b63      	ldr	r3, [pc, #396]	@ (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f003 0307 	and.w	r3, r3, #7
 8008f8a:	683a      	ldr	r2, [r7, #0]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d001      	beq.n	8008f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008f90:	2301      	movs	r3, #1
 8008f92:	e0b8      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d020      	beq.n	8008fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f003 0304 	and.w	r3, r3, #4
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d005      	beq.n	8008fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fac:	4b59      	ldr	r3, [pc, #356]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	4a58      	ldr	r2, [pc, #352]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0308 	and.w	r3, r3, #8
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d005      	beq.n	8008fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fc4:	4b53      	ldr	r3, [pc, #332]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	4a52      	ldr	r2, [pc, #328]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fd0:	4b50      	ldr	r3, [pc, #320]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	494d      	ldr	r1, [pc, #308]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d044      	beq.n	8009078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d107      	bne.n	8009006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ff6:	4b47      	ldr	r3, [pc, #284]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d119      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e07f      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	2b02      	cmp	r3, #2
 800900c:	d003      	beq.n	8009016 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009012:	2b03      	cmp	r3, #3
 8009014:	d107      	bne.n	8009026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009016:	4b3f      	ldr	r3, [pc, #252]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d109      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e06f      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009026:	4b3b      	ldr	r3, [pc, #236]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d101      	bne.n	8009036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	e067      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009036:	4b37      	ldr	r3, [pc, #220]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f023 0203 	bic.w	r2, r3, #3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	4934      	ldr	r1, [pc, #208]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009044:	4313      	orrs	r3, r2
 8009046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009048:	f7fb ffb2 	bl	8004fb0 <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800904e:	e00a      	b.n	8009066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009050:	f7fb ffae 	bl	8004fb0 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800905e:	4293      	cmp	r3, r2
 8009060:	d901      	bls.n	8009066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e04f      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009066:	4b2b      	ldr	r3, [pc, #172]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f003 020c 	and.w	r2, r3, #12
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	429a      	cmp	r2, r3
 8009076:	d1eb      	bne.n	8009050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009078:	4b25      	ldr	r3, [pc, #148]	@ (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0307 	and.w	r3, r3, #7
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d20c      	bcs.n	80090a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009086:	4b22      	ldr	r3, [pc, #136]	@ (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	b2d2      	uxtb	r2, r2
 800908c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800908e:	4b20      	ldr	r3, [pc, #128]	@ (8009110 <HAL_RCC_ClockConfig+0x1b8>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0307 	and.w	r3, r3, #7
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	429a      	cmp	r2, r3
 800909a:	d001      	beq.n	80090a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e032      	b.n	8009106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d008      	beq.n	80090be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80090ac:	4b19      	ldr	r3, [pc, #100]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	4916      	ldr	r1, [pc, #88]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090ca:	4b12      	ldr	r3, [pc, #72]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	00db      	lsls	r3, r3, #3
 80090d8:	490e      	ldr	r1, [pc, #56]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80090de:	f000 f821 	bl	8009124 <HAL_RCC_GetSysClockFreq>
 80090e2:	4602      	mov	r2, r0
 80090e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009114 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	091b      	lsrs	r3, r3, #4
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	490a      	ldr	r1, [pc, #40]	@ (8009118 <HAL_RCC_ClockConfig+0x1c0>)
 80090f0:	5ccb      	ldrb	r3, [r1, r3]
 80090f2:	fa22 f303 	lsr.w	r3, r2, r3
 80090f6:	4a09      	ldr	r2, [pc, #36]	@ (800911c <HAL_RCC_ClockConfig+0x1c4>)
 80090f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80090fa:	4b09      	ldr	r3, [pc, #36]	@ (8009120 <HAL_RCC_ClockConfig+0x1c8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fb ff12 	bl	8004f28 <HAL_InitTick>

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40023c00 	.word	0x40023c00
 8009114:	40023800 	.word	0x40023800
 8009118:	0800e4dc 	.word	0x0800e4dc
 800911c:	20000018 	.word	0x20000018
 8009120:	2000001c 	.word	0x2000001c

08009124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009128:	b090      	sub	sp, #64	@ 0x40
 800912a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800913c:	4b59      	ldr	r3, [pc, #356]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	f003 030c 	and.w	r3, r3, #12
 8009144:	2b08      	cmp	r3, #8
 8009146:	d00d      	beq.n	8009164 <HAL_RCC_GetSysClockFreq+0x40>
 8009148:	2b08      	cmp	r3, #8
 800914a:	f200 80a1 	bhi.w	8009290 <HAL_RCC_GetSysClockFreq+0x16c>
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_RCC_GetSysClockFreq+0x34>
 8009152:	2b04      	cmp	r3, #4
 8009154:	d003      	beq.n	800915e <HAL_RCC_GetSysClockFreq+0x3a>
 8009156:	e09b      	b.n	8009290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009158:	4b53      	ldr	r3, [pc, #332]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800915a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800915c:	e09b      	b.n	8009296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800915e:	4b53      	ldr	r3, [pc, #332]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x188>)
 8009160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009162:	e098      	b.n	8009296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009164:	4b4f      	ldr	r3, [pc, #316]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800916e:	4b4d      	ldr	r3, [pc, #308]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d028      	beq.n	80091cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800917a:	4b4a      	ldr	r3, [pc, #296]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	099b      	lsrs	r3, r3, #6
 8009180:	2200      	movs	r2, #0
 8009182:	623b      	str	r3, [r7, #32]
 8009184:	627a      	str	r2, [r7, #36]	@ 0x24
 8009186:	6a3b      	ldr	r3, [r7, #32]
 8009188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800918c:	2100      	movs	r1, #0
 800918e:	4b47      	ldr	r3, [pc, #284]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x188>)
 8009190:	fb03 f201 	mul.w	r2, r3, r1
 8009194:	2300      	movs	r3, #0
 8009196:	fb00 f303 	mul.w	r3, r0, r3
 800919a:	4413      	add	r3, r2
 800919c:	4a43      	ldr	r2, [pc, #268]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x188>)
 800919e:	fba0 1202 	umull	r1, r2, r0, r2
 80091a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80091a4:	460a      	mov	r2, r1
 80091a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80091a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091aa:	4413      	add	r3, r2
 80091ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b0:	2200      	movs	r2, #0
 80091b2:	61bb      	str	r3, [r7, #24]
 80091b4:	61fa      	str	r2, [r7, #28]
 80091b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80091ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80091be:	f7f7 fcfb 	bl	8000bb8 <__aeabi_uldivmod>
 80091c2:	4602      	mov	r2, r0
 80091c4:	460b      	mov	r3, r1
 80091c6:	4613      	mov	r3, r2
 80091c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091ca:	e053      	b.n	8009274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80091cc:	4b35      	ldr	r3, [pc, #212]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	099b      	lsrs	r3, r3, #6
 80091d2:	2200      	movs	r2, #0
 80091d4:	613b      	str	r3, [r7, #16]
 80091d6:	617a      	str	r2, [r7, #20]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80091de:	f04f 0b00 	mov.w	fp, #0
 80091e2:	4652      	mov	r2, sl
 80091e4:	465b      	mov	r3, fp
 80091e6:	f04f 0000 	mov.w	r0, #0
 80091ea:	f04f 0100 	mov.w	r1, #0
 80091ee:	0159      	lsls	r1, r3, #5
 80091f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80091f4:	0150      	lsls	r0, r2, #5
 80091f6:	4602      	mov	r2, r0
 80091f8:	460b      	mov	r3, r1
 80091fa:	ebb2 080a 	subs.w	r8, r2, sl
 80091fe:	eb63 090b 	sbc.w	r9, r3, fp
 8009202:	f04f 0200 	mov.w	r2, #0
 8009206:	f04f 0300 	mov.w	r3, #0
 800920a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800920e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8009216:	ebb2 0408 	subs.w	r4, r2, r8
 800921a:	eb63 0509 	sbc.w	r5, r3, r9
 800921e:	f04f 0200 	mov.w	r2, #0
 8009222:	f04f 0300 	mov.w	r3, #0
 8009226:	00eb      	lsls	r3, r5, #3
 8009228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800922c:	00e2      	lsls	r2, r4, #3
 800922e:	4614      	mov	r4, r2
 8009230:	461d      	mov	r5, r3
 8009232:	eb14 030a 	adds.w	r3, r4, sl
 8009236:	603b      	str	r3, [r7, #0]
 8009238:	eb45 030b 	adc.w	r3, r5, fp
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800924a:	4629      	mov	r1, r5
 800924c:	028b      	lsls	r3, r1, #10
 800924e:	4621      	mov	r1, r4
 8009250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009254:	4621      	mov	r1, r4
 8009256:	028a      	lsls	r2, r1, #10
 8009258:	4610      	mov	r0, r2
 800925a:	4619      	mov	r1, r3
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	2200      	movs	r2, #0
 8009260:	60bb      	str	r3, [r7, #8]
 8009262:	60fa      	str	r2, [r7, #12]
 8009264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009268:	f7f7 fca6 	bl	8000bb8 <__aeabi_uldivmod>
 800926c:	4602      	mov	r2, r0
 800926e:	460b      	mov	r3, r1
 8009270:	4613      	mov	r3, r2
 8009272:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009274:	4b0b      	ldr	r3, [pc, #44]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	0c1b      	lsrs	r3, r3, #16
 800927a:	f003 0303 	and.w	r3, r3, #3
 800927e:	3301      	adds	r3, #1
 8009280:	005b      	lsls	r3, r3, #1
 8009282:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8009284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009288:	fbb2 f3f3 	udiv	r3, r2, r3
 800928c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800928e:	e002      	b.n	8009296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009290:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8009292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009298:	4618      	mov	r0, r3
 800929a:	3740      	adds	r7, #64	@ 0x40
 800929c:	46bd      	mov	sp, r7
 800929e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092a2:	bf00      	nop
 80092a4:	40023800 	.word	0x40023800
 80092a8:	00f42400 	.word	0x00f42400
 80092ac:	017d7840 	.word	0x017d7840

080092b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092b0:	b480      	push	{r7}
 80092b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80092b4:	4b03      	ldr	r3, [pc, #12]	@ (80092c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80092b6:	681b      	ldr	r3, [r3, #0]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000018 	.word	0x20000018

080092c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80092cc:	f7ff fff0 	bl	80092b0 <HAL_RCC_GetHCLKFreq>
 80092d0:	4602      	mov	r2, r0
 80092d2:	4b05      	ldr	r3, [pc, #20]	@ (80092e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	0a9b      	lsrs	r3, r3, #10
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	4903      	ldr	r1, [pc, #12]	@ (80092ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80092de:	5ccb      	ldrb	r3, [r1, r3]
 80092e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40023800 	.word	0x40023800
 80092ec:	0800e4ec 	.word	0x0800e4ec

080092f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	e041      	b.n	8009386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d106      	bne.n	800931c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7f8 fe26 	bl	8001f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f000 fcae 	bl	8009c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b082      	sub	sp, #8
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e041      	b.n	8009424 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d106      	bne.n	80093ba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f839 	bl	800942c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2202      	movs	r2, #2
 80093be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681a      	ldr	r2, [r3, #0]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4619      	mov	r1, r3
 80093cc:	4610      	mov	r0, r2
 80093ce:	f000 fc5f 	bl	8009c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2201      	movs	r2, #1
 80093d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2201      	movs	r2, #1
 80093de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2201      	movs	r2, #1
 80093e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2201      	movs	r2, #1
 80093ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2201      	movs	r2, #1
 80093f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2201      	movs	r2, #1
 80093fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2201      	movs	r2, #1
 800940e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <HAL_TIM_PWM_Start_DMA+0x2c>
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	bf0c      	ite	eq
 8009464:	2301      	moveq	r3, #1
 8009466:	2300      	movne	r3, #0
 8009468:	b2db      	uxtb	r3, r3
 800946a:	e022      	b.n	80094b2 <HAL_TIM_PWM_Start_DMA+0x72>
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	2b04      	cmp	r3, #4
 8009470:	d109      	bne.n	8009486 <HAL_TIM_PWM_Start_DMA+0x46>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b02      	cmp	r3, #2
 800947c:	bf0c      	ite	eq
 800947e:	2301      	moveq	r3, #1
 8009480:	2300      	movne	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	e015      	b.n	80094b2 <HAL_TIM_PWM_Start_DMA+0x72>
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2b08      	cmp	r3, #8
 800948a:	d109      	bne.n	80094a0 <HAL_TIM_PWM_Start_DMA+0x60>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	bf0c      	ite	eq
 8009498:	2301      	moveq	r3, #1
 800949a:	2300      	movne	r3, #0
 800949c:	b2db      	uxtb	r3, r3
 800949e:	e008      	b.n	80094b2 <HAL_TIM_PWM_Start_DMA+0x72>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	bf0c      	ite	eq
 80094ac:	2301      	moveq	r3, #1
 80094ae:	2300      	movne	r3, #0
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d001      	beq.n	80094ba <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80094b6:	2302      	movs	r3, #2
 80094b8:	e15d      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d109      	bne.n	80094d4 <HAL_TIM_PWM_Start_DMA+0x94>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	bf0c      	ite	eq
 80094cc:	2301      	moveq	r3, #1
 80094ce:	2300      	movne	r3, #0
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	e022      	b.n	800951a <HAL_TIM_PWM_Start_DMA+0xda>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2b04      	cmp	r3, #4
 80094d8:	d109      	bne.n	80094ee <HAL_TIM_PWM_Start_DMA+0xae>
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	bf0c      	ite	eq
 80094e6:	2301      	moveq	r3, #1
 80094e8:	2300      	movne	r3, #0
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	e015      	b.n	800951a <HAL_TIM_PWM_Start_DMA+0xda>
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	2b08      	cmp	r3, #8
 80094f2:	d109      	bne.n	8009508 <HAL_TIM_PWM_Start_DMA+0xc8>
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094fa:	b2db      	uxtb	r3, r3
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	bf0c      	ite	eq
 8009500:	2301      	moveq	r3, #1
 8009502:	2300      	movne	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	e008      	b.n	800951a <HAL_TIM_PWM_Start_DMA+0xda>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800950e:	b2db      	uxtb	r3, r3
 8009510:	2b01      	cmp	r3, #1
 8009512:	bf0c      	ite	eq
 8009514:	2301      	moveq	r3, #1
 8009516:	2300      	movne	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d024      	beq.n	8009568 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_TIM_PWM_Start_DMA+0xea>
 8009524:	887b      	ldrh	r3, [r7, #2]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e123      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d104      	bne.n	800953e <HAL_TIM_PWM_Start_DMA+0xfe>
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2202      	movs	r2, #2
 8009538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800953c:	e016      	b.n	800956c <HAL_TIM_PWM_Start_DMA+0x12c>
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	2b04      	cmp	r3, #4
 8009542:	d104      	bne.n	800954e <HAL_TIM_PWM_Start_DMA+0x10e>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2202      	movs	r2, #2
 8009548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800954c:	e00e      	b.n	800956c <HAL_TIM_PWM_Start_DMA+0x12c>
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	2b08      	cmp	r3, #8
 8009552:	d104      	bne.n	800955e <HAL_TIM_PWM_Start_DMA+0x11e>
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2202      	movs	r2, #2
 8009558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800955c:	e006      	b.n	800956c <HAL_TIM_PWM_Start_DMA+0x12c>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2202      	movs	r2, #2
 8009562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009566:	e001      	b.n	800956c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e104      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b0c      	cmp	r3, #12
 8009570:	f200 80ae 	bhi.w	80096d0 <HAL_TIM_PWM_Start_DMA+0x290>
 8009574:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8009576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957a:	bf00      	nop
 800957c:	080095b1 	.word	0x080095b1
 8009580:	080096d1 	.word	0x080096d1
 8009584:	080096d1 	.word	0x080096d1
 8009588:	080096d1 	.word	0x080096d1
 800958c:	080095f9 	.word	0x080095f9
 8009590:	080096d1 	.word	0x080096d1
 8009594:	080096d1 	.word	0x080096d1
 8009598:	080096d1 	.word	0x080096d1
 800959c:	08009641 	.word	0x08009641
 80095a0:	080096d1 	.word	0x080096d1
 80095a4:	080096d1 	.word	0x080096d1
 80095a8:	080096d1 	.word	0x080096d1
 80095ac:	08009689 	.word	0x08009689
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b4:	4a72      	ldr	r2, [pc, #456]	@ (8009780 <HAL_TIM_PWM_Start_DMA+0x340>)
 80095b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095bc:	4a71      	ldr	r2, [pc, #452]	@ (8009784 <HAL_TIM_PWM_Start_DMA+0x344>)
 80095be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c4:	4a70      	ldr	r2, [pc, #448]	@ (8009788 <HAL_TIM_PWM_Start_DMA+0x348>)
 80095c6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80095cc:	6879      	ldr	r1, [r7, #4]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3334      	adds	r3, #52	@ 0x34
 80095d4:	461a      	mov	r2, r3
 80095d6:	887b      	ldrh	r3, [r7, #2]
 80095d8:	f7fc fac2 	bl	8005b60 <HAL_DMA_Start_IT>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e0c7      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80095f4:	60da      	str	r2, [r3, #12]
      break;
 80095f6:	e06e      	b.n	80096d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fc:	4a60      	ldr	r2, [pc, #384]	@ (8009780 <HAL_TIM_PWM_Start_DMA+0x340>)
 80095fe:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009604:	4a5f      	ldr	r2, [pc, #380]	@ (8009784 <HAL_TIM_PWM_Start_DMA+0x344>)
 8009606:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960c:	4a5e      	ldr	r2, [pc, #376]	@ (8009788 <HAL_TIM_PWM_Start_DMA+0x348>)
 800960e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8009614:	6879      	ldr	r1, [r7, #4]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3338      	adds	r3, #56	@ 0x38
 800961c:	461a      	mov	r2, r3
 800961e:	887b      	ldrh	r3, [r7, #2]
 8009620:	f7fc fa9e 	bl	8005b60 <HAL_DMA_Start_IT>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d001      	beq.n	800962e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e0a3      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68da      	ldr	r2, [r3, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800963c:	60da      	str	r2, [r3, #12]
      break;
 800963e:	e04a      	b.n	80096d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	4a4e      	ldr	r2, [pc, #312]	@ (8009780 <HAL_TIM_PWM_Start_DMA+0x340>)
 8009646:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800964c:	4a4d      	ldr	r2, [pc, #308]	@ (8009784 <HAL_TIM_PWM_Start_DMA+0x344>)
 800964e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009654:	4a4c      	ldr	r2, [pc, #304]	@ (8009788 <HAL_TIM_PWM_Start_DMA+0x348>)
 8009656:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800965c:	6879      	ldr	r1, [r7, #4]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	333c      	adds	r3, #60	@ 0x3c
 8009664:	461a      	mov	r2, r3
 8009666:	887b      	ldrh	r3, [r7, #2]
 8009668:	f7fc fa7a 	bl	8005b60 <HAL_DMA_Start_IT>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e07f      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009684:	60da      	str	r2, [r3, #12]
      break;
 8009686:	e026      	b.n	80096d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968c:	4a3c      	ldr	r2, [pc, #240]	@ (8009780 <HAL_TIM_PWM_Start_DMA+0x340>)
 800968e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009694:	4a3b      	ldr	r2, [pc, #236]	@ (8009784 <HAL_TIM_PWM_Start_DMA+0x344>)
 8009696:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969c:	4a3a      	ldr	r2, [pc, #232]	@ (8009788 <HAL_TIM_PWM_Start_DMA+0x348>)
 800969e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	3340      	adds	r3, #64	@ 0x40
 80096ac:	461a      	mov	r2, r3
 80096ae:	887b      	ldrh	r3, [r7, #2]
 80096b0:	f7fc fa56 	bl	8005b60 <HAL_DMA_Start_IT>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e05b      	b.n	8009776 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68da      	ldr	r2, [r3, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80096cc:	60da      	str	r2, [r3, #12]
      break;
 80096ce:	e002      	b.n	80096d6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
      break;
 80096d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d14b      	bne.n	8009774 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	2201      	movs	r2, #1
 80096e2:	68b9      	ldr	r1, [r7, #8]
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fd85 	bl	800a1f4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a27      	ldr	r2, [pc, #156]	@ (800978c <HAL_TIM_PWM_Start_DMA+0x34c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d107      	bne.n	8009704 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009702:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a20      	ldr	r2, [pc, #128]	@ (800978c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d018      	beq.n	8009740 <HAL_TIM_PWM_Start_DMA+0x300>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009716:	d013      	beq.n	8009740 <HAL_TIM_PWM_Start_DMA+0x300>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a1c      	ldr	r2, [pc, #112]	@ (8009790 <HAL_TIM_PWM_Start_DMA+0x350>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00e      	beq.n	8009740 <HAL_TIM_PWM_Start_DMA+0x300>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a1b      	ldr	r2, [pc, #108]	@ (8009794 <HAL_TIM_PWM_Start_DMA+0x354>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d009      	beq.n	8009740 <HAL_TIM_PWM_Start_DMA+0x300>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a19      	ldr	r2, [pc, #100]	@ (8009798 <HAL_TIM_PWM_Start_DMA+0x358>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d004      	beq.n	8009740 <HAL_TIM_PWM_Start_DMA+0x300>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a18      	ldr	r2, [pc, #96]	@ (800979c <HAL_TIM_PWM_Start_DMA+0x35c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d111      	bne.n	8009764 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	2b06      	cmp	r3, #6
 8009750:	d010      	beq.n	8009774 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009762:	e007      	b.n	8009774 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0201 	orr.w	r2, r2, #1
 8009772:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	08009b81 	.word	0x08009b81
 8009784:	08009c29 	.word	0x08009c29
 8009788:	08009aef 	.word	0x08009aef
 800978c:	40010000 	.word	0x40010000
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40014000 	.word	0x40014000

080097a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80097ba:	2302      	movs	r3, #2
 80097bc:	e0ae      	b.n	800991c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b0c      	cmp	r3, #12
 80097ca:	f200 809f 	bhi.w	800990c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80097ce:	a201      	add	r2, pc, #4	@ (adr r2, 80097d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80097d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d4:	08009809 	.word	0x08009809
 80097d8:	0800990d 	.word	0x0800990d
 80097dc:	0800990d 	.word	0x0800990d
 80097e0:	0800990d 	.word	0x0800990d
 80097e4:	08009849 	.word	0x08009849
 80097e8:	0800990d 	.word	0x0800990d
 80097ec:	0800990d 	.word	0x0800990d
 80097f0:	0800990d 	.word	0x0800990d
 80097f4:	0800988b 	.word	0x0800988b
 80097f8:	0800990d 	.word	0x0800990d
 80097fc:	0800990d 	.word	0x0800990d
 8009800:	0800990d 	.word	0x0800990d
 8009804:	080098cb 	.word	0x080098cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68b9      	ldr	r1, [r7, #8]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 faca 	bl	8009da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0208 	orr.w	r2, r2, #8
 8009822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699a      	ldr	r2, [r3, #24]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f022 0204 	bic.w	r2, r2, #4
 8009832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	6999      	ldr	r1, [r3, #24]
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	691a      	ldr	r2, [r3, #16]
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	619a      	str	r2, [r3, #24]
      break;
 8009846:	e064      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68b9      	ldr	r1, [r7, #8]
 800984e:	4618      	mov	r0, r3
 8009850:	f000 fb10 	bl	8009e74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	699a      	ldr	r2, [r3, #24]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009862:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	699a      	ldr	r2, [r3, #24]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009872:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	6999      	ldr	r1, [r3, #24]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	021a      	lsls	r2, r3, #8
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	619a      	str	r2, [r3, #24]
      break;
 8009888:	e043      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	68b9      	ldr	r1, [r7, #8]
 8009890:	4618      	mov	r0, r3
 8009892:	f000 fb5b 	bl	8009f4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f042 0208 	orr.w	r2, r2, #8
 80098a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69da      	ldr	r2, [r3, #28]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 0204 	bic.w	r2, r2, #4
 80098b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	69d9      	ldr	r1, [r3, #28]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	691a      	ldr	r2, [r3, #16]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	61da      	str	r2, [r3, #28]
      break;
 80098c8:	e023      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	68b9      	ldr	r1, [r7, #8]
 80098d0:	4618      	mov	r0, r3
 80098d2:	f000 fba5 	bl	800a020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	69da      	ldr	r2, [r3, #28]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80098e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	69d9      	ldr	r1, [r3, #28]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	021a      	lsls	r2, r3, #8
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	61da      	str	r2, [r3, #28]
      break;
 800990a:	e002      	b.n	8009912 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	75fb      	strb	r3, [r7, #23]
      break;
 8009910:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800991a:	7dfb      	ldrb	r3, [r7, #23]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009938:	2b01      	cmp	r3, #1
 800993a:	d101      	bne.n	8009940 <HAL_TIM_ConfigClockSource+0x1c>
 800993c:	2302      	movs	r3, #2
 800993e:	e0b4      	b.n	8009aaa <HAL_TIM_ConfigClockSource+0x186>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2202      	movs	r2, #2
 800994c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800995e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009966:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68ba      	ldr	r2, [r7, #8]
 800996e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009978:	d03e      	beq.n	80099f8 <HAL_TIM_ConfigClockSource+0xd4>
 800997a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800997e:	f200 8087 	bhi.w	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009986:	f000 8086 	beq.w	8009a96 <HAL_TIM_ConfigClockSource+0x172>
 800998a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800998e:	d87f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009990:	2b70      	cmp	r3, #112	@ 0x70
 8009992:	d01a      	beq.n	80099ca <HAL_TIM_ConfigClockSource+0xa6>
 8009994:	2b70      	cmp	r3, #112	@ 0x70
 8009996:	d87b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 8009998:	2b60      	cmp	r3, #96	@ 0x60
 800999a:	d050      	beq.n	8009a3e <HAL_TIM_ConfigClockSource+0x11a>
 800999c:	2b60      	cmp	r3, #96	@ 0x60
 800999e:	d877      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099a0:	2b50      	cmp	r3, #80	@ 0x50
 80099a2:	d03c      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0xfa>
 80099a4:	2b50      	cmp	r3, #80	@ 0x50
 80099a6:	d873      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099a8:	2b40      	cmp	r3, #64	@ 0x40
 80099aa:	d058      	beq.n	8009a5e <HAL_TIM_ConfigClockSource+0x13a>
 80099ac:	2b40      	cmp	r3, #64	@ 0x40
 80099ae:	d86f      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099b0:	2b30      	cmp	r3, #48	@ 0x30
 80099b2:	d064      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099b4:	2b30      	cmp	r3, #48	@ 0x30
 80099b6:	d86b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	d060      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099bc:	2b20      	cmp	r3, #32
 80099be:	d867      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d05c      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099c4:	2b10      	cmp	r3, #16
 80099c6:	d05a      	beq.n	8009a7e <HAL_TIM_ConfigClockSource+0x15a>
 80099c8:	e062      	b.n	8009a90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099da:	f000 fbeb 	bl	800a1b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80099ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	68ba      	ldr	r2, [r7, #8]
 80099f4:	609a      	str	r2, [r3, #8]
      break;
 80099f6:	e04f      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009a08:	f000 fbd4 	bl	800a1b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689a      	ldr	r2, [r3, #8]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009a1a:	609a      	str	r2, [r3, #8]
      break;
 8009a1c:	e03c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f000 fb48 	bl	800a0c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2150      	movs	r1, #80	@ 0x50
 8009a36:	4618      	mov	r0, r3
 8009a38:	f000 fba1 	bl	800a17e <TIM_ITRx_SetConfig>
      break;
 8009a3c:	e02c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f000 fb67 	bl	800a11e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2160      	movs	r1, #96	@ 0x60
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 fb91 	bl	800a17e <TIM_ITRx_SetConfig>
      break;
 8009a5c:	e01c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	f000 fb28 	bl	800a0c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2140      	movs	r1, #64	@ 0x40
 8009a76:	4618      	mov	r0, r3
 8009a78:	f000 fb81 	bl	800a17e <TIM_ITRx_SetConfig>
      break;
 8009a7c:	e00c      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4619      	mov	r1, r3
 8009a88:	4610      	mov	r0, r2
 8009a8a:	f000 fb78 	bl	800a17e <TIM_ITRx_SetConfig>
      break;
 8009a8e:	e003      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009a90:	2301      	movs	r3, #1
 8009a92:	73fb      	strb	r3, [r7, #15]
      break;
 8009a94:	e000      	b.n	8009a98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009a96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}

08009ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ab2:	b480      	push	{r7}
 8009ab4:	b083      	sub	sp, #12
 8009ab6:	af00      	add	r7, sp, #0
 8009ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009aba:	bf00      	nop
 8009abc:	370c      	adds	r7, #12
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr

08009ac6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009ace:	bf00      	nop
 8009ad0:	370c      	adds	r7, #12
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr

08009ada <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ada:	b480      	push	{r7}
 8009adc:	b083      	sub	sp, #12
 8009ade:	af00      	add	r7, sp, #0
 8009ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009ae2:	bf00      	nop
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009afa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d107      	bne.n	8009b16 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2201      	movs	r2, #1
 8009b0a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b14:	e02a      	b.n	8009b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b1a:	687a      	ldr	r2, [r7, #4]
 8009b1c:	429a      	cmp	r2, r3
 8009b1e:	d107      	bne.n	8009b30 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2202      	movs	r2, #2
 8009b24:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b2e:	e01d      	b.n	8009b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d107      	bne.n	8009b4a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2204      	movs	r2, #4
 8009b3e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b48:	e010      	b.n	8009b6c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d107      	bne.n	8009b64 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2208      	movs	r2, #8
 8009b58:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b62:	e003      	b.n	8009b6c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8009b6c:	68f8      	ldr	r0, [r7, #12]
 8009b6e:	f7ff ffb4 	bl	8009ada <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	771a      	strb	r2, [r3, #28]
}
 8009b78:	bf00      	nop
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d10b      	bne.n	8009bb0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d136      	bne.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bae:	e031      	b.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d10b      	bne.n	8009bd2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2202      	movs	r2, #2
 8009bbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d125      	bne.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2201      	movs	r2, #1
 8009bcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bd0:	e020      	b.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d10b      	bne.n	8009bf4 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2204      	movs	r2, #4
 8009be0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	69db      	ldr	r3, [r3, #28]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d114      	bne.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bf2:	e00f      	b.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d10a      	bne.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2208      	movs	r2, #8
 8009c02:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d103      	bne.n	8009c14 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c14:	68f8      	ldr	r0, [r7, #12]
 8009c16:	f7ff ff4c 	bl	8009ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	771a      	strb	r2, [r3, #28]
}
 8009c20:	bf00      	nop
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b084      	sub	sp, #16
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c34:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d103      	bne.n	8009c48 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	771a      	strb	r2, [r3, #28]
 8009c46:	e019      	b.n	8009c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c4c:	687a      	ldr	r2, [r7, #4]
 8009c4e:	429a      	cmp	r2, r3
 8009c50:	d103      	bne.n	8009c5a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2202      	movs	r2, #2
 8009c56:	771a      	strb	r2, [r3, #28]
 8009c58:	e010      	b.n	8009c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d103      	bne.n	8009c6c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2204      	movs	r2, #4
 8009c68:	771a      	strb	r2, [r3, #28]
 8009c6a:	e007      	b.n	8009c7c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c70:	687a      	ldr	r2, [r7, #4]
 8009c72:	429a      	cmp	r2, r3
 8009c74:	d102      	bne.n	8009c7c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2208      	movs	r2, #8
 8009c7a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f7ff ff22 	bl	8009ac6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	771a      	strb	r2, [r3, #28]
}
 8009c88:	bf00      	nop
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b085      	sub	sp, #20
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	4a3a      	ldr	r2, [pc, #232]	@ (8009d8c <TIM_Base_SetConfig+0xfc>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d00f      	beq.n	8009cc8 <TIM_Base_SetConfig+0x38>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cae:	d00b      	beq.n	8009cc8 <TIM_Base_SetConfig+0x38>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4a37      	ldr	r2, [pc, #220]	@ (8009d90 <TIM_Base_SetConfig+0x100>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d007      	beq.n	8009cc8 <TIM_Base_SetConfig+0x38>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4a36      	ldr	r2, [pc, #216]	@ (8009d94 <TIM_Base_SetConfig+0x104>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d003      	beq.n	8009cc8 <TIM_Base_SetConfig+0x38>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4a35      	ldr	r2, [pc, #212]	@ (8009d98 <TIM_Base_SetConfig+0x108>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d108      	bne.n	8009cda <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8009d8c <TIM_Base_SetConfig+0xfc>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d01b      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ce8:	d017      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a28      	ldr	r2, [pc, #160]	@ (8009d90 <TIM_Base_SetConfig+0x100>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d013      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a27      	ldr	r2, [pc, #156]	@ (8009d94 <TIM_Base_SetConfig+0x104>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00f      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a26      	ldr	r2, [pc, #152]	@ (8009d98 <TIM_Base_SetConfig+0x108>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00b      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a25      	ldr	r2, [pc, #148]	@ (8009d9c <TIM_Base_SetConfig+0x10c>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d007      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a24      	ldr	r2, [pc, #144]	@ (8009da0 <TIM_Base_SetConfig+0x110>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d003      	beq.n	8009d1a <TIM_Base_SetConfig+0x8a>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a23      	ldr	r2, [pc, #140]	@ (8009da4 <TIM_Base_SetConfig+0x114>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d108      	bne.n	8009d2c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	695b      	ldr	r3, [r3, #20]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	689a      	ldr	r2, [r3, #8]
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a0e      	ldr	r2, [pc, #56]	@ (8009d8c <TIM_Base_SetConfig+0xfc>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d103      	bne.n	8009d60 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	691a      	ldr	r2, [r3, #16]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2201      	movs	r2, #1
 8009d64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	691b      	ldr	r3, [r3, #16]
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	2b01      	cmp	r3, #1
 8009d70:	d105      	bne.n	8009d7e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f023 0201 	bic.w	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	611a      	str	r2, [r3, #16]
  }
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr
 8009d8a:	bf00      	nop
 8009d8c:	40010000 	.word	0x40010000
 8009d90:	40000400 	.word	0x40000400
 8009d94:	40000800 	.word	0x40000800
 8009d98:	40000c00 	.word	0x40000c00
 8009d9c:	40014000 	.word	0x40014000
 8009da0:	40014400 	.word	0x40014400
 8009da4:	40014800 	.word	0x40014800

08009da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b087      	sub	sp, #28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6a1b      	ldr	r3, [r3, #32]
 8009db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	f023 0201 	bic.w	r2, r3, #1
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	699b      	ldr	r3, [r3, #24]
 8009dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f023 0303 	bic.w	r3, r3, #3
 8009dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f023 0302 	bic.w	r3, r3, #2
 8009df0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	697a      	ldr	r2, [r7, #20]
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8009e70 <TIM_OC1_SetConfig+0xc8>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d10c      	bne.n	8009e1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f023 0308 	bic.w	r3, r3, #8
 8009e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	4313      	orrs	r3, r2
 8009e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f023 0304 	bic.w	r3, r3, #4
 8009e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a13      	ldr	r2, [pc, #76]	@ (8009e70 <TIM_OC1_SetConfig+0xc8>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d111      	bne.n	8009e4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	693a      	ldr	r2, [r7, #16]
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	699b      	ldr	r3, [r3, #24]
 8009e44:	693a      	ldr	r2, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	68fa      	ldr	r2, [r7, #12]
 8009e54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	685a      	ldr	r2, [r3, #4]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	697a      	ldr	r2, [r7, #20]
 8009e62:	621a      	str	r2, [r3, #32]
}
 8009e64:	bf00      	nop
 8009e66:	371c      	adds	r7, #28
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr
 8009e70:	40010000 	.word	0x40010000

08009e74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	f023 0210 	bic.w	r2, r3, #16
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	021b      	lsls	r3, r3, #8
 8009eb2:	68fa      	ldr	r2, [r7, #12]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f023 0320 	bic.w	r3, r3, #32
 8009ebe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	697a      	ldr	r2, [r7, #20]
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a1e      	ldr	r2, [pc, #120]	@ (8009f48 <TIM_OC2_SetConfig+0xd4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d10d      	bne.n	8009ef0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009eda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009eee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a15      	ldr	r2, [pc, #84]	@ (8009f48 <TIM_OC2_SetConfig+0xd4>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d113      	bne.n	8009f20 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009efe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009f06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	695b      	ldr	r3, [r3, #20]
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	4313      	orrs	r3, r2
 8009f12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	693a      	ldr	r2, [r7, #16]
 8009f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	685a      	ldr	r2, [r3, #4]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	621a      	str	r2, [r3, #32]
}
 8009f3a:	bf00      	nop
 8009f3c:	371c      	adds	r7, #28
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	40010000 	.word	0x40010000

08009f4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b087      	sub	sp, #28
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6a1b      	ldr	r3, [r3, #32]
 8009f5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6a1b      	ldr	r3, [r3, #32]
 8009f60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	69db      	ldr	r3, [r3, #28]
 8009f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	f023 0303 	bic.w	r3, r3, #3
 8009f82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009f8e:	697b      	ldr	r3, [r7, #20]
 8009f90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	689b      	ldr	r3, [r3, #8]
 8009f9a:	021b      	lsls	r3, r3, #8
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800a01c <TIM_OC3_SetConfig+0xd0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d10d      	bne.n	8009fc6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	68db      	ldr	r3, [r3, #12]
 8009fb6:	021b      	lsls	r3, r3, #8
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009fbe:	697b      	ldr	r3, [r7, #20]
 8009fc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a14      	ldr	r2, [pc, #80]	@ (800a01c <TIM_OC3_SetConfig+0xd0>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d113      	bne.n	8009ff6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	695b      	ldr	r3, [r3, #20]
 8009fe2:	011b      	lsls	r3, r3, #4
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	699b      	ldr	r3, [r3, #24]
 8009fee:	011b      	lsls	r3, r3, #4
 8009ff0:	693a      	ldr	r2, [r7, #16]
 8009ff2:	4313      	orrs	r3, r2
 8009ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68fa      	ldr	r2, [r7, #12]
 800a000:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	685a      	ldr	r2, [r3, #4]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	697a      	ldr	r2, [r7, #20]
 800a00e:	621a      	str	r2, [r3, #32]
}
 800a010:	bf00      	nop
 800a012:	371c      	adds	r7, #28
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr
 800a01c:	40010000 	.word	0x40010000

0800a020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a020:	b480      	push	{r7}
 800a022:	b087      	sub	sp, #28
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6a1b      	ldr	r3, [r3, #32]
 800a034:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	021b      	lsls	r3, r3, #8
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a06a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	689b      	ldr	r3, [r3, #8]
 800a070:	031b      	lsls	r3, r3, #12
 800a072:	693a      	ldr	r2, [r7, #16]
 800a074:	4313      	orrs	r3, r2
 800a076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	4a10      	ldr	r2, [pc, #64]	@ (800a0bc <TIM_OC4_SetConfig+0x9c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d109      	bne.n	800a094 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	695b      	ldr	r3, [r3, #20]
 800a08c:	019b      	lsls	r3, r3, #6
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	4313      	orrs	r3, r2
 800a092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	697a      	ldr	r2, [r7, #20]
 800a098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	693a      	ldr	r2, [r7, #16]
 800a0ac:	621a      	str	r2, [r3, #32]
}
 800a0ae:	bf00      	nop
 800a0b0:	371c      	adds	r7, #28
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	40010000 	.word	0x40010000

0800a0c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6a1b      	ldr	r3, [r3, #32]
 800a0d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	f023 0201 	bic.w	r2, r3, #1
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a0ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	011b      	lsls	r3, r3, #4
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f023 030a 	bic.w	r3, r3, #10
 800a0fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	4313      	orrs	r3, r2
 800a104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	693a      	ldr	r2, [r7, #16]
 800a10a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	621a      	str	r2, [r3, #32]
}
 800a112:	bf00      	nop
 800a114:	371c      	adds	r7, #28
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr

0800a11e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a11e:	b480      	push	{r7}
 800a120:	b087      	sub	sp, #28
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6a1b      	ldr	r3, [r3, #32]
 800a134:	f023 0210 	bic.w	r2, r3, #16
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	031b      	lsls	r3, r3, #12
 800a14e:	693a      	ldr	r2, [r7, #16]
 800a150:	4313      	orrs	r3, r2
 800a152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a15a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	011b      	lsls	r3, r3, #4
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	621a      	str	r2, [r3, #32]
}
 800a172:	bf00      	nop
 800a174:	371c      	adds	r7, #28
 800a176:	46bd      	mov	sp, r7
 800a178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17c:	4770      	bx	lr

0800a17e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a17e:	b480      	push	{r7}
 800a180:	b085      	sub	sp, #20
 800a182:	af00      	add	r7, sp, #0
 800a184:	6078      	str	r0, [r7, #4]
 800a186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	f043 0307 	orr.w	r3, r3, #7
 800a1a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	609a      	str	r2, [r3, #8]
}
 800a1a8:	bf00      	nop
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b087      	sub	sp, #28
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
 800a1c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	021a      	lsls	r2, r3, #8
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	697a      	ldr	r2, [r7, #20]
 800a1e6:	609a      	str	r2, [r3, #8]
}
 800a1e8:	bf00      	nop
 800a1ea:	371c      	adds	r7, #28
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f003 031f 	and.w	r3, r3, #31
 800a206:	2201      	movs	r2, #1
 800a208:	fa02 f303 	lsl.w	r3, r2, r3
 800a20c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1a      	ldr	r2, [r3, #32]
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	43db      	mvns	r3, r3
 800a216:	401a      	ands	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6a1a      	ldr	r2, [r3, #32]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	f003 031f 	and.w	r3, r3, #31
 800a226:	6879      	ldr	r1, [r7, #4]
 800a228:	fa01 f303 	lsl.w	r3, r1, r3
 800a22c:	431a      	orrs	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	621a      	str	r2, [r3, #32]
}
 800a232:	bf00      	nop
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
	...

0800a240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a240:	b480      	push	{r7}
 800a242:	b085      	sub	sp, #20
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a250:	2b01      	cmp	r3, #1
 800a252:	d101      	bne.n	800a258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a254:	2302      	movs	r3, #2
 800a256:	e050      	b.n	800a2fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2201      	movs	r2, #1
 800a25c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a27e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68fa      	ldr	r2, [r7, #12]
 800a286:	4313      	orrs	r3, r2
 800a288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a1c      	ldr	r2, [pc, #112]	@ (800a308 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d018      	beq.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a4:	d013      	beq.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4a18      	ldr	r2, [pc, #96]	@ (800a30c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a2ac:	4293      	cmp	r3, r2
 800a2ae:	d00e      	beq.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a16      	ldr	r2, [pc, #88]	@ (800a310 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d009      	beq.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4a15      	ldr	r2, [pc, #84]	@ (800a314 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d004      	beq.n	800a2ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	4a13      	ldr	r2, [pc, #76]	@ (800a318 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d10c      	bne.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a2d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3714      	adds	r7, #20
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	40010000 	.word	0x40010000
 800a30c:	40000400 	.word	0x40000400
 800a310:	40000800 	.word	0x40000800
 800a314:	40000c00 	.word	0x40000c00
 800a318:	40014000 	.word	0x40014000

0800a31c <__cvt>:
 800a31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	ec57 6b10 	vmov	r6, r7, d0
 800a324:	2f00      	cmp	r7, #0
 800a326:	460c      	mov	r4, r1
 800a328:	4619      	mov	r1, r3
 800a32a:	463b      	mov	r3, r7
 800a32c:	bfbb      	ittet	lt
 800a32e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a332:	461f      	movlt	r7, r3
 800a334:	2300      	movge	r3, #0
 800a336:	232d      	movlt	r3, #45	@ 0x2d
 800a338:	700b      	strb	r3, [r1, #0]
 800a33a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a33c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a340:	4691      	mov	r9, r2
 800a342:	f023 0820 	bic.w	r8, r3, #32
 800a346:	bfbc      	itt	lt
 800a348:	4632      	movlt	r2, r6
 800a34a:	4616      	movlt	r6, r2
 800a34c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a350:	d005      	beq.n	800a35e <__cvt+0x42>
 800a352:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a356:	d100      	bne.n	800a35a <__cvt+0x3e>
 800a358:	3401      	adds	r4, #1
 800a35a:	2102      	movs	r1, #2
 800a35c:	e000      	b.n	800a360 <__cvt+0x44>
 800a35e:	2103      	movs	r1, #3
 800a360:	ab03      	add	r3, sp, #12
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	ab02      	add	r3, sp, #8
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	ec47 6b10 	vmov	d0, r6, r7
 800a36c:	4653      	mov	r3, sl
 800a36e:	4622      	mov	r2, r4
 800a370:	f000 fdde 	bl	800af30 <_dtoa_r>
 800a374:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a378:	4605      	mov	r5, r0
 800a37a:	d119      	bne.n	800a3b0 <__cvt+0x94>
 800a37c:	f019 0f01 	tst.w	r9, #1
 800a380:	d00e      	beq.n	800a3a0 <__cvt+0x84>
 800a382:	eb00 0904 	add.w	r9, r0, r4
 800a386:	2200      	movs	r2, #0
 800a388:	2300      	movs	r3, #0
 800a38a:	4630      	mov	r0, r6
 800a38c:	4639      	mov	r1, r7
 800a38e:	f7f6 fba3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a392:	b108      	cbz	r0, 800a398 <__cvt+0x7c>
 800a394:	f8cd 900c 	str.w	r9, [sp, #12]
 800a398:	2230      	movs	r2, #48	@ 0x30
 800a39a:	9b03      	ldr	r3, [sp, #12]
 800a39c:	454b      	cmp	r3, r9
 800a39e:	d31e      	bcc.n	800a3de <__cvt+0xc2>
 800a3a0:	9b03      	ldr	r3, [sp, #12]
 800a3a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3a4:	1b5b      	subs	r3, r3, r5
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	6013      	str	r3, [r2, #0]
 800a3aa:	b004      	add	sp, #16
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a3b4:	eb00 0904 	add.w	r9, r0, r4
 800a3b8:	d1e5      	bne.n	800a386 <__cvt+0x6a>
 800a3ba:	7803      	ldrb	r3, [r0, #0]
 800a3bc:	2b30      	cmp	r3, #48	@ 0x30
 800a3be:	d10a      	bne.n	800a3d6 <__cvt+0xba>
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	4639      	mov	r1, r7
 800a3c8:	f7f6 fb86 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3cc:	b918      	cbnz	r0, 800a3d6 <__cvt+0xba>
 800a3ce:	f1c4 0401 	rsb	r4, r4, #1
 800a3d2:	f8ca 4000 	str.w	r4, [sl]
 800a3d6:	f8da 3000 	ldr.w	r3, [sl]
 800a3da:	4499      	add	r9, r3
 800a3dc:	e7d3      	b.n	800a386 <__cvt+0x6a>
 800a3de:	1c59      	adds	r1, r3, #1
 800a3e0:	9103      	str	r1, [sp, #12]
 800a3e2:	701a      	strb	r2, [r3, #0]
 800a3e4:	e7d9      	b.n	800a39a <__cvt+0x7e>

0800a3e6 <__exponent>:
 800a3e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	bfba      	itte	lt
 800a3ec:	4249      	neglt	r1, r1
 800a3ee:	232d      	movlt	r3, #45	@ 0x2d
 800a3f0:	232b      	movge	r3, #43	@ 0x2b
 800a3f2:	2909      	cmp	r1, #9
 800a3f4:	7002      	strb	r2, [r0, #0]
 800a3f6:	7043      	strb	r3, [r0, #1]
 800a3f8:	dd29      	ble.n	800a44e <__exponent+0x68>
 800a3fa:	f10d 0307 	add.w	r3, sp, #7
 800a3fe:	461d      	mov	r5, r3
 800a400:	270a      	movs	r7, #10
 800a402:	461a      	mov	r2, r3
 800a404:	fbb1 f6f7 	udiv	r6, r1, r7
 800a408:	fb07 1416 	mls	r4, r7, r6, r1
 800a40c:	3430      	adds	r4, #48	@ 0x30
 800a40e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a412:	460c      	mov	r4, r1
 800a414:	2c63      	cmp	r4, #99	@ 0x63
 800a416:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a41a:	4631      	mov	r1, r6
 800a41c:	dcf1      	bgt.n	800a402 <__exponent+0x1c>
 800a41e:	3130      	adds	r1, #48	@ 0x30
 800a420:	1e94      	subs	r4, r2, #2
 800a422:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a426:	1c41      	adds	r1, r0, #1
 800a428:	4623      	mov	r3, r4
 800a42a:	42ab      	cmp	r3, r5
 800a42c:	d30a      	bcc.n	800a444 <__exponent+0x5e>
 800a42e:	f10d 0309 	add.w	r3, sp, #9
 800a432:	1a9b      	subs	r3, r3, r2
 800a434:	42ac      	cmp	r4, r5
 800a436:	bf88      	it	hi
 800a438:	2300      	movhi	r3, #0
 800a43a:	3302      	adds	r3, #2
 800a43c:	4403      	add	r3, r0
 800a43e:	1a18      	subs	r0, r3, r0
 800a440:	b003      	add	sp, #12
 800a442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a444:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a448:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a44c:	e7ed      	b.n	800a42a <__exponent+0x44>
 800a44e:	2330      	movs	r3, #48	@ 0x30
 800a450:	3130      	adds	r1, #48	@ 0x30
 800a452:	7083      	strb	r3, [r0, #2]
 800a454:	70c1      	strb	r1, [r0, #3]
 800a456:	1d03      	adds	r3, r0, #4
 800a458:	e7f1      	b.n	800a43e <__exponent+0x58>
	...

0800a45c <_printf_float>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	b08d      	sub	sp, #52	@ 0x34
 800a462:	460c      	mov	r4, r1
 800a464:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a468:	4616      	mov	r6, r2
 800a46a:	461f      	mov	r7, r3
 800a46c:	4605      	mov	r5, r0
 800a46e:	f000 fc97 	bl	800ada0 <_localeconv_r>
 800a472:	6803      	ldr	r3, [r0, #0]
 800a474:	9304      	str	r3, [sp, #16]
 800a476:	4618      	mov	r0, r3
 800a478:	f7f5 ff02 	bl	8000280 <strlen>
 800a47c:	2300      	movs	r3, #0
 800a47e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a480:	f8d8 3000 	ldr.w	r3, [r8]
 800a484:	9005      	str	r0, [sp, #20]
 800a486:	3307      	adds	r3, #7
 800a488:	f023 0307 	bic.w	r3, r3, #7
 800a48c:	f103 0208 	add.w	r2, r3, #8
 800a490:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a494:	f8d4 b000 	ldr.w	fp, [r4]
 800a498:	f8c8 2000 	str.w	r2, [r8]
 800a49c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a4a4:	9307      	str	r3, [sp, #28]
 800a4a6:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a4ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4b2:	4b9c      	ldr	r3, [pc, #624]	@ (800a724 <_printf_float+0x2c8>)
 800a4b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4b8:	f7f6 fb40 	bl	8000b3c <__aeabi_dcmpun>
 800a4bc:	bb70      	cbnz	r0, 800a51c <_printf_float+0xc0>
 800a4be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4c2:	4b98      	ldr	r3, [pc, #608]	@ (800a724 <_printf_float+0x2c8>)
 800a4c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a4c8:	f7f6 fb1a 	bl	8000b00 <__aeabi_dcmple>
 800a4cc:	bb30      	cbnz	r0, 800a51c <_printf_float+0xc0>
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4640      	mov	r0, r8
 800a4d4:	4649      	mov	r1, r9
 800a4d6:	f7f6 fb09 	bl	8000aec <__aeabi_dcmplt>
 800a4da:	b110      	cbz	r0, 800a4e2 <_printf_float+0x86>
 800a4dc:	232d      	movs	r3, #45	@ 0x2d
 800a4de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4e2:	4a91      	ldr	r2, [pc, #580]	@ (800a728 <_printf_float+0x2cc>)
 800a4e4:	4b91      	ldr	r3, [pc, #580]	@ (800a72c <_printf_float+0x2d0>)
 800a4e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a4ea:	bf94      	ite	ls
 800a4ec:	4690      	movls	r8, r2
 800a4ee:	4698      	movhi	r8, r3
 800a4f0:	2303      	movs	r3, #3
 800a4f2:	6123      	str	r3, [r4, #16]
 800a4f4:	f02b 0304 	bic.w	r3, fp, #4
 800a4f8:	6023      	str	r3, [r4, #0]
 800a4fa:	f04f 0900 	mov.w	r9, #0
 800a4fe:	9700      	str	r7, [sp, #0]
 800a500:	4633      	mov	r3, r6
 800a502:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f9d2 	bl	800a8b0 <_printf_common>
 800a50c:	3001      	adds	r0, #1
 800a50e:	f040 808d 	bne.w	800a62c <_printf_float+0x1d0>
 800a512:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a516:	b00d      	add	sp, #52	@ 0x34
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	4642      	mov	r2, r8
 800a51e:	464b      	mov	r3, r9
 800a520:	4640      	mov	r0, r8
 800a522:	4649      	mov	r1, r9
 800a524:	f7f6 fb0a 	bl	8000b3c <__aeabi_dcmpun>
 800a528:	b140      	cbz	r0, 800a53c <_printf_float+0xe0>
 800a52a:	464b      	mov	r3, r9
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfbc      	itt	lt
 800a530:	232d      	movlt	r3, #45	@ 0x2d
 800a532:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a536:	4a7e      	ldr	r2, [pc, #504]	@ (800a730 <_printf_float+0x2d4>)
 800a538:	4b7e      	ldr	r3, [pc, #504]	@ (800a734 <_printf_float+0x2d8>)
 800a53a:	e7d4      	b.n	800a4e6 <_printf_float+0x8a>
 800a53c:	6863      	ldr	r3, [r4, #4]
 800a53e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a542:	9206      	str	r2, [sp, #24]
 800a544:	1c5a      	adds	r2, r3, #1
 800a546:	d13b      	bne.n	800a5c0 <_printf_float+0x164>
 800a548:	2306      	movs	r3, #6
 800a54a:	6063      	str	r3, [r4, #4]
 800a54c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a550:	2300      	movs	r3, #0
 800a552:	6022      	str	r2, [r4, #0]
 800a554:	9303      	str	r3, [sp, #12]
 800a556:	ab0a      	add	r3, sp, #40	@ 0x28
 800a558:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a55c:	ab09      	add	r3, sp, #36	@ 0x24
 800a55e:	9300      	str	r3, [sp, #0]
 800a560:	6861      	ldr	r1, [r4, #4]
 800a562:	ec49 8b10 	vmov	d0, r8, r9
 800a566:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a56a:	4628      	mov	r0, r5
 800a56c:	f7ff fed6 	bl	800a31c <__cvt>
 800a570:	9b06      	ldr	r3, [sp, #24]
 800a572:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a574:	2b47      	cmp	r3, #71	@ 0x47
 800a576:	4680      	mov	r8, r0
 800a578:	d129      	bne.n	800a5ce <_printf_float+0x172>
 800a57a:	1cc8      	adds	r0, r1, #3
 800a57c:	db02      	blt.n	800a584 <_printf_float+0x128>
 800a57e:	6863      	ldr	r3, [r4, #4]
 800a580:	4299      	cmp	r1, r3
 800a582:	dd41      	ble.n	800a608 <_printf_float+0x1ac>
 800a584:	f1aa 0a02 	sub.w	sl, sl, #2
 800a588:	fa5f fa8a 	uxtb.w	sl, sl
 800a58c:	3901      	subs	r1, #1
 800a58e:	4652      	mov	r2, sl
 800a590:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a594:	9109      	str	r1, [sp, #36]	@ 0x24
 800a596:	f7ff ff26 	bl	800a3e6 <__exponent>
 800a59a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a59c:	1813      	adds	r3, r2, r0
 800a59e:	2a01      	cmp	r2, #1
 800a5a0:	4681      	mov	r9, r0
 800a5a2:	6123      	str	r3, [r4, #16]
 800a5a4:	dc02      	bgt.n	800a5ac <_printf_float+0x150>
 800a5a6:	6822      	ldr	r2, [r4, #0]
 800a5a8:	07d2      	lsls	r2, r2, #31
 800a5aa:	d501      	bpl.n	800a5b0 <_printf_float+0x154>
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d0a2      	beq.n	800a4fe <_printf_float+0xa2>
 800a5b8:	232d      	movs	r3, #45	@ 0x2d
 800a5ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a5be:	e79e      	b.n	800a4fe <_printf_float+0xa2>
 800a5c0:	9a06      	ldr	r2, [sp, #24]
 800a5c2:	2a47      	cmp	r2, #71	@ 0x47
 800a5c4:	d1c2      	bne.n	800a54c <_printf_float+0xf0>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1c0      	bne.n	800a54c <_printf_float+0xf0>
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e7bd      	b.n	800a54a <_printf_float+0xee>
 800a5ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5d2:	d9db      	bls.n	800a58c <_printf_float+0x130>
 800a5d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a5d8:	d118      	bne.n	800a60c <_printf_float+0x1b0>
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	dd0b      	ble.n	800a5f8 <_printf_float+0x19c>
 800a5e0:	6121      	str	r1, [r4, #16]
 800a5e2:	b913      	cbnz	r3, 800a5ea <_printf_float+0x18e>
 800a5e4:	6822      	ldr	r2, [r4, #0]
 800a5e6:	07d0      	lsls	r0, r2, #31
 800a5e8:	d502      	bpl.n	800a5f0 <_printf_float+0x194>
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	440b      	add	r3, r1
 800a5ee:	6123      	str	r3, [r4, #16]
 800a5f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a5f2:	f04f 0900 	mov.w	r9, #0
 800a5f6:	e7db      	b.n	800a5b0 <_printf_float+0x154>
 800a5f8:	b913      	cbnz	r3, 800a600 <_printf_float+0x1a4>
 800a5fa:	6822      	ldr	r2, [r4, #0]
 800a5fc:	07d2      	lsls	r2, r2, #31
 800a5fe:	d501      	bpl.n	800a604 <_printf_float+0x1a8>
 800a600:	3302      	adds	r3, #2
 800a602:	e7f4      	b.n	800a5ee <_printf_float+0x192>
 800a604:	2301      	movs	r3, #1
 800a606:	e7f2      	b.n	800a5ee <_printf_float+0x192>
 800a608:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a60c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a60e:	4299      	cmp	r1, r3
 800a610:	db05      	blt.n	800a61e <_printf_float+0x1c2>
 800a612:	6823      	ldr	r3, [r4, #0]
 800a614:	6121      	str	r1, [r4, #16]
 800a616:	07d8      	lsls	r0, r3, #31
 800a618:	d5ea      	bpl.n	800a5f0 <_printf_float+0x194>
 800a61a:	1c4b      	adds	r3, r1, #1
 800a61c:	e7e7      	b.n	800a5ee <_printf_float+0x192>
 800a61e:	2900      	cmp	r1, #0
 800a620:	bfd4      	ite	le
 800a622:	f1c1 0202 	rsble	r2, r1, #2
 800a626:	2201      	movgt	r2, #1
 800a628:	4413      	add	r3, r2
 800a62a:	e7e0      	b.n	800a5ee <_printf_float+0x192>
 800a62c:	6823      	ldr	r3, [r4, #0]
 800a62e:	055a      	lsls	r2, r3, #21
 800a630:	d407      	bmi.n	800a642 <_printf_float+0x1e6>
 800a632:	6923      	ldr	r3, [r4, #16]
 800a634:	4642      	mov	r2, r8
 800a636:	4631      	mov	r1, r6
 800a638:	4628      	mov	r0, r5
 800a63a:	47b8      	blx	r7
 800a63c:	3001      	adds	r0, #1
 800a63e:	d12b      	bne.n	800a698 <_printf_float+0x23c>
 800a640:	e767      	b.n	800a512 <_printf_float+0xb6>
 800a642:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a646:	f240 80dd 	bls.w	800a804 <_printf_float+0x3a8>
 800a64a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a64e:	2200      	movs	r2, #0
 800a650:	2300      	movs	r3, #0
 800a652:	f7f6 fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 800a656:	2800      	cmp	r0, #0
 800a658:	d033      	beq.n	800a6c2 <_printf_float+0x266>
 800a65a:	4a37      	ldr	r2, [pc, #220]	@ (800a738 <_printf_float+0x2dc>)
 800a65c:	2301      	movs	r3, #1
 800a65e:	4631      	mov	r1, r6
 800a660:	4628      	mov	r0, r5
 800a662:	47b8      	blx	r7
 800a664:	3001      	adds	r0, #1
 800a666:	f43f af54 	beq.w	800a512 <_printf_float+0xb6>
 800a66a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a66e:	4543      	cmp	r3, r8
 800a670:	db02      	blt.n	800a678 <_printf_float+0x21c>
 800a672:	6823      	ldr	r3, [r4, #0]
 800a674:	07d8      	lsls	r0, r3, #31
 800a676:	d50f      	bpl.n	800a698 <_printf_float+0x23c>
 800a678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a67c:	4631      	mov	r1, r6
 800a67e:	4628      	mov	r0, r5
 800a680:	47b8      	blx	r7
 800a682:	3001      	adds	r0, #1
 800a684:	f43f af45 	beq.w	800a512 <_printf_float+0xb6>
 800a688:	f04f 0900 	mov.w	r9, #0
 800a68c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a690:	f104 0a1a 	add.w	sl, r4, #26
 800a694:	45c8      	cmp	r8, r9
 800a696:	dc09      	bgt.n	800a6ac <_printf_float+0x250>
 800a698:	6823      	ldr	r3, [r4, #0]
 800a69a:	079b      	lsls	r3, r3, #30
 800a69c:	f100 8103 	bmi.w	800a8a6 <_printf_float+0x44a>
 800a6a0:	68e0      	ldr	r0, [r4, #12]
 800a6a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a6a4:	4298      	cmp	r0, r3
 800a6a6:	bfb8      	it	lt
 800a6a8:	4618      	movlt	r0, r3
 800a6aa:	e734      	b.n	800a516 <_printf_float+0xba>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4652      	mov	r2, sl
 800a6b0:	4631      	mov	r1, r6
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	47b8      	blx	r7
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	f43f af2b 	beq.w	800a512 <_printf_float+0xb6>
 800a6bc:	f109 0901 	add.w	r9, r9, #1
 800a6c0:	e7e8      	b.n	800a694 <_printf_float+0x238>
 800a6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dc39      	bgt.n	800a73c <_printf_float+0x2e0>
 800a6c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a738 <_printf_float+0x2dc>)
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	4631      	mov	r1, r6
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	47b8      	blx	r7
 800a6d2:	3001      	adds	r0, #1
 800a6d4:	f43f af1d 	beq.w	800a512 <_printf_float+0xb6>
 800a6d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a6dc:	ea59 0303 	orrs.w	r3, r9, r3
 800a6e0:	d102      	bne.n	800a6e8 <_printf_float+0x28c>
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	07d9      	lsls	r1, r3, #31
 800a6e6:	d5d7      	bpl.n	800a698 <_printf_float+0x23c>
 800a6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f43f af0d 	beq.w	800a512 <_printf_float+0xb6>
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	f104 0b1a 	add.w	fp, r4, #26
 800a700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a702:	425b      	negs	r3, r3
 800a704:	4553      	cmp	r3, sl
 800a706:	dc01      	bgt.n	800a70c <_printf_float+0x2b0>
 800a708:	464b      	mov	r3, r9
 800a70a:	e793      	b.n	800a634 <_printf_float+0x1d8>
 800a70c:	2301      	movs	r3, #1
 800a70e:	465a      	mov	r2, fp
 800a710:	4631      	mov	r1, r6
 800a712:	4628      	mov	r0, r5
 800a714:	47b8      	blx	r7
 800a716:	3001      	adds	r0, #1
 800a718:	f43f aefb 	beq.w	800a512 <_printf_float+0xb6>
 800a71c:	f10a 0a01 	add.w	sl, sl, #1
 800a720:	e7ee      	b.n	800a700 <_printf_float+0x2a4>
 800a722:	bf00      	nop
 800a724:	7fefffff 	.word	0x7fefffff
 800a728:	080219d4 	.word	0x080219d4
 800a72c:	080219d8 	.word	0x080219d8
 800a730:	080219dc 	.word	0x080219dc
 800a734:	080219e0 	.word	0x080219e0
 800a738:	080219e4 	.word	0x080219e4
 800a73c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a73e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a742:	4553      	cmp	r3, sl
 800a744:	bfa8      	it	ge
 800a746:	4653      	movge	r3, sl
 800a748:	2b00      	cmp	r3, #0
 800a74a:	4699      	mov	r9, r3
 800a74c:	dc36      	bgt.n	800a7bc <_printf_float+0x360>
 800a74e:	f04f 0b00 	mov.w	fp, #0
 800a752:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a756:	f104 021a 	add.w	r2, r4, #26
 800a75a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a75c:	9306      	str	r3, [sp, #24]
 800a75e:	eba3 0309 	sub.w	r3, r3, r9
 800a762:	455b      	cmp	r3, fp
 800a764:	dc31      	bgt.n	800a7ca <_printf_float+0x36e>
 800a766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a768:	459a      	cmp	sl, r3
 800a76a:	dc3a      	bgt.n	800a7e2 <_printf_float+0x386>
 800a76c:	6823      	ldr	r3, [r4, #0]
 800a76e:	07da      	lsls	r2, r3, #31
 800a770:	d437      	bmi.n	800a7e2 <_printf_float+0x386>
 800a772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a774:	ebaa 0903 	sub.w	r9, sl, r3
 800a778:	9b06      	ldr	r3, [sp, #24]
 800a77a:	ebaa 0303 	sub.w	r3, sl, r3
 800a77e:	4599      	cmp	r9, r3
 800a780:	bfa8      	it	ge
 800a782:	4699      	movge	r9, r3
 800a784:	f1b9 0f00 	cmp.w	r9, #0
 800a788:	dc33      	bgt.n	800a7f2 <_printf_float+0x396>
 800a78a:	f04f 0800 	mov.w	r8, #0
 800a78e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a792:	f104 0b1a 	add.w	fp, r4, #26
 800a796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a798:	ebaa 0303 	sub.w	r3, sl, r3
 800a79c:	eba3 0309 	sub.w	r3, r3, r9
 800a7a0:	4543      	cmp	r3, r8
 800a7a2:	f77f af79 	ble.w	800a698 <_printf_float+0x23c>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	465a      	mov	r2, fp
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	4628      	mov	r0, r5
 800a7ae:	47b8      	blx	r7
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	f43f aeae 	beq.w	800a512 <_printf_float+0xb6>
 800a7b6:	f108 0801 	add.w	r8, r8, #1
 800a7ba:	e7ec      	b.n	800a796 <_printf_float+0x33a>
 800a7bc:	4642      	mov	r2, r8
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4628      	mov	r0, r5
 800a7c2:	47b8      	blx	r7
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d1c2      	bne.n	800a74e <_printf_float+0x2f2>
 800a7c8:	e6a3      	b.n	800a512 <_printf_float+0xb6>
 800a7ca:	2301      	movs	r3, #1
 800a7cc:	4631      	mov	r1, r6
 800a7ce:	4628      	mov	r0, r5
 800a7d0:	9206      	str	r2, [sp, #24]
 800a7d2:	47b8      	blx	r7
 800a7d4:	3001      	adds	r0, #1
 800a7d6:	f43f ae9c 	beq.w	800a512 <_printf_float+0xb6>
 800a7da:	9a06      	ldr	r2, [sp, #24]
 800a7dc:	f10b 0b01 	add.w	fp, fp, #1
 800a7e0:	e7bb      	b.n	800a75a <_printf_float+0x2fe>
 800a7e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d1c0      	bne.n	800a772 <_printf_float+0x316>
 800a7f0:	e68f      	b.n	800a512 <_printf_float+0xb6>
 800a7f2:	9a06      	ldr	r2, [sp, #24]
 800a7f4:	464b      	mov	r3, r9
 800a7f6:	4442      	add	r2, r8
 800a7f8:	4631      	mov	r1, r6
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	47b8      	blx	r7
 800a7fe:	3001      	adds	r0, #1
 800a800:	d1c3      	bne.n	800a78a <_printf_float+0x32e>
 800a802:	e686      	b.n	800a512 <_printf_float+0xb6>
 800a804:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a808:	f1ba 0f01 	cmp.w	sl, #1
 800a80c:	dc01      	bgt.n	800a812 <_printf_float+0x3b6>
 800a80e:	07db      	lsls	r3, r3, #31
 800a810:	d536      	bpl.n	800a880 <_printf_float+0x424>
 800a812:	2301      	movs	r3, #1
 800a814:	4642      	mov	r2, r8
 800a816:	4631      	mov	r1, r6
 800a818:	4628      	mov	r0, r5
 800a81a:	47b8      	blx	r7
 800a81c:	3001      	adds	r0, #1
 800a81e:	f43f ae78 	beq.w	800a512 <_printf_float+0xb6>
 800a822:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	47b8      	blx	r7
 800a82c:	3001      	adds	r0, #1
 800a82e:	f43f ae70 	beq.w	800a512 <_printf_float+0xb6>
 800a832:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a836:	2200      	movs	r2, #0
 800a838:	2300      	movs	r3, #0
 800a83a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a83e:	f7f6 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a842:	b9c0      	cbnz	r0, 800a876 <_printf_float+0x41a>
 800a844:	4653      	mov	r3, sl
 800a846:	f108 0201 	add.w	r2, r8, #1
 800a84a:	4631      	mov	r1, r6
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b8      	blx	r7
 800a850:	3001      	adds	r0, #1
 800a852:	d10c      	bne.n	800a86e <_printf_float+0x412>
 800a854:	e65d      	b.n	800a512 <_printf_float+0xb6>
 800a856:	2301      	movs	r3, #1
 800a858:	465a      	mov	r2, fp
 800a85a:	4631      	mov	r1, r6
 800a85c:	4628      	mov	r0, r5
 800a85e:	47b8      	blx	r7
 800a860:	3001      	adds	r0, #1
 800a862:	f43f ae56 	beq.w	800a512 <_printf_float+0xb6>
 800a866:	f108 0801 	add.w	r8, r8, #1
 800a86a:	45d0      	cmp	r8, sl
 800a86c:	dbf3      	blt.n	800a856 <_printf_float+0x3fa>
 800a86e:	464b      	mov	r3, r9
 800a870:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a874:	e6df      	b.n	800a636 <_printf_float+0x1da>
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	f104 0b1a 	add.w	fp, r4, #26
 800a87e:	e7f4      	b.n	800a86a <_printf_float+0x40e>
 800a880:	2301      	movs	r3, #1
 800a882:	4642      	mov	r2, r8
 800a884:	e7e1      	b.n	800a84a <_printf_float+0x3ee>
 800a886:	2301      	movs	r3, #1
 800a888:	464a      	mov	r2, r9
 800a88a:	4631      	mov	r1, r6
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b8      	blx	r7
 800a890:	3001      	adds	r0, #1
 800a892:	f43f ae3e 	beq.w	800a512 <_printf_float+0xb6>
 800a896:	f108 0801 	add.w	r8, r8, #1
 800a89a:	68e3      	ldr	r3, [r4, #12]
 800a89c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a89e:	1a5b      	subs	r3, r3, r1
 800a8a0:	4543      	cmp	r3, r8
 800a8a2:	dcf0      	bgt.n	800a886 <_printf_float+0x42a>
 800a8a4:	e6fc      	b.n	800a6a0 <_printf_float+0x244>
 800a8a6:	f04f 0800 	mov.w	r8, #0
 800a8aa:	f104 0919 	add.w	r9, r4, #25
 800a8ae:	e7f4      	b.n	800a89a <_printf_float+0x43e>

0800a8b0 <_printf_common>:
 800a8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8b4:	4616      	mov	r6, r2
 800a8b6:	4698      	mov	r8, r3
 800a8b8:	688a      	ldr	r2, [r1, #8]
 800a8ba:	690b      	ldr	r3, [r1, #16]
 800a8bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	bfb8      	it	lt
 800a8c4:	4613      	movlt	r3, r2
 800a8c6:	6033      	str	r3, [r6, #0]
 800a8c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	b10a      	cbz	r2, 800a8d6 <_printf_common+0x26>
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	6033      	str	r3, [r6, #0]
 800a8d6:	6823      	ldr	r3, [r4, #0]
 800a8d8:	0699      	lsls	r1, r3, #26
 800a8da:	bf42      	ittt	mi
 800a8dc:	6833      	ldrmi	r3, [r6, #0]
 800a8de:	3302      	addmi	r3, #2
 800a8e0:	6033      	strmi	r3, [r6, #0]
 800a8e2:	6825      	ldr	r5, [r4, #0]
 800a8e4:	f015 0506 	ands.w	r5, r5, #6
 800a8e8:	d106      	bne.n	800a8f8 <_printf_common+0x48>
 800a8ea:	f104 0a19 	add.w	sl, r4, #25
 800a8ee:	68e3      	ldr	r3, [r4, #12]
 800a8f0:	6832      	ldr	r2, [r6, #0]
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	42ab      	cmp	r3, r5
 800a8f6:	dc26      	bgt.n	800a946 <_printf_common+0x96>
 800a8f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8fc:	6822      	ldr	r2, [r4, #0]
 800a8fe:	3b00      	subs	r3, #0
 800a900:	bf18      	it	ne
 800a902:	2301      	movne	r3, #1
 800a904:	0692      	lsls	r2, r2, #26
 800a906:	d42b      	bmi.n	800a960 <_printf_common+0xb0>
 800a908:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a90c:	4641      	mov	r1, r8
 800a90e:	4638      	mov	r0, r7
 800a910:	47c8      	blx	r9
 800a912:	3001      	adds	r0, #1
 800a914:	d01e      	beq.n	800a954 <_printf_common+0xa4>
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	6922      	ldr	r2, [r4, #16]
 800a91a:	f003 0306 	and.w	r3, r3, #6
 800a91e:	2b04      	cmp	r3, #4
 800a920:	bf02      	ittt	eq
 800a922:	68e5      	ldreq	r5, [r4, #12]
 800a924:	6833      	ldreq	r3, [r6, #0]
 800a926:	1aed      	subeq	r5, r5, r3
 800a928:	68a3      	ldr	r3, [r4, #8]
 800a92a:	bf0c      	ite	eq
 800a92c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a930:	2500      	movne	r5, #0
 800a932:	4293      	cmp	r3, r2
 800a934:	bfc4      	itt	gt
 800a936:	1a9b      	subgt	r3, r3, r2
 800a938:	18ed      	addgt	r5, r5, r3
 800a93a:	2600      	movs	r6, #0
 800a93c:	341a      	adds	r4, #26
 800a93e:	42b5      	cmp	r5, r6
 800a940:	d11a      	bne.n	800a978 <_printf_common+0xc8>
 800a942:	2000      	movs	r0, #0
 800a944:	e008      	b.n	800a958 <_printf_common+0xa8>
 800a946:	2301      	movs	r3, #1
 800a948:	4652      	mov	r2, sl
 800a94a:	4641      	mov	r1, r8
 800a94c:	4638      	mov	r0, r7
 800a94e:	47c8      	blx	r9
 800a950:	3001      	adds	r0, #1
 800a952:	d103      	bne.n	800a95c <_printf_common+0xac>
 800a954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a95c:	3501      	adds	r5, #1
 800a95e:	e7c6      	b.n	800a8ee <_printf_common+0x3e>
 800a960:	18e1      	adds	r1, r4, r3
 800a962:	1c5a      	adds	r2, r3, #1
 800a964:	2030      	movs	r0, #48	@ 0x30
 800a966:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a96a:	4422      	add	r2, r4
 800a96c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a970:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a974:	3302      	adds	r3, #2
 800a976:	e7c7      	b.n	800a908 <_printf_common+0x58>
 800a978:	2301      	movs	r3, #1
 800a97a:	4622      	mov	r2, r4
 800a97c:	4641      	mov	r1, r8
 800a97e:	4638      	mov	r0, r7
 800a980:	47c8      	blx	r9
 800a982:	3001      	adds	r0, #1
 800a984:	d0e6      	beq.n	800a954 <_printf_common+0xa4>
 800a986:	3601      	adds	r6, #1
 800a988:	e7d9      	b.n	800a93e <_printf_common+0x8e>
	...

0800a98c <_printf_i>:
 800a98c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a990:	7e0f      	ldrb	r7, [r1, #24]
 800a992:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a994:	2f78      	cmp	r7, #120	@ 0x78
 800a996:	4691      	mov	r9, r2
 800a998:	4680      	mov	r8, r0
 800a99a:	460c      	mov	r4, r1
 800a99c:	469a      	mov	sl, r3
 800a99e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a9a2:	d807      	bhi.n	800a9b4 <_printf_i+0x28>
 800a9a4:	2f62      	cmp	r7, #98	@ 0x62
 800a9a6:	d80a      	bhi.n	800a9be <_printf_i+0x32>
 800a9a8:	2f00      	cmp	r7, #0
 800a9aa:	f000 80d2 	beq.w	800ab52 <_printf_i+0x1c6>
 800a9ae:	2f58      	cmp	r7, #88	@ 0x58
 800a9b0:	f000 80b9 	beq.w	800ab26 <_printf_i+0x19a>
 800a9b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a9bc:	e03a      	b.n	800aa34 <_printf_i+0xa8>
 800a9be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a9c2:	2b15      	cmp	r3, #21
 800a9c4:	d8f6      	bhi.n	800a9b4 <_printf_i+0x28>
 800a9c6:	a101      	add	r1, pc, #4	@ (adr r1, 800a9cc <_printf_i+0x40>)
 800a9c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9cc:	0800aa25 	.word	0x0800aa25
 800a9d0:	0800aa39 	.word	0x0800aa39
 800a9d4:	0800a9b5 	.word	0x0800a9b5
 800a9d8:	0800a9b5 	.word	0x0800a9b5
 800a9dc:	0800a9b5 	.word	0x0800a9b5
 800a9e0:	0800a9b5 	.word	0x0800a9b5
 800a9e4:	0800aa39 	.word	0x0800aa39
 800a9e8:	0800a9b5 	.word	0x0800a9b5
 800a9ec:	0800a9b5 	.word	0x0800a9b5
 800a9f0:	0800a9b5 	.word	0x0800a9b5
 800a9f4:	0800a9b5 	.word	0x0800a9b5
 800a9f8:	0800ab39 	.word	0x0800ab39
 800a9fc:	0800aa63 	.word	0x0800aa63
 800aa00:	0800aaf3 	.word	0x0800aaf3
 800aa04:	0800a9b5 	.word	0x0800a9b5
 800aa08:	0800a9b5 	.word	0x0800a9b5
 800aa0c:	0800ab5b 	.word	0x0800ab5b
 800aa10:	0800a9b5 	.word	0x0800a9b5
 800aa14:	0800aa63 	.word	0x0800aa63
 800aa18:	0800a9b5 	.word	0x0800a9b5
 800aa1c:	0800a9b5 	.word	0x0800a9b5
 800aa20:	0800aafb 	.word	0x0800aafb
 800aa24:	6833      	ldr	r3, [r6, #0]
 800aa26:	1d1a      	adds	r2, r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	6032      	str	r2, [r6, #0]
 800aa2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aa30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aa34:	2301      	movs	r3, #1
 800aa36:	e09d      	b.n	800ab74 <_printf_i+0x1e8>
 800aa38:	6833      	ldr	r3, [r6, #0]
 800aa3a:	6820      	ldr	r0, [r4, #0]
 800aa3c:	1d19      	adds	r1, r3, #4
 800aa3e:	6031      	str	r1, [r6, #0]
 800aa40:	0606      	lsls	r6, r0, #24
 800aa42:	d501      	bpl.n	800aa48 <_printf_i+0xbc>
 800aa44:	681d      	ldr	r5, [r3, #0]
 800aa46:	e003      	b.n	800aa50 <_printf_i+0xc4>
 800aa48:	0645      	lsls	r5, r0, #25
 800aa4a:	d5fb      	bpl.n	800aa44 <_printf_i+0xb8>
 800aa4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa50:	2d00      	cmp	r5, #0
 800aa52:	da03      	bge.n	800aa5c <_printf_i+0xd0>
 800aa54:	232d      	movs	r3, #45	@ 0x2d
 800aa56:	426d      	negs	r5, r5
 800aa58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa5c:	4859      	ldr	r0, [pc, #356]	@ (800abc4 <_printf_i+0x238>)
 800aa5e:	230a      	movs	r3, #10
 800aa60:	e011      	b.n	800aa86 <_printf_i+0xfa>
 800aa62:	6821      	ldr	r1, [r4, #0]
 800aa64:	6833      	ldr	r3, [r6, #0]
 800aa66:	0608      	lsls	r0, r1, #24
 800aa68:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa6c:	d402      	bmi.n	800aa74 <_printf_i+0xe8>
 800aa6e:	0649      	lsls	r1, r1, #25
 800aa70:	bf48      	it	mi
 800aa72:	b2ad      	uxthmi	r5, r5
 800aa74:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa76:	4853      	ldr	r0, [pc, #332]	@ (800abc4 <_printf_i+0x238>)
 800aa78:	6033      	str	r3, [r6, #0]
 800aa7a:	bf14      	ite	ne
 800aa7c:	230a      	movne	r3, #10
 800aa7e:	2308      	moveq	r3, #8
 800aa80:	2100      	movs	r1, #0
 800aa82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa86:	6866      	ldr	r6, [r4, #4]
 800aa88:	60a6      	str	r6, [r4, #8]
 800aa8a:	2e00      	cmp	r6, #0
 800aa8c:	bfa2      	ittt	ge
 800aa8e:	6821      	ldrge	r1, [r4, #0]
 800aa90:	f021 0104 	bicge.w	r1, r1, #4
 800aa94:	6021      	strge	r1, [r4, #0]
 800aa96:	b90d      	cbnz	r5, 800aa9c <_printf_i+0x110>
 800aa98:	2e00      	cmp	r6, #0
 800aa9a:	d04b      	beq.n	800ab34 <_printf_i+0x1a8>
 800aa9c:	4616      	mov	r6, r2
 800aa9e:	fbb5 f1f3 	udiv	r1, r5, r3
 800aaa2:	fb03 5711 	mls	r7, r3, r1, r5
 800aaa6:	5dc7      	ldrb	r7, [r0, r7]
 800aaa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aaac:	462f      	mov	r7, r5
 800aaae:	42bb      	cmp	r3, r7
 800aab0:	460d      	mov	r5, r1
 800aab2:	d9f4      	bls.n	800aa9e <_printf_i+0x112>
 800aab4:	2b08      	cmp	r3, #8
 800aab6:	d10b      	bne.n	800aad0 <_printf_i+0x144>
 800aab8:	6823      	ldr	r3, [r4, #0]
 800aaba:	07df      	lsls	r7, r3, #31
 800aabc:	d508      	bpl.n	800aad0 <_printf_i+0x144>
 800aabe:	6923      	ldr	r3, [r4, #16]
 800aac0:	6861      	ldr	r1, [r4, #4]
 800aac2:	4299      	cmp	r1, r3
 800aac4:	bfde      	ittt	le
 800aac6:	2330      	movle	r3, #48	@ 0x30
 800aac8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aacc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aad0:	1b92      	subs	r2, r2, r6
 800aad2:	6122      	str	r2, [r4, #16]
 800aad4:	f8cd a000 	str.w	sl, [sp]
 800aad8:	464b      	mov	r3, r9
 800aada:	aa03      	add	r2, sp, #12
 800aadc:	4621      	mov	r1, r4
 800aade:	4640      	mov	r0, r8
 800aae0:	f7ff fee6 	bl	800a8b0 <_printf_common>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d14a      	bne.n	800ab7e <_printf_i+0x1f2>
 800aae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aaec:	b004      	add	sp, #16
 800aaee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	f043 0320 	orr.w	r3, r3, #32
 800aaf8:	6023      	str	r3, [r4, #0]
 800aafa:	4833      	ldr	r0, [pc, #204]	@ (800abc8 <_printf_i+0x23c>)
 800aafc:	2778      	movs	r7, #120	@ 0x78
 800aafe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ab02:	6823      	ldr	r3, [r4, #0]
 800ab04:	6831      	ldr	r1, [r6, #0]
 800ab06:	061f      	lsls	r7, r3, #24
 800ab08:	f851 5b04 	ldr.w	r5, [r1], #4
 800ab0c:	d402      	bmi.n	800ab14 <_printf_i+0x188>
 800ab0e:	065f      	lsls	r7, r3, #25
 800ab10:	bf48      	it	mi
 800ab12:	b2ad      	uxthmi	r5, r5
 800ab14:	6031      	str	r1, [r6, #0]
 800ab16:	07d9      	lsls	r1, r3, #31
 800ab18:	bf44      	itt	mi
 800ab1a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab1e:	6023      	strmi	r3, [r4, #0]
 800ab20:	b11d      	cbz	r5, 800ab2a <_printf_i+0x19e>
 800ab22:	2310      	movs	r3, #16
 800ab24:	e7ac      	b.n	800aa80 <_printf_i+0xf4>
 800ab26:	4827      	ldr	r0, [pc, #156]	@ (800abc4 <_printf_i+0x238>)
 800ab28:	e7e9      	b.n	800aafe <_printf_i+0x172>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	f023 0320 	bic.w	r3, r3, #32
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	e7f6      	b.n	800ab22 <_printf_i+0x196>
 800ab34:	4616      	mov	r6, r2
 800ab36:	e7bd      	b.n	800aab4 <_printf_i+0x128>
 800ab38:	6833      	ldr	r3, [r6, #0]
 800ab3a:	6825      	ldr	r5, [r4, #0]
 800ab3c:	6961      	ldr	r1, [r4, #20]
 800ab3e:	1d18      	adds	r0, r3, #4
 800ab40:	6030      	str	r0, [r6, #0]
 800ab42:	062e      	lsls	r6, r5, #24
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	d501      	bpl.n	800ab4c <_printf_i+0x1c0>
 800ab48:	6019      	str	r1, [r3, #0]
 800ab4a:	e002      	b.n	800ab52 <_printf_i+0x1c6>
 800ab4c:	0668      	lsls	r0, r5, #25
 800ab4e:	d5fb      	bpl.n	800ab48 <_printf_i+0x1bc>
 800ab50:	8019      	strh	r1, [r3, #0]
 800ab52:	2300      	movs	r3, #0
 800ab54:	6123      	str	r3, [r4, #16]
 800ab56:	4616      	mov	r6, r2
 800ab58:	e7bc      	b.n	800aad4 <_printf_i+0x148>
 800ab5a:	6833      	ldr	r3, [r6, #0]
 800ab5c:	1d1a      	adds	r2, r3, #4
 800ab5e:	6032      	str	r2, [r6, #0]
 800ab60:	681e      	ldr	r6, [r3, #0]
 800ab62:	6862      	ldr	r2, [r4, #4]
 800ab64:	2100      	movs	r1, #0
 800ab66:	4630      	mov	r0, r6
 800ab68:	f7f5 fb3a 	bl	80001e0 <memchr>
 800ab6c:	b108      	cbz	r0, 800ab72 <_printf_i+0x1e6>
 800ab6e:	1b80      	subs	r0, r0, r6
 800ab70:	6060      	str	r0, [r4, #4]
 800ab72:	6863      	ldr	r3, [r4, #4]
 800ab74:	6123      	str	r3, [r4, #16]
 800ab76:	2300      	movs	r3, #0
 800ab78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab7c:	e7aa      	b.n	800aad4 <_printf_i+0x148>
 800ab7e:	6923      	ldr	r3, [r4, #16]
 800ab80:	4632      	mov	r2, r6
 800ab82:	4649      	mov	r1, r9
 800ab84:	4640      	mov	r0, r8
 800ab86:	47d0      	blx	sl
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d0ad      	beq.n	800aae8 <_printf_i+0x15c>
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	079b      	lsls	r3, r3, #30
 800ab90:	d413      	bmi.n	800abba <_printf_i+0x22e>
 800ab92:	68e0      	ldr	r0, [r4, #12]
 800ab94:	9b03      	ldr	r3, [sp, #12]
 800ab96:	4298      	cmp	r0, r3
 800ab98:	bfb8      	it	lt
 800ab9a:	4618      	movlt	r0, r3
 800ab9c:	e7a6      	b.n	800aaec <_printf_i+0x160>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	4632      	mov	r2, r6
 800aba2:	4649      	mov	r1, r9
 800aba4:	4640      	mov	r0, r8
 800aba6:	47d0      	blx	sl
 800aba8:	3001      	adds	r0, #1
 800abaa:	d09d      	beq.n	800aae8 <_printf_i+0x15c>
 800abac:	3501      	adds	r5, #1
 800abae:	68e3      	ldr	r3, [r4, #12]
 800abb0:	9903      	ldr	r1, [sp, #12]
 800abb2:	1a5b      	subs	r3, r3, r1
 800abb4:	42ab      	cmp	r3, r5
 800abb6:	dcf2      	bgt.n	800ab9e <_printf_i+0x212>
 800abb8:	e7eb      	b.n	800ab92 <_printf_i+0x206>
 800abba:	2500      	movs	r5, #0
 800abbc:	f104 0619 	add.w	r6, r4, #25
 800abc0:	e7f5      	b.n	800abae <_printf_i+0x222>
 800abc2:	bf00      	nop
 800abc4:	080219e6 	.word	0x080219e6
 800abc8:	080219f7 	.word	0x080219f7

0800abcc <siprintf>:
 800abcc:	b40e      	push	{r1, r2, r3}
 800abce:	b500      	push	{lr}
 800abd0:	b09c      	sub	sp, #112	@ 0x70
 800abd2:	ab1d      	add	r3, sp, #116	@ 0x74
 800abd4:	9002      	str	r0, [sp, #8]
 800abd6:	9006      	str	r0, [sp, #24]
 800abd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800abdc:	4809      	ldr	r0, [pc, #36]	@ (800ac04 <siprintf+0x38>)
 800abde:	9107      	str	r1, [sp, #28]
 800abe0:	9104      	str	r1, [sp, #16]
 800abe2:	4909      	ldr	r1, [pc, #36]	@ (800ac08 <siprintf+0x3c>)
 800abe4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abe8:	9105      	str	r1, [sp, #20]
 800abea:	6800      	ldr	r0, [r0, #0]
 800abec:	9301      	str	r3, [sp, #4]
 800abee:	a902      	add	r1, sp, #8
 800abf0:	f000 ffbe 	bl	800bb70 <_svfiprintf_r>
 800abf4:	9b02      	ldr	r3, [sp, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	b01c      	add	sp, #112	@ 0x70
 800abfc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac00:	b003      	add	sp, #12
 800ac02:	4770      	bx	lr
 800ac04:	20000030 	.word	0x20000030
 800ac08:	ffff0208 	.word	0xffff0208

0800ac0c <std>:
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	b510      	push	{r4, lr}
 800ac10:	4604      	mov	r4, r0
 800ac12:	e9c0 3300 	strd	r3, r3, [r0]
 800ac16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac1a:	6083      	str	r3, [r0, #8]
 800ac1c:	8181      	strh	r1, [r0, #12]
 800ac1e:	6643      	str	r3, [r0, #100]	@ 0x64
 800ac20:	81c2      	strh	r2, [r0, #14]
 800ac22:	6183      	str	r3, [r0, #24]
 800ac24:	4619      	mov	r1, r3
 800ac26:	2208      	movs	r2, #8
 800ac28:	305c      	adds	r0, #92	@ 0x5c
 800ac2a:	f000 f8b1 	bl	800ad90 <memset>
 800ac2e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac64 <std+0x58>)
 800ac30:	6263      	str	r3, [r4, #36]	@ 0x24
 800ac32:	4b0d      	ldr	r3, [pc, #52]	@ (800ac68 <std+0x5c>)
 800ac34:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ac36:	4b0d      	ldr	r3, [pc, #52]	@ (800ac6c <std+0x60>)
 800ac38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac3a:	4b0d      	ldr	r3, [pc, #52]	@ (800ac70 <std+0x64>)
 800ac3c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ac3e:	4b0d      	ldr	r3, [pc, #52]	@ (800ac74 <std+0x68>)
 800ac40:	6224      	str	r4, [r4, #32]
 800ac42:	429c      	cmp	r4, r3
 800ac44:	d006      	beq.n	800ac54 <std+0x48>
 800ac46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ac4a:	4294      	cmp	r4, r2
 800ac4c:	d002      	beq.n	800ac54 <std+0x48>
 800ac4e:	33d0      	adds	r3, #208	@ 0xd0
 800ac50:	429c      	cmp	r4, r3
 800ac52:	d105      	bne.n	800ac60 <std+0x54>
 800ac54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac5c:	f000 b8ce 	b.w	800adfc <__retarget_lock_init_recursive>
 800ac60:	bd10      	pop	{r4, pc}
 800ac62:	bf00      	nop
 800ac64:	0800c731 	.word	0x0800c731
 800ac68:	0800c753 	.word	0x0800c753
 800ac6c:	0800c78b 	.word	0x0800c78b
 800ac70:	0800c7af 	.word	0x0800c7af
 800ac74:	200055e4 	.word	0x200055e4

0800ac78 <stdio_exit_handler>:
 800ac78:	4a02      	ldr	r2, [pc, #8]	@ (800ac84 <stdio_exit_handler+0xc>)
 800ac7a:	4903      	ldr	r1, [pc, #12]	@ (800ac88 <stdio_exit_handler+0x10>)
 800ac7c:	4803      	ldr	r0, [pc, #12]	@ (800ac8c <stdio_exit_handler+0x14>)
 800ac7e:	f000 b869 	b.w	800ad54 <_fwalk_sglue>
 800ac82:	bf00      	nop
 800ac84:	20000024 	.word	0x20000024
 800ac88:	0800bfc5 	.word	0x0800bfc5
 800ac8c:	20000034 	.word	0x20000034

0800ac90 <cleanup_stdio>:
 800ac90:	6841      	ldr	r1, [r0, #4]
 800ac92:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <cleanup_stdio+0x34>)
 800ac94:	4299      	cmp	r1, r3
 800ac96:	b510      	push	{r4, lr}
 800ac98:	4604      	mov	r4, r0
 800ac9a:	d001      	beq.n	800aca0 <cleanup_stdio+0x10>
 800ac9c:	f001 f992 	bl	800bfc4 <_fflush_r>
 800aca0:	68a1      	ldr	r1, [r4, #8]
 800aca2:	4b09      	ldr	r3, [pc, #36]	@ (800acc8 <cleanup_stdio+0x38>)
 800aca4:	4299      	cmp	r1, r3
 800aca6:	d002      	beq.n	800acae <cleanup_stdio+0x1e>
 800aca8:	4620      	mov	r0, r4
 800acaa:	f001 f98b 	bl	800bfc4 <_fflush_r>
 800acae:	68e1      	ldr	r1, [r4, #12]
 800acb0:	4b06      	ldr	r3, [pc, #24]	@ (800accc <cleanup_stdio+0x3c>)
 800acb2:	4299      	cmp	r1, r3
 800acb4:	d004      	beq.n	800acc0 <cleanup_stdio+0x30>
 800acb6:	4620      	mov	r0, r4
 800acb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acbc:	f001 b982 	b.w	800bfc4 <_fflush_r>
 800acc0:	bd10      	pop	{r4, pc}
 800acc2:	bf00      	nop
 800acc4:	200055e4 	.word	0x200055e4
 800acc8:	2000564c 	.word	0x2000564c
 800accc:	200056b4 	.word	0x200056b4

0800acd0 <global_stdio_init.part.0>:
 800acd0:	b510      	push	{r4, lr}
 800acd2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad00 <global_stdio_init.part.0+0x30>)
 800acd4:	4c0b      	ldr	r4, [pc, #44]	@ (800ad04 <global_stdio_init.part.0+0x34>)
 800acd6:	4a0c      	ldr	r2, [pc, #48]	@ (800ad08 <global_stdio_init.part.0+0x38>)
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	4620      	mov	r0, r4
 800acdc:	2200      	movs	r2, #0
 800acde:	2104      	movs	r1, #4
 800ace0:	f7ff ff94 	bl	800ac0c <std>
 800ace4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ace8:	2201      	movs	r2, #1
 800acea:	2109      	movs	r1, #9
 800acec:	f7ff ff8e 	bl	800ac0c <std>
 800acf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800acf4:	2202      	movs	r2, #2
 800acf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acfa:	2112      	movs	r1, #18
 800acfc:	f7ff bf86 	b.w	800ac0c <std>
 800ad00:	2000571c 	.word	0x2000571c
 800ad04:	200055e4 	.word	0x200055e4
 800ad08:	0800ac79 	.word	0x0800ac79

0800ad0c <__sfp_lock_acquire>:
 800ad0c:	4801      	ldr	r0, [pc, #4]	@ (800ad14 <__sfp_lock_acquire+0x8>)
 800ad0e:	f000 b876 	b.w	800adfe <__retarget_lock_acquire_recursive>
 800ad12:	bf00      	nop
 800ad14:	20005721 	.word	0x20005721

0800ad18 <__sfp_lock_release>:
 800ad18:	4801      	ldr	r0, [pc, #4]	@ (800ad20 <__sfp_lock_release+0x8>)
 800ad1a:	f000 b871 	b.w	800ae00 <__retarget_lock_release_recursive>
 800ad1e:	bf00      	nop
 800ad20:	20005721 	.word	0x20005721

0800ad24 <__sinit>:
 800ad24:	b510      	push	{r4, lr}
 800ad26:	4604      	mov	r4, r0
 800ad28:	f7ff fff0 	bl	800ad0c <__sfp_lock_acquire>
 800ad2c:	6a23      	ldr	r3, [r4, #32]
 800ad2e:	b11b      	cbz	r3, 800ad38 <__sinit+0x14>
 800ad30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad34:	f7ff bff0 	b.w	800ad18 <__sfp_lock_release>
 800ad38:	4b04      	ldr	r3, [pc, #16]	@ (800ad4c <__sinit+0x28>)
 800ad3a:	6223      	str	r3, [r4, #32]
 800ad3c:	4b04      	ldr	r3, [pc, #16]	@ (800ad50 <__sinit+0x2c>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d1f5      	bne.n	800ad30 <__sinit+0xc>
 800ad44:	f7ff ffc4 	bl	800acd0 <global_stdio_init.part.0>
 800ad48:	e7f2      	b.n	800ad30 <__sinit+0xc>
 800ad4a:	bf00      	nop
 800ad4c:	0800ac91 	.word	0x0800ac91
 800ad50:	2000571c 	.word	0x2000571c

0800ad54 <_fwalk_sglue>:
 800ad54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad58:	4607      	mov	r7, r0
 800ad5a:	4688      	mov	r8, r1
 800ad5c:	4614      	mov	r4, r2
 800ad5e:	2600      	movs	r6, #0
 800ad60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad64:	f1b9 0901 	subs.w	r9, r9, #1
 800ad68:	d505      	bpl.n	800ad76 <_fwalk_sglue+0x22>
 800ad6a:	6824      	ldr	r4, [r4, #0]
 800ad6c:	2c00      	cmp	r4, #0
 800ad6e:	d1f7      	bne.n	800ad60 <_fwalk_sglue+0xc>
 800ad70:	4630      	mov	r0, r6
 800ad72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad76:	89ab      	ldrh	r3, [r5, #12]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d907      	bls.n	800ad8c <_fwalk_sglue+0x38>
 800ad7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad80:	3301      	adds	r3, #1
 800ad82:	d003      	beq.n	800ad8c <_fwalk_sglue+0x38>
 800ad84:	4629      	mov	r1, r5
 800ad86:	4638      	mov	r0, r7
 800ad88:	47c0      	blx	r8
 800ad8a:	4306      	orrs	r6, r0
 800ad8c:	3568      	adds	r5, #104	@ 0x68
 800ad8e:	e7e9      	b.n	800ad64 <_fwalk_sglue+0x10>

0800ad90 <memset>:
 800ad90:	4402      	add	r2, r0
 800ad92:	4603      	mov	r3, r0
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d100      	bne.n	800ad9a <memset+0xa>
 800ad98:	4770      	bx	lr
 800ad9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ad9e:	e7f9      	b.n	800ad94 <memset+0x4>

0800ada0 <_localeconv_r>:
 800ada0:	4800      	ldr	r0, [pc, #0]	@ (800ada4 <_localeconv_r+0x4>)
 800ada2:	4770      	bx	lr
 800ada4:	20000170 	.word	0x20000170

0800ada8 <__errno>:
 800ada8:	4b01      	ldr	r3, [pc, #4]	@ (800adb0 <__errno+0x8>)
 800adaa:	6818      	ldr	r0, [r3, #0]
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	20000030 	.word	0x20000030

0800adb4 <__libc_init_array>:
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	4d0d      	ldr	r5, [pc, #52]	@ (800adec <__libc_init_array+0x38>)
 800adb8:	4c0d      	ldr	r4, [pc, #52]	@ (800adf0 <__libc_init_array+0x3c>)
 800adba:	1b64      	subs	r4, r4, r5
 800adbc:	10a4      	asrs	r4, r4, #2
 800adbe:	2600      	movs	r6, #0
 800adc0:	42a6      	cmp	r6, r4
 800adc2:	d109      	bne.n	800add8 <__libc_init_array+0x24>
 800adc4:	4d0b      	ldr	r5, [pc, #44]	@ (800adf4 <__libc_init_array+0x40>)
 800adc6:	4c0c      	ldr	r4, [pc, #48]	@ (800adf8 <__libc_init_array+0x44>)
 800adc8:	f002 f8ee 	bl	800cfa8 <_init>
 800adcc:	1b64      	subs	r4, r4, r5
 800adce:	10a4      	asrs	r4, r4, #2
 800add0:	2600      	movs	r6, #0
 800add2:	42a6      	cmp	r6, r4
 800add4:	d105      	bne.n	800ade2 <__libc_init_array+0x2e>
 800add6:	bd70      	pop	{r4, r5, r6, pc}
 800add8:	f855 3b04 	ldr.w	r3, [r5], #4
 800addc:	4798      	blx	r3
 800adde:	3601      	adds	r6, #1
 800ade0:	e7ee      	b.n	800adc0 <__libc_init_array+0xc>
 800ade2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ade6:	4798      	blx	r3
 800ade8:	3601      	adds	r6, #1
 800adea:	e7f2      	b.n	800add2 <__libc_init_array+0x1e>
 800adec:	08021d50 	.word	0x08021d50
 800adf0:	08021d50 	.word	0x08021d50
 800adf4:	08021d50 	.word	0x08021d50
 800adf8:	08021d54 	.word	0x08021d54

0800adfc <__retarget_lock_init_recursive>:
 800adfc:	4770      	bx	lr

0800adfe <__retarget_lock_acquire_recursive>:
 800adfe:	4770      	bx	lr

0800ae00 <__retarget_lock_release_recursive>:
 800ae00:	4770      	bx	lr

0800ae02 <memcpy>:
 800ae02:	440a      	add	r2, r1
 800ae04:	4291      	cmp	r1, r2
 800ae06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ae0a:	d100      	bne.n	800ae0e <memcpy+0xc>
 800ae0c:	4770      	bx	lr
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae14:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae18:	4291      	cmp	r1, r2
 800ae1a:	d1f9      	bne.n	800ae10 <memcpy+0xe>
 800ae1c:	bd10      	pop	{r4, pc}

0800ae1e <quorem>:
 800ae1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae22:	6903      	ldr	r3, [r0, #16]
 800ae24:	690c      	ldr	r4, [r1, #16]
 800ae26:	42a3      	cmp	r3, r4
 800ae28:	4607      	mov	r7, r0
 800ae2a:	db7e      	blt.n	800af2a <quorem+0x10c>
 800ae2c:	3c01      	subs	r4, #1
 800ae2e:	f101 0814 	add.w	r8, r1, #20
 800ae32:	00a3      	lsls	r3, r4, #2
 800ae34:	f100 0514 	add.w	r5, r0, #20
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae3e:	9301      	str	r3, [sp, #4]
 800ae40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae48:	3301      	adds	r3, #1
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae50:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae54:	d32e      	bcc.n	800aeb4 <quorem+0x96>
 800ae56:	f04f 0a00 	mov.w	sl, #0
 800ae5a:	46c4      	mov	ip, r8
 800ae5c:	46ae      	mov	lr, r5
 800ae5e:	46d3      	mov	fp, sl
 800ae60:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ae64:	b298      	uxth	r0, r3
 800ae66:	fb06 a000 	mla	r0, r6, r0, sl
 800ae6a:	0c02      	lsrs	r2, r0, #16
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	fb06 2303 	mla	r3, r6, r3, r2
 800ae72:	f8de 2000 	ldr.w	r2, [lr]
 800ae76:	b280      	uxth	r0, r0
 800ae78:	b292      	uxth	r2, r2
 800ae7a:	1a12      	subs	r2, r2, r0
 800ae7c:	445a      	add	r2, fp
 800ae7e:	f8de 0000 	ldr.w	r0, [lr]
 800ae82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae90:	b292      	uxth	r2, r2
 800ae92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae96:	45e1      	cmp	r9, ip
 800ae98:	f84e 2b04 	str.w	r2, [lr], #4
 800ae9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800aea0:	d2de      	bcs.n	800ae60 <quorem+0x42>
 800aea2:	9b00      	ldr	r3, [sp, #0]
 800aea4:	58eb      	ldr	r3, [r5, r3]
 800aea6:	b92b      	cbnz	r3, 800aeb4 <quorem+0x96>
 800aea8:	9b01      	ldr	r3, [sp, #4]
 800aeaa:	3b04      	subs	r3, #4
 800aeac:	429d      	cmp	r5, r3
 800aeae:	461a      	mov	r2, r3
 800aeb0:	d32f      	bcc.n	800af12 <quorem+0xf4>
 800aeb2:	613c      	str	r4, [r7, #16]
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f001 fb33 	bl	800c520 <__mcmp>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	db25      	blt.n	800af0a <quorem+0xec>
 800aebe:	4629      	mov	r1, r5
 800aec0:	2000      	movs	r0, #0
 800aec2:	f858 2b04 	ldr.w	r2, [r8], #4
 800aec6:	f8d1 c000 	ldr.w	ip, [r1]
 800aeca:	fa1f fe82 	uxth.w	lr, r2
 800aece:	fa1f f38c 	uxth.w	r3, ip
 800aed2:	eba3 030e 	sub.w	r3, r3, lr
 800aed6:	4403      	add	r3, r0
 800aed8:	0c12      	lsrs	r2, r2, #16
 800aeda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aede:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aee8:	45c1      	cmp	r9, r8
 800aeea:	f841 3b04 	str.w	r3, [r1], #4
 800aeee:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aef2:	d2e6      	bcs.n	800aec2 <quorem+0xa4>
 800aef4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aef8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aefc:	b922      	cbnz	r2, 800af08 <quorem+0xea>
 800aefe:	3b04      	subs	r3, #4
 800af00:	429d      	cmp	r5, r3
 800af02:	461a      	mov	r2, r3
 800af04:	d30b      	bcc.n	800af1e <quorem+0x100>
 800af06:	613c      	str	r4, [r7, #16]
 800af08:	3601      	adds	r6, #1
 800af0a:	4630      	mov	r0, r6
 800af0c:	b003      	add	sp, #12
 800af0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af12:	6812      	ldr	r2, [r2, #0]
 800af14:	3b04      	subs	r3, #4
 800af16:	2a00      	cmp	r2, #0
 800af18:	d1cb      	bne.n	800aeb2 <quorem+0x94>
 800af1a:	3c01      	subs	r4, #1
 800af1c:	e7c6      	b.n	800aeac <quorem+0x8e>
 800af1e:	6812      	ldr	r2, [r2, #0]
 800af20:	3b04      	subs	r3, #4
 800af22:	2a00      	cmp	r2, #0
 800af24:	d1ef      	bne.n	800af06 <quorem+0xe8>
 800af26:	3c01      	subs	r4, #1
 800af28:	e7ea      	b.n	800af00 <quorem+0xe2>
 800af2a:	2000      	movs	r0, #0
 800af2c:	e7ee      	b.n	800af0c <quorem+0xee>
	...

0800af30 <_dtoa_r>:
 800af30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	69c7      	ldr	r7, [r0, #28]
 800af36:	b099      	sub	sp, #100	@ 0x64
 800af38:	ed8d 0b02 	vstr	d0, [sp, #8]
 800af3c:	ec55 4b10 	vmov	r4, r5, d0
 800af40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800af42:	9109      	str	r1, [sp, #36]	@ 0x24
 800af44:	4683      	mov	fp, r0
 800af46:	920e      	str	r2, [sp, #56]	@ 0x38
 800af48:	9313      	str	r3, [sp, #76]	@ 0x4c
 800af4a:	b97f      	cbnz	r7, 800af6c <_dtoa_r+0x3c>
 800af4c:	2010      	movs	r0, #16
 800af4e:	f000 ff0b 	bl	800bd68 <malloc>
 800af52:	4602      	mov	r2, r0
 800af54:	f8cb 001c 	str.w	r0, [fp, #28]
 800af58:	b920      	cbnz	r0, 800af64 <_dtoa_r+0x34>
 800af5a:	4ba7      	ldr	r3, [pc, #668]	@ (800b1f8 <_dtoa_r+0x2c8>)
 800af5c:	21ef      	movs	r1, #239	@ 0xef
 800af5e:	48a7      	ldr	r0, [pc, #668]	@ (800b1fc <_dtoa_r+0x2cc>)
 800af60:	f001 fcc8 	bl	800c8f4 <__assert_func>
 800af64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af68:	6007      	str	r7, [r0, #0]
 800af6a:	60c7      	str	r7, [r0, #12]
 800af6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af70:	6819      	ldr	r1, [r3, #0]
 800af72:	b159      	cbz	r1, 800af8c <_dtoa_r+0x5c>
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	604a      	str	r2, [r1, #4]
 800af78:	2301      	movs	r3, #1
 800af7a:	4093      	lsls	r3, r2
 800af7c:	608b      	str	r3, [r1, #8]
 800af7e:	4658      	mov	r0, fp
 800af80:	f001 f894 	bl	800c0ac <_Bfree>
 800af84:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af88:	2200      	movs	r2, #0
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	1e2b      	subs	r3, r5, #0
 800af8e:	bfb9      	ittee	lt
 800af90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af94:	9303      	strlt	r3, [sp, #12]
 800af96:	2300      	movge	r3, #0
 800af98:	6033      	strge	r3, [r6, #0]
 800af9a:	9f03      	ldr	r7, [sp, #12]
 800af9c:	4b98      	ldr	r3, [pc, #608]	@ (800b200 <_dtoa_r+0x2d0>)
 800af9e:	bfbc      	itt	lt
 800afa0:	2201      	movlt	r2, #1
 800afa2:	6032      	strlt	r2, [r6, #0]
 800afa4:	43bb      	bics	r3, r7
 800afa6:	d112      	bne.n	800afce <_dtoa_r+0x9e>
 800afa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800afaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800afae:	6013      	str	r3, [r2, #0]
 800afb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800afb4:	4323      	orrs	r3, r4
 800afb6:	f000 854d 	beq.w	800ba54 <_dtoa_r+0xb24>
 800afba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b214 <_dtoa_r+0x2e4>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 854f 	beq.w	800ba64 <_dtoa_r+0xb34>
 800afc6:	f10a 0303 	add.w	r3, sl, #3
 800afca:	f000 bd49 	b.w	800ba60 <_dtoa_r+0xb30>
 800afce:	ed9d 7b02 	vldr	d7, [sp, #8]
 800afd2:	2200      	movs	r2, #0
 800afd4:	ec51 0b17 	vmov	r0, r1, d7
 800afd8:	2300      	movs	r3, #0
 800afda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800afde:	f7f5 fd7b 	bl	8000ad8 <__aeabi_dcmpeq>
 800afe2:	4680      	mov	r8, r0
 800afe4:	b158      	cbz	r0, 800affe <_dtoa_r+0xce>
 800afe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800afe8:	2301      	movs	r3, #1
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800afee:	b113      	cbz	r3, 800aff6 <_dtoa_r+0xc6>
 800aff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800aff2:	4b84      	ldr	r3, [pc, #528]	@ (800b204 <_dtoa_r+0x2d4>)
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b218 <_dtoa_r+0x2e8>
 800affa:	f000 bd33 	b.w	800ba64 <_dtoa_r+0xb34>
 800affe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b002:	aa16      	add	r2, sp, #88	@ 0x58
 800b004:	a917      	add	r1, sp, #92	@ 0x5c
 800b006:	4658      	mov	r0, fp
 800b008:	f001 fb3a 	bl	800c680 <__d2b>
 800b00c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b010:	4681      	mov	r9, r0
 800b012:	2e00      	cmp	r6, #0
 800b014:	d077      	beq.n	800b106 <_dtoa_r+0x1d6>
 800b016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b018:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b01c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b02c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b030:	4619      	mov	r1, r3
 800b032:	2200      	movs	r2, #0
 800b034:	4b74      	ldr	r3, [pc, #464]	@ (800b208 <_dtoa_r+0x2d8>)
 800b036:	f7f5 f92f 	bl	8000298 <__aeabi_dsub>
 800b03a:	a369      	add	r3, pc, #420	@ (adr r3, 800b1e0 <_dtoa_r+0x2b0>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	f7f5 fae2 	bl	8000608 <__aeabi_dmul>
 800b044:	a368      	add	r3, pc, #416	@ (adr r3, 800b1e8 <_dtoa_r+0x2b8>)
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f7f5 f927 	bl	800029c <__adddf3>
 800b04e:	4604      	mov	r4, r0
 800b050:	4630      	mov	r0, r6
 800b052:	460d      	mov	r5, r1
 800b054:	f7f5 fa6e 	bl	8000534 <__aeabi_i2d>
 800b058:	a365      	add	r3, pc, #404	@ (adr r3, 800b1f0 <_dtoa_r+0x2c0>)
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	f7f5 fad3 	bl	8000608 <__aeabi_dmul>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4620      	mov	r0, r4
 800b068:	4629      	mov	r1, r5
 800b06a:	f7f5 f917 	bl	800029c <__adddf3>
 800b06e:	4604      	mov	r4, r0
 800b070:	460d      	mov	r5, r1
 800b072:	f7f5 fd79 	bl	8000b68 <__aeabi_d2iz>
 800b076:	2200      	movs	r2, #0
 800b078:	4607      	mov	r7, r0
 800b07a:	2300      	movs	r3, #0
 800b07c:	4620      	mov	r0, r4
 800b07e:	4629      	mov	r1, r5
 800b080:	f7f5 fd34 	bl	8000aec <__aeabi_dcmplt>
 800b084:	b140      	cbz	r0, 800b098 <_dtoa_r+0x168>
 800b086:	4638      	mov	r0, r7
 800b088:	f7f5 fa54 	bl	8000534 <__aeabi_i2d>
 800b08c:	4622      	mov	r2, r4
 800b08e:	462b      	mov	r3, r5
 800b090:	f7f5 fd22 	bl	8000ad8 <__aeabi_dcmpeq>
 800b094:	b900      	cbnz	r0, 800b098 <_dtoa_r+0x168>
 800b096:	3f01      	subs	r7, #1
 800b098:	2f16      	cmp	r7, #22
 800b09a:	d851      	bhi.n	800b140 <_dtoa_r+0x210>
 800b09c:	4b5b      	ldr	r3, [pc, #364]	@ (800b20c <_dtoa_r+0x2dc>)
 800b09e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0aa:	f7f5 fd1f 	bl	8000aec <__aeabi_dcmplt>
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d048      	beq.n	800b144 <_dtoa_r+0x214>
 800b0b2:	3f01      	subs	r7, #1
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	9312      	str	r3, [sp, #72]	@ 0x48
 800b0b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b0ba:	1b9b      	subs	r3, r3, r6
 800b0bc:	1e5a      	subs	r2, r3, #1
 800b0be:	bf44      	itt	mi
 800b0c0:	f1c3 0801 	rsbmi	r8, r3, #1
 800b0c4:	2300      	movmi	r3, #0
 800b0c6:	9208      	str	r2, [sp, #32]
 800b0c8:	bf54      	ite	pl
 800b0ca:	f04f 0800 	movpl.w	r8, #0
 800b0ce:	9308      	strmi	r3, [sp, #32]
 800b0d0:	2f00      	cmp	r7, #0
 800b0d2:	db39      	blt.n	800b148 <_dtoa_r+0x218>
 800b0d4:	9b08      	ldr	r3, [sp, #32]
 800b0d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b0d8:	443b      	add	r3, r7
 800b0da:	9308      	str	r3, [sp, #32]
 800b0dc:	2300      	movs	r3, #0
 800b0de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e2:	2b09      	cmp	r3, #9
 800b0e4:	d864      	bhi.n	800b1b0 <_dtoa_r+0x280>
 800b0e6:	2b05      	cmp	r3, #5
 800b0e8:	bfc4      	itt	gt
 800b0ea:	3b04      	subgt	r3, #4
 800b0ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f0:	f1a3 0302 	sub.w	r3, r3, #2
 800b0f4:	bfcc      	ite	gt
 800b0f6:	2400      	movgt	r4, #0
 800b0f8:	2401      	movle	r4, #1
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d863      	bhi.n	800b1c6 <_dtoa_r+0x296>
 800b0fe:	e8df f003 	tbb	[pc, r3]
 800b102:	372a      	.short	0x372a
 800b104:	5535      	.short	0x5535
 800b106:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b10a:	441e      	add	r6, r3
 800b10c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b110:	2b20      	cmp	r3, #32
 800b112:	bfc1      	itttt	gt
 800b114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b118:	409f      	lslgt	r7, r3
 800b11a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b11e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b122:	bfd6      	itet	le
 800b124:	f1c3 0320 	rsble	r3, r3, #32
 800b128:	ea47 0003 	orrgt.w	r0, r7, r3
 800b12c:	fa04 f003 	lslle.w	r0, r4, r3
 800b130:	f7f5 f9f0 	bl	8000514 <__aeabi_ui2d>
 800b134:	2201      	movs	r2, #1
 800b136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b13a:	3e01      	subs	r6, #1
 800b13c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b13e:	e777      	b.n	800b030 <_dtoa_r+0x100>
 800b140:	2301      	movs	r3, #1
 800b142:	e7b8      	b.n	800b0b6 <_dtoa_r+0x186>
 800b144:	9012      	str	r0, [sp, #72]	@ 0x48
 800b146:	e7b7      	b.n	800b0b8 <_dtoa_r+0x188>
 800b148:	427b      	negs	r3, r7
 800b14a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b14c:	2300      	movs	r3, #0
 800b14e:	eba8 0807 	sub.w	r8, r8, r7
 800b152:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b154:	e7c4      	b.n	800b0e0 <_dtoa_r+0x1b0>
 800b156:	2300      	movs	r3, #0
 800b158:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b15a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dc35      	bgt.n	800b1cc <_dtoa_r+0x29c>
 800b160:	2301      	movs	r3, #1
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	9307      	str	r3, [sp, #28]
 800b166:	461a      	mov	r2, r3
 800b168:	920e      	str	r2, [sp, #56]	@ 0x38
 800b16a:	e00b      	b.n	800b184 <_dtoa_r+0x254>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e7f3      	b.n	800b158 <_dtoa_r+0x228>
 800b170:	2300      	movs	r3, #0
 800b172:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b176:	18fb      	adds	r3, r7, r3
 800b178:	9300      	str	r3, [sp, #0]
 800b17a:	3301      	adds	r3, #1
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	9307      	str	r3, [sp, #28]
 800b180:	bfb8      	it	lt
 800b182:	2301      	movlt	r3, #1
 800b184:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b188:	2100      	movs	r1, #0
 800b18a:	2204      	movs	r2, #4
 800b18c:	f102 0514 	add.w	r5, r2, #20
 800b190:	429d      	cmp	r5, r3
 800b192:	d91f      	bls.n	800b1d4 <_dtoa_r+0x2a4>
 800b194:	6041      	str	r1, [r0, #4]
 800b196:	4658      	mov	r0, fp
 800b198:	f000 ff48 	bl	800c02c <_Balloc>
 800b19c:	4682      	mov	sl, r0
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	d13c      	bne.n	800b21c <_dtoa_r+0x2ec>
 800b1a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b210 <_dtoa_r+0x2e0>)
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b1aa:	e6d8      	b.n	800af5e <_dtoa_r+0x2e>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e7e0      	b.n	800b172 <_dtoa_r+0x242>
 800b1b0:	2401      	movs	r4, #1
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b1b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	9307      	str	r3, [sp, #28]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	2312      	movs	r3, #18
 800b1c4:	e7d0      	b.n	800b168 <_dtoa_r+0x238>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b1ca:	e7f5      	b.n	800b1b8 <_dtoa_r+0x288>
 800b1cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	9307      	str	r3, [sp, #28]
 800b1d2:	e7d7      	b.n	800b184 <_dtoa_r+0x254>
 800b1d4:	3101      	adds	r1, #1
 800b1d6:	0052      	lsls	r2, r2, #1
 800b1d8:	e7d8      	b.n	800b18c <_dtoa_r+0x25c>
 800b1da:	bf00      	nop
 800b1dc:	f3af 8000 	nop.w
 800b1e0:	636f4361 	.word	0x636f4361
 800b1e4:	3fd287a7 	.word	0x3fd287a7
 800b1e8:	8b60c8b3 	.word	0x8b60c8b3
 800b1ec:	3fc68a28 	.word	0x3fc68a28
 800b1f0:	509f79fb 	.word	0x509f79fb
 800b1f4:	3fd34413 	.word	0x3fd34413
 800b1f8:	08021a15 	.word	0x08021a15
 800b1fc:	08021a2c 	.word	0x08021a2c
 800b200:	7ff00000 	.word	0x7ff00000
 800b204:	080219e5 	.word	0x080219e5
 800b208:	3ff80000 	.word	0x3ff80000
 800b20c:	08021b38 	.word	0x08021b38
 800b210:	08021a84 	.word	0x08021a84
 800b214:	08021a11 	.word	0x08021a11
 800b218:	080219e4 	.word	0x080219e4
 800b21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b220:	6018      	str	r0, [r3, #0]
 800b222:	9b07      	ldr	r3, [sp, #28]
 800b224:	2b0e      	cmp	r3, #14
 800b226:	f200 80a4 	bhi.w	800b372 <_dtoa_r+0x442>
 800b22a:	2c00      	cmp	r4, #0
 800b22c:	f000 80a1 	beq.w	800b372 <_dtoa_r+0x442>
 800b230:	2f00      	cmp	r7, #0
 800b232:	dd33      	ble.n	800b29c <_dtoa_r+0x36c>
 800b234:	4bad      	ldr	r3, [pc, #692]	@ (800b4ec <_dtoa_r+0x5bc>)
 800b236:	f007 020f 	and.w	r2, r7, #15
 800b23a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b23e:	ed93 7b00 	vldr	d7, [r3]
 800b242:	05f8      	lsls	r0, r7, #23
 800b244:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b248:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b24c:	d516      	bpl.n	800b27c <_dtoa_r+0x34c>
 800b24e:	4ba8      	ldr	r3, [pc, #672]	@ (800b4f0 <_dtoa_r+0x5c0>)
 800b250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b258:	f7f5 fb00 	bl	800085c <__aeabi_ddiv>
 800b25c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b260:	f004 040f 	and.w	r4, r4, #15
 800b264:	2603      	movs	r6, #3
 800b266:	4da2      	ldr	r5, [pc, #648]	@ (800b4f0 <_dtoa_r+0x5c0>)
 800b268:	b954      	cbnz	r4, 800b280 <_dtoa_r+0x350>
 800b26a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b26e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b272:	f7f5 faf3 	bl	800085c <__aeabi_ddiv>
 800b276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b27a:	e028      	b.n	800b2ce <_dtoa_r+0x39e>
 800b27c:	2602      	movs	r6, #2
 800b27e:	e7f2      	b.n	800b266 <_dtoa_r+0x336>
 800b280:	07e1      	lsls	r1, r4, #31
 800b282:	d508      	bpl.n	800b296 <_dtoa_r+0x366>
 800b284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b288:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b28c:	f7f5 f9bc 	bl	8000608 <__aeabi_dmul>
 800b290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b294:	3601      	adds	r6, #1
 800b296:	1064      	asrs	r4, r4, #1
 800b298:	3508      	adds	r5, #8
 800b29a:	e7e5      	b.n	800b268 <_dtoa_r+0x338>
 800b29c:	f000 80d2 	beq.w	800b444 <_dtoa_r+0x514>
 800b2a0:	427c      	negs	r4, r7
 800b2a2:	4b92      	ldr	r3, [pc, #584]	@ (800b4ec <_dtoa_r+0x5bc>)
 800b2a4:	4d92      	ldr	r5, [pc, #584]	@ (800b4f0 <_dtoa_r+0x5c0>)
 800b2a6:	f004 020f 	and.w	r2, r4, #15
 800b2aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b2b6:	f7f5 f9a7 	bl	8000608 <__aeabi_dmul>
 800b2ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2be:	1124      	asrs	r4, r4, #4
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	2602      	movs	r6, #2
 800b2c4:	2c00      	cmp	r4, #0
 800b2c6:	f040 80b2 	bne.w	800b42e <_dtoa_r+0x4fe>
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1d3      	bne.n	800b276 <_dtoa_r+0x346>
 800b2ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b2d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f000 80b7 	beq.w	800b448 <_dtoa_r+0x518>
 800b2da:	4b86      	ldr	r3, [pc, #536]	@ (800b4f4 <_dtoa_r+0x5c4>)
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4620      	mov	r0, r4
 800b2e0:	4629      	mov	r1, r5
 800b2e2:	f7f5 fc03 	bl	8000aec <__aeabi_dcmplt>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f000 80ae 	beq.w	800b448 <_dtoa_r+0x518>
 800b2ec:	9b07      	ldr	r3, [sp, #28]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f000 80aa 	beq.w	800b448 <_dtoa_r+0x518>
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dd37      	ble.n	800b36a <_dtoa_r+0x43a>
 800b2fa:	1e7b      	subs	r3, r7, #1
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	4620      	mov	r0, r4
 800b300:	4b7d      	ldr	r3, [pc, #500]	@ (800b4f8 <_dtoa_r+0x5c8>)
 800b302:	2200      	movs	r2, #0
 800b304:	4629      	mov	r1, r5
 800b306:	f7f5 f97f 	bl	8000608 <__aeabi_dmul>
 800b30a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b30e:	9c00      	ldr	r4, [sp, #0]
 800b310:	3601      	adds	r6, #1
 800b312:	4630      	mov	r0, r6
 800b314:	f7f5 f90e 	bl	8000534 <__aeabi_i2d>
 800b318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b31c:	f7f5 f974 	bl	8000608 <__aeabi_dmul>
 800b320:	4b76      	ldr	r3, [pc, #472]	@ (800b4fc <_dtoa_r+0x5cc>)
 800b322:	2200      	movs	r2, #0
 800b324:	f7f4 ffba 	bl	800029c <__adddf3>
 800b328:	4605      	mov	r5, r0
 800b32a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b32e:	2c00      	cmp	r4, #0
 800b330:	f040 808d 	bne.w	800b44e <_dtoa_r+0x51e>
 800b334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b338:	4b71      	ldr	r3, [pc, #452]	@ (800b500 <_dtoa_r+0x5d0>)
 800b33a:	2200      	movs	r2, #0
 800b33c:	f7f4 ffac 	bl	8000298 <__aeabi_dsub>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b348:	462a      	mov	r2, r5
 800b34a:	4633      	mov	r3, r6
 800b34c:	f7f5 fbec 	bl	8000b28 <__aeabi_dcmpgt>
 800b350:	2800      	cmp	r0, #0
 800b352:	f040 828b 	bne.w	800b86c <_dtoa_r+0x93c>
 800b356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b35a:	462a      	mov	r2, r5
 800b35c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b360:	f7f5 fbc4 	bl	8000aec <__aeabi_dcmplt>
 800b364:	2800      	cmp	r0, #0
 800b366:	f040 8128 	bne.w	800b5ba <_dtoa_r+0x68a>
 800b36a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b36e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b374:	2b00      	cmp	r3, #0
 800b376:	f2c0 815a 	blt.w	800b62e <_dtoa_r+0x6fe>
 800b37a:	2f0e      	cmp	r7, #14
 800b37c:	f300 8157 	bgt.w	800b62e <_dtoa_r+0x6fe>
 800b380:	4b5a      	ldr	r3, [pc, #360]	@ (800b4ec <_dtoa_r+0x5bc>)
 800b382:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b386:	ed93 7b00 	vldr	d7, [r3]
 800b38a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	ed8d 7b00 	vstr	d7, [sp]
 800b392:	da03      	bge.n	800b39c <_dtoa_r+0x46c>
 800b394:	9b07      	ldr	r3, [sp, #28]
 800b396:	2b00      	cmp	r3, #0
 800b398:	f340 8101 	ble.w	800b59e <_dtoa_r+0x66e>
 800b39c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b3a0:	4656      	mov	r6, sl
 800b3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3a6:	4620      	mov	r0, r4
 800b3a8:	4629      	mov	r1, r5
 800b3aa:	f7f5 fa57 	bl	800085c <__aeabi_ddiv>
 800b3ae:	f7f5 fbdb 	bl	8000b68 <__aeabi_d2iz>
 800b3b2:	4680      	mov	r8, r0
 800b3b4:	f7f5 f8be 	bl	8000534 <__aeabi_i2d>
 800b3b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3bc:	f7f5 f924 	bl	8000608 <__aeabi_dmul>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b3cc:	f7f4 ff64 	bl	8000298 <__aeabi_dsub>
 800b3d0:	f806 4b01 	strb.w	r4, [r6], #1
 800b3d4:	9d07      	ldr	r5, [sp, #28]
 800b3d6:	eba6 040a 	sub.w	r4, r6, sl
 800b3da:	42a5      	cmp	r5, r4
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	f040 8117 	bne.w	800b612 <_dtoa_r+0x6e2>
 800b3e4:	f7f4 ff5a 	bl	800029c <__adddf3>
 800b3e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	f7f5 fb9a 	bl	8000b28 <__aeabi_dcmpgt>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f040 80f9 	bne.w	800b5ec <_dtoa_r+0x6bc>
 800b3fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3fe:	4620      	mov	r0, r4
 800b400:	4629      	mov	r1, r5
 800b402:	f7f5 fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 800b406:	b118      	cbz	r0, 800b410 <_dtoa_r+0x4e0>
 800b408:	f018 0f01 	tst.w	r8, #1
 800b40c:	f040 80ee 	bne.w	800b5ec <_dtoa_r+0x6bc>
 800b410:	4649      	mov	r1, r9
 800b412:	4658      	mov	r0, fp
 800b414:	f000 fe4a 	bl	800c0ac <_Bfree>
 800b418:	2300      	movs	r3, #0
 800b41a:	7033      	strb	r3, [r6, #0]
 800b41c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b41e:	3701      	adds	r7, #1
 800b420:	601f      	str	r7, [r3, #0]
 800b422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 831d 	beq.w	800ba64 <_dtoa_r+0xb34>
 800b42a:	601e      	str	r6, [r3, #0]
 800b42c:	e31a      	b.n	800ba64 <_dtoa_r+0xb34>
 800b42e:	07e2      	lsls	r2, r4, #31
 800b430:	d505      	bpl.n	800b43e <_dtoa_r+0x50e>
 800b432:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b436:	f7f5 f8e7 	bl	8000608 <__aeabi_dmul>
 800b43a:	3601      	adds	r6, #1
 800b43c:	2301      	movs	r3, #1
 800b43e:	1064      	asrs	r4, r4, #1
 800b440:	3508      	adds	r5, #8
 800b442:	e73f      	b.n	800b2c4 <_dtoa_r+0x394>
 800b444:	2602      	movs	r6, #2
 800b446:	e742      	b.n	800b2ce <_dtoa_r+0x39e>
 800b448:	9c07      	ldr	r4, [sp, #28]
 800b44a:	9704      	str	r7, [sp, #16]
 800b44c:	e761      	b.n	800b312 <_dtoa_r+0x3e2>
 800b44e:	4b27      	ldr	r3, [pc, #156]	@ (800b4ec <_dtoa_r+0x5bc>)
 800b450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b456:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b45a:	4454      	add	r4, sl
 800b45c:	2900      	cmp	r1, #0
 800b45e:	d053      	beq.n	800b508 <_dtoa_r+0x5d8>
 800b460:	4928      	ldr	r1, [pc, #160]	@ (800b504 <_dtoa_r+0x5d4>)
 800b462:	2000      	movs	r0, #0
 800b464:	f7f5 f9fa 	bl	800085c <__aeabi_ddiv>
 800b468:	4633      	mov	r3, r6
 800b46a:	462a      	mov	r2, r5
 800b46c:	f7f4 ff14 	bl	8000298 <__aeabi_dsub>
 800b470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b474:	4656      	mov	r6, sl
 800b476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b47a:	f7f5 fb75 	bl	8000b68 <__aeabi_d2iz>
 800b47e:	4605      	mov	r5, r0
 800b480:	f7f5 f858 	bl	8000534 <__aeabi_i2d>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b48c:	f7f4 ff04 	bl	8000298 <__aeabi_dsub>
 800b490:	3530      	adds	r5, #48	@ 0x30
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b49a:	f806 5b01 	strb.w	r5, [r6], #1
 800b49e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4a2:	f7f5 fb23 	bl	8000aec <__aeabi_dcmplt>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d171      	bne.n	800b58e <_dtoa_r+0x65e>
 800b4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ae:	4911      	ldr	r1, [pc, #68]	@ (800b4f4 <_dtoa_r+0x5c4>)
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	f7f4 fef1 	bl	8000298 <__aeabi_dsub>
 800b4b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4ba:	f7f5 fb17 	bl	8000aec <__aeabi_dcmplt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f040 8095 	bne.w	800b5ee <_dtoa_r+0x6be>
 800b4c4:	42a6      	cmp	r6, r4
 800b4c6:	f43f af50 	beq.w	800b36a <_dtoa_r+0x43a>
 800b4ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b4f8 <_dtoa_r+0x5c8>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f7f5 f899 	bl	8000608 <__aeabi_dmul>
 800b4d6:	4b08      	ldr	r3, [pc, #32]	@ (800b4f8 <_dtoa_r+0x5c8>)
 800b4d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4dc:	2200      	movs	r2, #0
 800b4de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4e2:	f7f5 f891 	bl	8000608 <__aeabi_dmul>
 800b4e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4ea:	e7c4      	b.n	800b476 <_dtoa_r+0x546>
 800b4ec:	08021b38 	.word	0x08021b38
 800b4f0:	08021b10 	.word	0x08021b10
 800b4f4:	3ff00000 	.word	0x3ff00000
 800b4f8:	40240000 	.word	0x40240000
 800b4fc:	401c0000 	.word	0x401c0000
 800b500:	40140000 	.word	0x40140000
 800b504:	3fe00000 	.word	0x3fe00000
 800b508:	4631      	mov	r1, r6
 800b50a:	4628      	mov	r0, r5
 800b50c:	f7f5 f87c 	bl	8000608 <__aeabi_dmul>
 800b510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b514:	9415      	str	r4, [sp, #84]	@ 0x54
 800b516:	4656      	mov	r6, sl
 800b518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b51c:	f7f5 fb24 	bl	8000b68 <__aeabi_d2iz>
 800b520:	4605      	mov	r5, r0
 800b522:	f7f5 f807 	bl	8000534 <__aeabi_i2d>
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b52e:	f7f4 feb3 	bl	8000298 <__aeabi_dsub>
 800b532:	3530      	adds	r5, #48	@ 0x30
 800b534:	f806 5b01 	strb.w	r5, [r6], #1
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	42a6      	cmp	r6, r4
 800b53e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b542:	f04f 0200 	mov.w	r2, #0
 800b546:	d124      	bne.n	800b592 <_dtoa_r+0x662>
 800b548:	4bac      	ldr	r3, [pc, #688]	@ (800b7fc <_dtoa_r+0x8cc>)
 800b54a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b54e:	f7f4 fea5 	bl	800029c <__adddf3>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b55a:	f7f5 fae5 	bl	8000b28 <__aeabi_dcmpgt>
 800b55e:	2800      	cmp	r0, #0
 800b560:	d145      	bne.n	800b5ee <_dtoa_r+0x6be>
 800b562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b566:	49a5      	ldr	r1, [pc, #660]	@ (800b7fc <_dtoa_r+0x8cc>)
 800b568:	2000      	movs	r0, #0
 800b56a:	f7f4 fe95 	bl	8000298 <__aeabi_dsub>
 800b56e:	4602      	mov	r2, r0
 800b570:	460b      	mov	r3, r1
 800b572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b576:	f7f5 fab9 	bl	8000aec <__aeabi_dcmplt>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f43f aef5 	beq.w	800b36a <_dtoa_r+0x43a>
 800b580:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b582:	1e73      	subs	r3, r6, #1
 800b584:	9315      	str	r3, [sp, #84]	@ 0x54
 800b586:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b58a:	2b30      	cmp	r3, #48	@ 0x30
 800b58c:	d0f8      	beq.n	800b580 <_dtoa_r+0x650>
 800b58e:	9f04      	ldr	r7, [sp, #16]
 800b590:	e73e      	b.n	800b410 <_dtoa_r+0x4e0>
 800b592:	4b9b      	ldr	r3, [pc, #620]	@ (800b800 <_dtoa_r+0x8d0>)
 800b594:	f7f5 f838 	bl	8000608 <__aeabi_dmul>
 800b598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b59c:	e7bc      	b.n	800b518 <_dtoa_r+0x5e8>
 800b59e:	d10c      	bne.n	800b5ba <_dtoa_r+0x68a>
 800b5a0:	4b98      	ldr	r3, [pc, #608]	@ (800b804 <_dtoa_r+0x8d4>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b5a8:	f7f5 f82e 	bl	8000608 <__aeabi_dmul>
 800b5ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b5b0:	f7f5 fab0 	bl	8000b14 <__aeabi_dcmpge>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f000 8157 	beq.w	800b868 <_dtoa_r+0x938>
 800b5ba:	2400      	movs	r4, #0
 800b5bc:	4625      	mov	r5, r4
 800b5be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5c0:	43db      	mvns	r3, r3
 800b5c2:	9304      	str	r3, [sp, #16]
 800b5c4:	4656      	mov	r6, sl
 800b5c6:	2700      	movs	r7, #0
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	4658      	mov	r0, fp
 800b5cc:	f000 fd6e 	bl	800c0ac <_Bfree>
 800b5d0:	2d00      	cmp	r5, #0
 800b5d2:	d0dc      	beq.n	800b58e <_dtoa_r+0x65e>
 800b5d4:	b12f      	cbz	r7, 800b5e2 <_dtoa_r+0x6b2>
 800b5d6:	42af      	cmp	r7, r5
 800b5d8:	d003      	beq.n	800b5e2 <_dtoa_r+0x6b2>
 800b5da:	4639      	mov	r1, r7
 800b5dc:	4658      	mov	r0, fp
 800b5de:	f000 fd65 	bl	800c0ac <_Bfree>
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	4658      	mov	r0, fp
 800b5e6:	f000 fd61 	bl	800c0ac <_Bfree>
 800b5ea:	e7d0      	b.n	800b58e <_dtoa_r+0x65e>
 800b5ec:	9704      	str	r7, [sp, #16]
 800b5ee:	4633      	mov	r3, r6
 800b5f0:	461e      	mov	r6, r3
 800b5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f6:	2a39      	cmp	r2, #57	@ 0x39
 800b5f8:	d107      	bne.n	800b60a <_dtoa_r+0x6da>
 800b5fa:	459a      	cmp	sl, r3
 800b5fc:	d1f8      	bne.n	800b5f0 <_dtoa_r+0x6c0>
 800b5fe:	9a04      	ldr	r2, [sp, #16]
 800b600:	3201      	adds	r2, #1
 800b602:	9204      	str	r2, [sp, #16]
 800b604:	2230      	movs	r2, #48	@ 0x30
 800b606:	f88a 2000 	strb.w	r2, [sl]
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	3201      	adds	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	e7bd      	b.n	800b58e <_dtoa_r+0x65e>
 800b612:	4b7b      	ldr	r3, [pc, #492]	@ (800b800 <_dtoa_r+0x8d0>)
 800b614:	2200      	movs	r2, #0
 800b616:	f7f4 fff7 	bl	8000608 <__aeabi_dmul>
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
 800b622:	f7f5 fa59 	bl	8000ad8 <__aeabi_dcmpeq>
 800b626:	2800      	cmp	r0, #0
 800b628:	f43f aebb 	beq.w	800b3a2 <_dtoa_r+0x472>
 800b62c:	e6f0      	b.n	800b410 <_dtoa_r+0x4e0>
 800b62e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b630:	2a00      	cmp	r2, #0
 800b632:	f000 80db 	beq.w	800b7ec <_dtoa_r+0x8bc>
 800b636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b638:	2a01      	cmp	r2, #1
 800b63a:	f300 80bf 	bgt.w	800b7bc <_dtoa_r+0x88c>
 800b63e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b640:	2a00      	cmp	r2, #0
 800b642:	f000 80b7 	beq.w	800b7b4 <_dtoa_r+0x884>
 800b646:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b64a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b64c:	4646      	mov	r6, r8
 800b64e:	9a08      	ldr	r2, [sp, #32]
 800b650:	2101      	movs	r1, #1
 800b652:	441a      	add	r2, r3
 800b654:	4658      	mov	r0, fp
 800b656:	4498      	add	r8, r3
 800b658:	9208      	str	r2, [sp, #32]
 800b65a:	f000 fddb 	bl	800c214 <__i2b>
 800b65e:	4605      	mov	r5, r0
 800b660:	b15e      	cbz	r6, 800b67a <_dtoa_r+0x74a>
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd08      	ble.n	800b67a <_dtoa_r+0x74a>
 800b668:	42b3      	cmp	r3, r6
 800b66a:	9a08      	ldr	r2, [sp, #32]
 800b66c:	bfa8      	it	ge
 800b66e:	4633      	movge	r3, r6
 800b670:	eba8 0803 	sub.w	r8, r8, r3
 800b674:	1af6      	subs	r6, r6, r3
 800b676:	1ad3      	subs	r3, r2, r3
 800b678:	9308      	str	r3, [sp, #32]
 800b67a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b67c:	b1f3      	cbz	r3, 800b6bc <_dtoa_r+0x78c>
 800b67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b680:	2b00      	cmp	r3, #0
 800b682:	f000 80b7 	beq.w	800b7f4 <_dtoa_r+0x8c4>
 800b686:	b18c      	cbz	r4, 800b6ac <_dtoa_r+0x77c>
 800b688:	4629      	mov	r1, r5
 800b68a:	4622      	mov	r2, r4
 800b68c:	4658      	mov	r0, fp
 800b68e:	f000 fe81 	bl	800c394 <__pow5mult>
 800b692:	464a      	mov	r2, r9
 800b694:	4601      	mov	r1, r0
 800b696:	4605      	mov	r5, r0
 800b698:	4658      	mov	r0, fp
 800b69a:	f000 fdd1 	bl	800c240 <__multiply>
 800b69e:	4649      	mov	r1, r9
 800b6a0:	9004      	str	r0, [sp, #16]
 800b6a2:	4658      	mov	r0, fp
 800b6a4:	f000 fd02 	bl	800c0ac <_Bfree>
 800b6a8:	9b04      	ldr	r3, [sp, #16]
 800b6aa:	4699      	mov	r9, r3
 800b6ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6ae:	1b1a      	subs	r2, r3, r4
 800b6b0:	d004      	beq.n	800b6bc <_dtoa_r+0x78c>
 800b6b2:	4649      	mov	r1, r9
 800b6b4:	4658      	mov	r0, fp
 800b6b6:	f000 fe6d 	bl	800c394 <__pow5mult>
 800b6ba:	4681      	mov	r9, r0
 800b6bc:	2101      	movs	r1, #1
 800b6be:	4658      	mov	r0, fp
 800b6c0:	f000 fda8 	bl	800c214 <__i2b>
 800b6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 81cf 	beq.w	800ba6c <_dtoa_r+0xb3c>
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	4658      	mov	r0, fp
 800b6d4:	f000 fe5e 	bl	800c394 <__pow5mult>
 800b6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	4604      	mov	r4, r0
 800b6de:	f300 8095 	bgt.w	800b80c <_dtoa_r+0x8dc>
 800b6e2:	9b02      	ldr	r3, [sp, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f040 8087 	bne.w	800b7f8 <_dtoa_r+0x8c8>
 800b6ea:	9b03      	ldr	r3, [sp, #12]
 800b6ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f040 8089 	bne.w	800b808 <_dtoa_r+0x8d8>
 800b6f6:	9b03      	ldr	r3, [sp, #12]
 800b6f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b6fc:	0d1b      	lsrs	r3, r3, #20
 800b6fe:	051b      	lsls	r3, r3, #20
 800b700:	b12b      	cbz	r3, 800b70e <_dtoa_r+0x7de>
 800b702:	9b08      	ldr	r3, [sp, #32]
 800b704:	3301      	adds	r3, #1
 800b706:	9308      	str	r3, [sp, #32]
 800b708:	f108 0801 	add.w	r8, r8, #1
 800b70c:	2301      	movs	r3, #1
 800b70e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b712:	2b00      	cmp	r3, #0
 800b714:	f000 81b0 	beq.w	800ba78 <_dtoa_r+0xb48>
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b71e:	6918      	ldr	r0, [r3, #16]
 800b720:	f000 fd2c 	bl	800c17c <__hi0bits>
 800b724:	f1c0 0020 	rsb	r0, r0, #32
 800b728:	9b08      	ldr	r3, [sp, #32]
 800b72a:	4418      	add	r0, r3
 800b72c:	f010 001f 	ands.w	r0, r0, #31
 800b730:	d077      	beq.n	800b822 <_dtoa_r+0x8f2>
 800b732:	f1c0 0320 	rsb	r3, r0, #32
 800b736:	2b04      	cmp	r3, #4
 800b738:	dd6b      	ble.n	800b812 <_dtoa_r+0x8e2>
 800b73a:	9b08      	ldr	r3, [sp, #32]
 800b73c:	f1c0 001c 	rsb	r0, r0, #28
 800b740:	4403      	add	r3, r0
 800b742:	4480      	add	r8, r0
 800b744:	4406      	add	r6, r0
 800b746:	9308      	str	r3, [sp, #32]
 800b748:	f1b8 0f00 	cmp.w	r8, #0
 800b74c:	dd05      	ble.n	800b75a <_dtoa_r+0x82a>
 800b74e:	4649      	mov	r1, r9
 800b750:	4642      	mov	r2, r8
 800b752:	4658      	mov	r0, fp
 800b754:	f000 fe78 	bl	800c448 <__lshift>
 800b758:	4681      	mov	r9, r0
 800b75a:	9b08      	ldr	r3, [sp, #32]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	dd05      	ble.n	800b76c <_dtoa_r+0x83c>
 800b760:	4621      	mov	r1, r4
 800b762:	461a      	mov	r2, r3
 800b764:	4658      	mov	r0, fp
 800b766:	f000 fe6f 	bl	800c448 <__lshift>
 800b76a:	4604      	mov	r4, r0
 800b76c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d059      	beq.n	800b826 <_dtoa_r+0x8f6>
 800b772:	4621      	mov	r1, r4
 800b774:	4648      	mov	r0, r9
 800b776:	f000 fed3 	bl	800c520 <__mcmp>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	da53      	bge.n	800b826 <_dtoa_r+0x8f6>
 800b77e:	1e7b      	subs	r3, r7, #1
 800b780:	9304      	str	r3, [sp, #16]
 800b782:	4649      	mov	r1, r9
 800b784:	2300      	movs	r3, #0
 800b786:	220a      	movs	r2, #10
 800b788:	4658      	mov	r0, fp
 800b78a:	f000 fcb1 	bl	800c0f0 <__multadd>
 800b78e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b790:	4681      	mov	r9, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	f000 8172 	beq.w	800ba7c <_dtoa_r+0xb4c>
 800b798:	2300      	movs	r3, #0
 800b79a:	4629      	mov	r1, r5
 800b79c:	220a      	movs	r2, #10
 800b79e:	4658      	mov	r0, fp
 800b7a0:	f000 fca6 	bl	800c0f0 <__multadd>
 800b7a4:	9b00      	ldr	r3, [sp, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	dc67      	bgt.n	800b87c <_dtoa_r+0x94c>
 800b7ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	dc41      	bgt.n	800b836 <_dtoa_r+0x906>
 800b7b2:	e063      	b.n	800b87c <_dtoa_r+0x94c>
 800b7b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b7b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b7ba:	e746      	b.n	800b64a <_dtoa_r+0x71a>
 800b7bc:	9b07      	ldr	r3, [sp, #28]
 800b7be:	1e5c      	subs	r4, r3, #1
 800b7c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7c2:	42a3      	cmp	r3, r4
 800b7c4:	bfbf      	itttt	lt
 800b7c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b7c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b7ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b7cc:	1ae3      	sublt	r3, r4, r3
 800b7ce:	bfb4      	ite	lt
 800b7d0:	18d2      	addlt	r2, r2, r3
 800b7d2:	1b1c      	subge	r4, r3, r4
 800b7d4:	9b07      	ldr	r3, [sp, #28]
 800b7d6:	bfbc      	itt	lt
 800b7d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b7da:	2400      	movlt	r4, #0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	bfb5      	itete	lt
 800b7e0:	eba8 0603 	sublt.w	r6, r8, r3
 800b7e4:	9b07      	ldrge	r3, [sp, #28]
 800b7e6:	2300      	movlt	r3, #0
 800b7e8:	4646      	movge	r6, r8
 800b7ea:	e730      	b.n	800b64e <_dtoa_r+0x71e>
 800b7ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b7f0:	4646      	mov	r6, r8
 800b7f2:	e735      	b.n	800b660 <_dtoa_r+0x730>
 800b7f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b7f6:	e75c      	b.n	800b6b2 <_dtoa_r+0x782>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	e788      	b.n	800b70e <_dtoa_r+0x7de>
 800b7fc:	3fe00000 	.word	0x3fe00000
 800b800:	40240000 	.word	0x40240000
 800b804:	40140000 	.word	0x40140000
 800b808:	9b02      	ldr	r3, [sp, #8]
 800b80a:	e780      	b.n	800b70e <_dtoa_r+0x7de>
 800b80c:	2300      	movs	r3, #0
 800b80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b810:	e782      	b.n	800b718 <_dtoa_r+0x7e8>
 800b812:	d099      	beq.n	800b748 <_dtoa_r+0x818>
 800b814:	9a08      	ldr	r2, [sp, #32]
 800b816:	331c      	adds	r3, #28
 800b818:	441a      	add	r2, r3
 800b81a:	4498      	add	r8, r3
 800b81c:	441e      	add	r6, r3
 800b81e:	9208      	str	r2, [sp, #32]
 800b820:	e792      	b.n	800b748 <_dtoa_r+0x818>
 800b822:	4603      	mov	r3, r0
 800b824:	e7f6      	b.n	800b814 <_dtoa_r+0x8e4>
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	9704      	str	r7, [sp, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	dc20      	bgt.n	800b870 <_dtoa_r+0x940>
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b832:	2b02      	cmp	r3, #2
 800b834:	dd1e      	ble.n	800b874 <_dtoa_r+0x944>
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	f47f aec0 	bne.w	800b5be <_dtoa_r+0x68e>
 800b83e:	4621      	mov	r1, r4
 800b840:	2205      	movs	r2, #5
 800b842:	4658      	mov	r0, fp
 800b844:	f000 fc54 	bl	800c0f0 <__multadd>
 800b848:	4601      	mov	r1, r0
 800b84a:	4604      	mov	r4, r0
 800b84c:	4648      	mov	r0, r9
 800b84e:	f000 fe67 	bl	800c520 <__mcmp>
 800b852:	2800      	cmp	r0, #0
 800b854:	f77f aeb3 	ble.w	800b5be <_dtoa_r+0x68e>
 800b858:	4656      	mov	r6, sl
 800b85a:	2331      	movs	r3, #49	@ 0x31
 800b85c:	f806 3b01 	strb.w	r3, [r6], #1
 800b860:	9b04      	ldr	r3, [sp, #16]
 800b862:	3301      	adds	r3, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	e6ae      	b.n	800b5c6 <_dtoa_r+0x696>
 800b868:	9c07      	ldr	r4, [sp, #28]
 800b86a:	9704      	str	r7, [sp, #16]
 800b86c:	4625      	mov	r5, r4
 800b86e:	e7f3      	b.n	800b858 <_dtoa_r+0x928>
 800b870:	9b07      	ldr	r3, [sp, #28]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b876:	2b00      	cmp	r3, #0
 800b878:	f000 8104 	beq.w	800ba84 <_dtoa_r+0xb54>
 800b87c:	2e00      	cmp	r6, #0
 800b87e:	dd05      	ble.n	800b88c <_dtoa_r+0x95c>
 800b880:	4629      	mov	r1, r5
 800b882:	4632      	mov	r2, r6
 800b884:	4658      	mov	r0, fp
 800b886:	f000 fddf 	bl	800c448 <__lshift>
 800b88a:	4605      	mov	r5, r0
 800b88c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d05a      	beq.n	800b948 <_dtoa_r+0xa18>
 800b892:	6869      	ldr	r1, [r5, #4]
 800b894:	4658      	mov	r0, fp
 800b896:	f000 fbc9 	bl	800c02c <_Balloc>
 800b89a:	4606      	mov	r6, r0
 800b89c:	b928      	cbnz	r0, 800b8aa <_dtoa_r+0x97a>
 800b89e:	4b84      	ldr	r3, [pc, #528]	@ (800bab0 <_dtoa_r+0xb80>)
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b8a6:	f7ff bb5a 	b.w	800af5e <_dtoa_r+0x2e>
 800b8aa:	692a      	ldr	r2, [r5, #16]
 800b8ac:	3202      	adds	r2, #2
 800b8ae:	0092      	lsls	r2, r2, #2
 800b8b0:	f105 010c 	add.w	r1, r5, #12
 800b8b4:	300c      	adds	r0, #12
 800b8b6:	f7ff faa4 	bl	800ae02 <memcpy>
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	4631      	mov	r1, r6
 800b8be:	4658      	mov	r0, fp
 800b8c0:	f000 fdc2 	bl	800c448 <__lshift>
 800b8c4:	f10a 0301 	add.w	r3, sl, #1
 800b8c8:	9307      	str	r3, [sp, #28]
 800b8ca:	9b00      	ldr	r3, [sp, #0]
 800b8cc:	4453      	add	r3, sl
 800b8ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8d0:	9b02      	ldr	r3, [sp, #8]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	462f      	mov	r7, r5
 800b8d8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8da:	4605      	mov	r5, r0
 800b8dc:	9b07      	ldr	r3, [sp, #28]
 800b8de:	4621      	mov	r1, r4
 800b8e0:	3b01      	subs	r3, #1
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	f7ff fa9a 	bl	800ae1e <quorem>
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	9002      	str	r0, [sp, #8]
 800b8ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b8f2:	4648      	mov	r0, r9
 800b8f4:	f000 fe14 	bl	800c520 <__mcmp>
 800b8f8:	462a      	mov	r2, r5
 800b8fa:	9008      	str	r0, [sp, #32]
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4658      	mov	r0, fp
 800b900:	f000 fe2a 	bl	800c558 <__mdiff>
 800b904:	68c2      	ldr	r2, [r0, #12]
 800b906:	4606      	mov	r6, r0
 800b908:	bb02      	cbnz	r2, 800b94c <_dtoa_r+0xa1c>
 800b90a:	4601      	mov	r1, r0
 800b90c:	4648      	mov	r0, r9
 800b90e:	f000 fe07 	bl	800c520 <__mcmp>
 800b912:	4602      	mov	r2, r0
 800b914:	4631      	mov	r1, r6
 800b916:	4658      	mov	r0, fp
 800b918:	920e      	str	r2, [sp, #56]	@ 0x38
 800b91a:	f000 fbc7 	bl	800c0ac <_Bfree>
 800b91e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b922:	9e07      	ldr	r6, [sp, #28]
 800b924:	ea43 0102 	orr.w	r1, r3, r2
 800b928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b92a:	4319      	orrs	r1, r3
 800b92c:	d110      	bne.n	800b950 <_dtoa_r+0xa20>
 800b92e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b932:	d029      	beq.n	800b988 <_dtoa_r+0xa58>
 800b934:	9b08      	ldr	r3, [sp, #32]
 800b936:	2b00      	cmp	r3, #0
 800b938:	dd02      	ble.n	800b940 <_dtoa_r+0xa10>
 800b93a:	9b02      	ldr	r3, [sp, #8]
 800b93c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b940:	9b00      	ldr	r3, [sp, #0]
 800b942:	f883 8000 	strb.w	r8, [r3]
 800b946:	e63f      	b.n	800b5c8 <_dtoa_r+0x698>
 800b948:	4628      	mov	r0, r5
 800b94a:	e7bb      	b.n	800b8c4 <_dtoa_r+0x994>
 800b94c:	2201      	movs	r2, #1
 800b94e:	e7e1      	b.n	800b914 <_dtoa_r+0x9e4>
 800b950:	9b08      	ldr	r3, [sp, #32]
 800b952:	2b00      	cmp	r3, #0
 800b954:	db04      	blt.n	800b960 <_dtoa_r+0xa30>
 800b956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b958:	430b      	orrs	r3, r1
 800b95a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b95c:	430b      	orrs	r3, r1
 800b95e:	d120      	bne.n	800b9a2 <_dtoa_r+0xa72>
 800b960:	2a00      	cmp	r2, #0
 800b962:	dded      	ble.n	800b940 <_dtoa_r+0xa10>
 800b964:	4649      	mov	r1, r9
 800b966:	2201      	movs	r2, #1
 800b968:	4658      	mov	r0, fp
 800b96a:	f000 fd6d 	bl	800c448 <__lshift>
 800b96e:	4621      	mov	r1, r4
 800b970:	4681      	mov	r9, r0
 800b972:	f000 fdd5 	bl	800c520 <__mcmp>
 800b976:	2800      	cmp	r0, #0
 800b978:	dc03      	bgt.n	800b982 <_dtoa_r+0xa52>
 800b97a:	d1e1      	bne.n	800b940 <_dtoa_r+0xa10>
 800b97c:	f018 0f01 	tst.w	r8, #1
 800b980:	d0de      	beq.n	800b940 <_dtoa_r+0xa10>
 800b982:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b986:	d1d8      	bne.n	800b93a <_dtoa_r+0xa0a>
 800b988:	9a00      	ldr	r2, [sp, #0]
 800b98a:	2339      	movs	r3, #57	@ 0x39
 800b98c:	7013      	strb	r3, [r2, #0]
 800b98e:	4633      	mov	r3, r6
 800b990:	461e      	mov	r6, r3
 800b992:	3b01      	subs	r3, #1
 800b994:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b998:	2a39      	cmp	r2, #57	@ 0x39
 800b99a:	d052      	beq.n	800ba42 <_dtoa_r+0xb12>
 800b99c:	3201      	adds	r2, #1
 800b99e:	701a      	strb	r2, [r3, #0]
 800b9a0:	e612      	b.n	800b5c8 <_dtoa_r+0x698>
 800b9a2:	2a00      	cmp	r2, #0
 800b9a4:	dd07      	ble.n	800b9b6 <_dtoa_r+0xa86>
 800b9a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b9aa:	d0ed      	beq.n	800b988 <_dtoa_r+0xa58>
 800b9ac:	9a00      	ldr	r2, [sp, #0]
 800b9ae:	f108 0301 	add.w	r3, r8, #1
 800b9b2:	7013      	strb	r3, [r2, #0]
 800b9b4:	e608      	b.n	800b5c8 <_dtoa_r+0x698>
 800b9b6:	9b07      	ldr	r3, [sp, #28]
 800b9b8:	9a07      	ldr	r2, [sp, #28]
 800b9ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b9be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	d028      	beq.n	800ba16 <_dtoa_r+0xae6>
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	220a      	movs	r2, #10
 800b9ca:	4658      	mov	r0, fp
 800b9cc:	f000 fb90 	bl	800c0f0 <__multadd>
 800b9d0:	42af      	cmp	r7, r5
 800b9d2:	4681      	mov	r9, r0
 800b9d4:	f04f 0300 	mov.w	r3, #0
 800b9d8:	f04f 020a 	mov.w	r2, #10
 800b9dc:	4639      	mov	r1, r7
 800b9de:	4658      	mov	r0, fp
 800b9e0:	d107      	bne.n	800b9f2 <_dtoa_r+0xac2>
 800b9e2:	f000 fb85 	bl	800c0f0 <__multadd>
 800b9e6:	4607      	mov	r7, r0
 800b9e8:	4605      	mov	r5, r0
 800b9ea:	9b07      	ldr	r3, [sp, #28]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	9307      	str	r3, [sp, #28]
 800b9f0:	e774      	b.n	800b8dc <_dtoa_r+0x9ac>
 800b9f2:	f000 fb7d 	bl	800c0f0 <__multadd>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4607      	mov	r7, r0
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	220a      	movs	r2, #10
 800b9fe:	4658      	mov	r0, fp
 800ba00:	f000 fb76 	bl	800c0f0 <__multadd>
 800ba04:	4605      	mov	r5, r0
 800ba06:	e7f0      	b.n	800b9ea <_dtoa_r+0xaba>
 800ba08:	9b00      	ldr	r3, [sp, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bfcc      	ite	gt
 800ba0e:	461e      	movgt	r6, r3
 800ba10:	2601      	movle	r6, #1
 800ba12:	4456      	add	r6, sl
 800ba14:	2700      	movs	r7, #0
 800ba16:	4649      	mov	r1, r9
 800ba18:	2201      	movs	r2, #1
 800ba1a:	4658      	mov	r0, fp
 800ba1c:	f000 fd14 	bl	800c448 <__lshift>
 800ba20:	4621      	mov	r1, r4
 800ba22:	4681      	mov	r9, r0
 800ba24:	f000 fd7c 	bl	800c520 <__mcmp>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	dcb0      	bgt.n	800b98e <_dtoa_r+0xa5e>
 800ba2c:	d102      	bne.n	800ba34 <_dtoa_r+0xb04>
 800ba2e:	f018 0f01 	tst.w	r8, #1
 800ba32:	d1ac      	bne.n	800b98e <_dtoa_r+0xa5e>
 800ba34:	4633      	mov	r3, r6
 800ba36:	461e      	mov	r6, r3
 800ba38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba3c:	2a30      	cmp	r2, #48	@ 0x30
 800ba3e:	d0fa      	beq.n	800ba36 <_dtoa_r+0xb06>
 800ba40:	e5c2      	b.n	800b5c8 <_dtoa_r+0x698>
 800ba42:	459a      	cmp	sl, r3
 800ba44:	d1a4      	bne.n	800b990 <_dtoa_r+0xa60>
 800ba46:	9b04      	ldr	r3, [sp, #16]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	9304      	str	r3, [sp, #16]
 800ba4c:	2331      	movs	r3, #49	@ 0x31
 800ba4e:	f88a 3000 	strb.w	r3, [sl]
 800ba52:	e5b9      	b.n	800b5c8 <_dtoa_r+0x698>
 800ba54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ba56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bab4 <_dtoa_r+0xb84>
 800ba5a:	b11b      	cbz	r3, 800ba64 <_dtoa_r+0xb34>
 800ba5c:	f10a 0308 	add.w	r3, sl, #8
 800ba60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	4650      	mov	r0, sl
 800ba66:	b019      	add	sp, #100	@ 0x64
 800ba68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	f77f ae37 	ble.w	800b6e2 <_dtoa_r+0x7b2>
 800ba74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba76:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba78:	2001      	movs	r0, #1
 800ba7a:	e655      	b.n	800b728 <_dtoa_r+0x7f8>
 800ba7c:	9b00      	ldr	r3, [sp, #0]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f77f aed6 	ble.w	800b830 <_dtoa_r+0x900>
 800ba84:	4656      	mov	r6, sl
 800ba86:	4621      	mov	r1, r4
 800ba88:	4648      	mov	r0, r9
 800ba8a:	f7ff f9c8 	bl	800ae1e <quorem>
 800ba8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba92:	f806 8b01 	strb.w	r8, [r6], #1
 800ba96:	9b00      	ldr	r3, [sp, #0]
 800ba98:	eba6 020a 	sub.w	r2, r6, sl
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	ddb3      	ble.n	800ba08 <_dtoa_r+0xad8>
 800baa0:	4649      	mov	r1, r9
 800baa2:	2300      	movs	r3, #0
 800baa4:	220a      	movs	r2, #10
 800baa6:	4658      	mov	r0, fp
 800baa8:	f000 fb22 	bl	800c0f0 <__multadd>
 800baac:	4681      	mov	r9, r0
 800baae:	e7ea      	b.n	800ba86 <_dtoa_r+0xb56>
 800bab0:	08021a84 	.word	0x08021a84
 800bab4:	08021a08 	.word	0x08021a08

0800bab8 <__ssputs_r>:
 800bab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	688e      	ldr	r6, [r1, #8]
 800babe:	461f      	mov	r7, r3
 800bac0:	42be      	cmp	r6, r7
 800bac2:	680b      	ldr	r3, [r1, #0]
 800bac4:	4682      	mov	sl, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	4690      	mov	r8, r2
 800baca:	d82d      	bhi.n	800bb28 <__ssputs_r+0x70>
 800bacc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bad4:	d026      	beq.n	800bb24 <__ssputs_r+0x6c>
 800bad6:	6965      	ldr	r5, [r4, #20]
 800bad8:	6909      	ldr	r1, [r1, #16]
 800bada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bade:	eba3 0901 	sub.w	r9, r3, r1
 800bae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bae6:	1c7b      	adds	r3, r7, #1
 800bae8:	444b      	add	r3, r9
 800baea:	106d      	asrs	r5, r5, #1
 800baec:	429d      	cmp	r5, r3
 800baee:	bf38      	it	cc
 800baf0:	461d      	movcc	r5, r3
 800baf2:	0553      	lsls	r3, r2, #21
 800baf4:	d527      	bpl.n	800bb46 <__ssputs_r+0x8e>
 800baf6:	4629      	mov	r1, r5
 800baf8:	f000 f960 	bl	800bdbc <_malloc_r>
 800bafc:	4606      	mov	r6, r0
 800bafe:	b360      	cbz	r0, 800bb5a <__ssputs_r+0xa2>
 800bb00:	6921      	ldr	r1, [r4, #16]
 800bb02:	464a      	mov	r2, r9
 800bb04:	f7ff f97d 	bl	800ae02 <memcpy>
 800bb08:	89a3      	ldrh	r3, [r4, #12]
 800bb0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb12:	81a3      	strh	r3, [r4, #12]
 800bb14:	6126      	str	r6, [r4, #16]
 800bb16:	6165      	str	r5, [r4, #20]
 800bb18:	444e      	add	r6, r9
 800bb1a:	eba5 0509 	sub.w	r5, r5, r9
 800bb1e:	6026      	str	r6, [r4, #0]
 800bb20:	60a5      	str	r5, [r4, #8]
 800bb22:	463e      	mov	r6, r7
 800bb24:	42be      	cmp	r6, r7
 800bb26:	d900      	bls.n	800bb2a <__ssputs_r+0x72>
 800bb28:	463e      	mov	r6, r7
 800bb2a:	6820      	ldr	r0, [r4, #0]
 800bb2c:	4632      	mov	r2, r6
 800bb2e:	4641      	mov	r1, r8
 800bb30:	f000 fe6f 	bl	800c812 <memmove>
 800bb34:	68a3      	ldr	r3, [r4, #8]
 800bb36:	1b9b      	subs	r3, r3, r6
 800bb38:	60a3      	str	r3, [r4, #8]
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	4433      	add	r3, r6
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	2000      	movs	r0, #0
 800bb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb46:	462a      	mov	r2, r5
 800bb48:	f000 fe35 	bl	800c7b6 <_realloc_r>
 800bb4c:	4606      	mov	r6, r0
 800bb4e:	2800      	cmp	r0, #0
 800bb50:	d1e0      	bne.n	800bb14 <__ssputs_r+0x5c>
 800bb52:	6921      	ldr	r1, [r4, #16]
 800bb54:	4650      	mov	r0, sl
 800bb56:	f000 feff 	bl	800c958 <_free_r>
 800bb5a:	230c      	movs	r3, #12
 800bb5c:	f8ca 3000 	str.w	r3, [sl]
 800bb60:	89a3      	ldrh	r3, [r4, #12]
 800bb62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb6c:	e7e9      	b.n	800bb42 <__ssputs_r+0x8a>
	...

0800bb70 <_svfiprintf_r>:
 800bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb74:	4698      	mov	r8, r3
 800bb76:	898b      	ldrh	r3, [r1, #12]
 800bb78:	061b      	lsls	r3, r3, #24
 800bb7a:	b09d      	sub	sp, #116	@ 0x74
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	460d      	mov	r5, r1
 800bb80:	4614      	mov	r4, r2
 800bb82:	d510      	bpl.n	800bba6 <_svfiprintf_r+0x36>
 800bb84:	690b      	ldr	r3, [r1, #16]
 800bb86:	b973      	cbnz	r3, 800bba6 <_svfiprintf_r+0x36>
 800bb88:	2140      	movs	r1, #64	@ 0x40
 800bb8a:	f000 f917 	bl	800bdbc <_malloc_r>
 800bb8e:	6028      	str	r0, [r5, #0]
 800bb90:	6128      	str	r0, [r5, #16]
 800bb92:	b930      	cbnz	r0, 800bba2 <_svfiprintf_r+0x32>
 800bb94:	230c      	movs	r3, #12
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb9c:	b01d      	add	sp, #116	@ 0x74
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bba2:	2340      	movs	r3, #64	@ 0x40
 800bba4:	616b      	str	r3, [r5, #20]
 800bba6:	2300      	movs	r3, #0
 800bba8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbaa:	2320      	movs	r3, #32
 800bbac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbb4:	2330      	movs	r3, #48	@ 0x30
 800bbb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd54 <_svfiprintf_r+0x1e4>
 800bbba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbbe:	f04f 0901 	mov.w	r9, #1
 800bbc2:	4623      	mov	r3, r4
 800bbc4:	469a      	mov	sl, r3
 800bbc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbca:	b10a      	cbz	r2, 800bbd0 <_svfiprintf_r+0x60>
 800bbcc:	2a25      	cmp	r2, #37	@ 0x25
 800bbce:	d1f9      	bne.n	800bbc4 <_svfiprintf_r+0x54>
 800bbd0:	ebba 0b04 	subs.w	fp, sl, r4
 800bbd4:	d00b      	beq.n	800bbee <_svfiprintf_r+0x7e>
 800bbd6:	465b      	mov	r3, fp
 800bbd8:	4622      	mov	r2, r4
 800bbda:	4629      	mov	r1, r5
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7ff ff6b 	bl	800bab8 <__ssputs_r>
 800bbe2:	3001      	adds	r0, #1
 800bbe4:	f000 80a7 	beq.w	800bd36 <_svfiprintf_r+0x1c6>
 800bbe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbea:	445a      	add	r2, fp
 800bbec:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbee:	f89a 3000 	ldrb.w	r3, [sl]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f000 809f 	beq.w	800bd36 <_svfiprintf_r+0x1c6>
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bbfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc02:	f10a 0a01 	add.w	sl, sl, #1
 800bc06:	9304      	str	r3, [sp, #16]
 800bc08:	9307      	str	r3, [sp, #28]
 800bc0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc10:	4654      	mov	r4, sl
 800bc12:	2205      	movs	r2, #5
 800bc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc18:	484e      	ldr	r0, [pc, #312]	@ (800bd54 <_svfiprintf_r+0x1e4>)
 800bc1a:	f7f4 fae1 	bl	80001e0 <memchr>
 800bc1e:	9a04      	ldr	r2, [sp, #16]
 800bc20:	b9d8      	cbnz	r0, 800bc5a <_svfiprintf_r+0xea>
 800bc22:	06d0      	lsls	r0, r2, #27
 800bc24:	bf44      	itt	mi
 800bc26:	2320      	movmi	r3, #32
 800bc28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc2c:	0711      	lsls	r1, r2, #28
 800bc2e:	bf44      	itt	mi
 800bc30:	232b      	movmi	r3, #43	@ 0x2b
 800bc32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc36:	f89a 3000 	ldrb.w	r3, [sl]
 800bc3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc3c:	d015      	beq.n	800bc6a <_svfiprintf_r+0xfa>
 800bc3e:	9a07      	ldr	r2, [sp, #28]
 800bc40:	4654      	mov	r4, sl
 800bc42:	2000      	movs	r0, #0
 800bc44:	f04f 0c0a 	mov.w	ip, #10
 800bc48:	4621      	mov	r1, r4
 800bc4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc4e:	3b30      	subs	r3, #48	@ 0x30
 800bc50:	2b09      	cmp	r3, #9
 800bc52:	d94b      	bls.n	800bcec <_svfiprintf_r+0x17c>
 800bc54:	b1b0      	cbz	r0, 800bc84 <_svfiprintf_r+0x114>
 800bc56:	9207      	str	r2, [sp, #28]
 800bc58:	e014      	b.n	800bc84 <_svfiprintf_r+0x114>
 800bc5a:	eba0 0308 	sub.w	r3, r0, r8
 800bc5e:	fa09 f303 	lsl.w	r3, r9, r3
 800bc62:	4313      	orrs	r3, r2
 800bc64:	9304      	str	r3, [sp, #16]
 800bc66:	46a2      	mov	sl, r4
 800bc68:	e7d2      	b.n	800bc10 <_svfiprintf_r+0xa0>
 800bc6a:	9b03      	ldr	r3, [sp, #12]
 800bc6c:	1d19      	adds	r1, r3, #4
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	9103      	str	r1, [sp, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	bfbb      	ittet	lt
 800bc76:	425b      	neglt	r3, r3
 800bc78:	f042 0202 	orrlt.w	r2, r2, #2
 800bc7c:	9307      	strge	r3, [sp, #28]
 800bc7e:	9307      	strlt	r3, [sp, #28]
 800bc80:	bfb8      	it	lt
 800bc82:	9204      	strlt	r2, [sp, #16]
 800bc84:	7823      	ldrb	r3, [r4, #0]
 800bc86:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc88:	d10a      	bne.n	800bca0 <_svfiprintf_r+0x130>
 800bc8a:	7863      	ldrb	r3, [r4, #1]
 800bc8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc8e:	d132      	bne.n	800bcf6 <_svfiprintf_r+0x186>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	1d1a      	adds	r2, r3, #4
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	9203      	str	r2, [sp, #12]
 800bc98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc9c:	3402      	adds	r4, #2
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd64 <_svfiprintf_r+0x1f4>
 800bca4:	7821      	ldrb	r1, [r4, #0]
 800bca6:	2203      	movs	r2, #3
 800bca8:	4650      	mov	r0, sl
 800bcaa:	f7f4 fa99 	bl	80001e0 <memchr>
 800bcae:	b138      	cbz	r0, 800bcc0 <_svfiprintf_r+0x150>
 800bcb0:	9b04      	ldr	r3, [sp, #16]
 800bcb2:	eba0 000a 	sub.w	r0, r0, sl
 800bcb6:	2240      	movs	r2, #64	@ 0x40
 800bcb8:	4082      	lsls	r2, r0
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	3401      	adds	r4, #1
 800bcbe:	9304      	str	r3, [sp, #16]
 800bcc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc4:	4824      	ldr	r0, [pc, #144]	@ (800bd58 <_svfiprintf_r+0x1e8>)
 800bcc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bcca:	2206      	movs	r2, #6
 800bccc:	f7f4 fa88 	bl	80001e0 <memchr>
 800bcd0:	2800      	cmp	r0, #0
 800bcd2:	d036      	beq.n	800bd42 <_svfiprintf_r+0x1d2>
 800bcd4:	4b21      	ldr	r3, [pc, #132]	@ (800bd5c <_svfiprintf_r+0x1ec>)
 800bcd6:	bb1b      	cbnz	r3, 800bd20 <_svfiprintf_r+0x1b0>
 800bcd8:	9b03      	ldr	r3, [sp, #12]
 800bcda:	3307      	adds	r3, #7
 800bcdc:	f023 0307 	bic.w	r3, r3, #7
 800bce0:	3308      	adds	r3, #8
 800bce2:	9303      	str	r3, [sp, #12]
 800bce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce6:	4433      	add	r3, r6
 800bce8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcea:	e76a      	b.n	800bbc2 <_svfiprintf_r+0x52>
 800bcec:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcf0:	460c      	mov	r4, r1
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	e7a8      	b.n	800bc48 <_svfiprintf_r+0xd8>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	3401      	adds	r4, #1
 800bcfa:	9305      	str	r3, [sp, #20]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	f04f 0c0a 	mov.w	ip, #10
 800bd02:	4620      	mov	r0, r4
 800bd04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd08:	3a30      	subs	r2, #48	@ 0x30
 800bd0a:	2a09      	cmp	r2, #9
 800bd0c:	d903      	bls.n	800bd16 <_svfiprintf_r+0x1a6>
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0c6      	beq.n	800bca0 <_svfiprintf_r+0x130>
 800bd12:	9105      	str	r1, [sp, #20]
 800bd14:	e7c4      	b.n	800bca0 <_svfiprintf_r+0x130>
 800bd16:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd1a:	4604      	mov	r4, r0
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	e7f0      	b.n	800bd02 <_svfiprintf_r+0x192>
 800bd20:	ab03      	add	r3, sp, #12
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	462a      	mov	r2, r5
 800bd26:	4b0e      	ldr	r3, [pc, #56]	@ (800bd60 <_svfiprintf_r+0x1f0>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	4638      	mov	r0, r7
 800bd2c:	f7fe fb96 	bl	800a45c <_printf_float>
 800bd30:	1c42      	adds	r2, r0, #1
 800bd32:	4606      	mov	r6, r0
 800bd34:	d1d6      	bne.n	800bce4 <_svfiprintf_r+0x174>
 800bd36:	89ab      	ldrh	r3, [r5, #12]
 800bd38:	065b      	lsls	r3, r3, #25
 800bd3a:	f53f af2d 	bmi.w	800bb98 <_svfiprintf_r+0x28>
 800bd3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd40:	e72c      	b.n	800bb9c <_svfiprintf_r+0x2c>
 800bd42:	ab03      	add	r3, sp, #12
 800bd44:	9300      	str	r3, [sp, #0]
 800bd46:	462a      	mov	r2, r5
 800bd48:	4b05      	ldr	r3, [pc, #20]	@ (800bd60 <_svfiprintf_r+0x1f0>)
 800bd4a:	a904      	add	r1, sp, #16
 800bd4c:	4638      	mov	r0, r7
 800bd4e:	f7fe fe1d 	bl	800a98c <_printf_i>
 800bd52:	e7ed      	b.n	800bd30 <_svfiprintf_r+0x1c0>
 800bd54:	08021a95 	.word	0x08021a95
 800bd58:	08021a9f 	.word	0x08021a9f
 800bd5c:	0800a45d 	.word	0x0800a45d
 800bd60:	0800bab9 	.word	0x0800bab9
 800bd64:	08021a9b 	.word	0x08021a9b

0800bd68 <malloc>:
 800bd68:	4b02      	ldr	r3, [pc, #8]	@ (800bd74 <malloc+0xc>)
 800bd6a:	4601      	mov	r1, r0
 800bd6c:	6818      	ldr	r0, [r3, #0]
 800bd6e:	f000 b825 	b.w	800bdbc <_malloc_r>
 800bd72:	bf00      	nop
 800bd74:	20000030 	.word	0x20000030

0800bd78 <sbrk_aligned>:
 800bd78:	b570      	push	{r4, r5, r6, lr}
 800bd7a:	4e0f      	ldr	r6, [pc, #60]	@ (800bdb8 <sbrk_aligned+0x40>)
 800bd7c:	460c      	mov	r4, r1
 800bd7e:	6831      	ldr	r1, [r6, #0]
 800bd80:	4605      	mov	r5, r0
 800bd82:	b911      	cbnz	r1, 800bd8a <sbrk_aligned+0x12>
 800bd84:	f000 fd94 	bl	800c8b0 <_sbrk_r>
 800bd88:	6030      	str	r0, [r6, #0]
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	f000 fd8f 	bl	800c8b0 <_sbrk_r>
 800bd92:	1c43      	adds	r3, r0, #1
 800bd94:	d103      	bne.n	800bd9e <sbrk_aligned+0x26>
 800bd96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	bd70      	pop	{r4, r5, r6, pc}
 800bd9e:	1cc4      	adds	r4, r0, #3
 800bda0:	f024 0403 	bic.w	r4, r4, #3
 800bda4:	42a0      	cmp	r0, r4
 800bda6:	d0f8      	beq.n	800bd9a <sbrk_aligned+0x22>
 800bda8:	1a21      	subs	r1, r4, r0
 800bdaa:	4628      	mov	r0, r5
 800bdac:	f000 fd80 	bl	800c8b0 <_sbrk_r>
 800bdb0:	3001      	adds	r0, #1
 800bdb2:	d1f2      	bne.n	800bd9a <sbrk_aligned+0x22>
 800bdb4:	e7ef      	b.n	800bd96 <sbrk_aligned+0x1e>
 800bdb6:	bf00      	nop
 800bdb8:	20005724 	.word	0x20005724

0800bdbc <_malloc_r>:
 800bdbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdc0:	1ccd      	adds	r5, r1, #3
 800bdc2:	f025 0503 	bic.w	r5, r5, #3
 800bdc6:	3508      	adds	r5, #8
 800bdc8:	2d0c      	cmp	r5, #12
 800bdca:	bf38      	it	cc
 800bdcc:	250c      	movcc	r5, #12
 800bdce:	2d00      	cmp	r5, #0
 800bdd0:	4606      	mov	r6, r0
 800bdd2:	db01      	blt.n	800bdd8 <_malloc_r+0x1c>
 800bdd4:	42a9      	cmp	r1, r5
 800bdd6:	d904      	bls.n	800bde2 <_malloc_r+0x26>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	6033      	str	r3, [r6, #0]
 800bddc:	2000      	movs	r0, #0
 800bdde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bde2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800beb8 <_malloc_r+0xfc>
 800bde6:	f000 f915 	bl	800c014 <__malloc_lock>
 800bdea:	f8d8 3000 	ldr.w	r3, [r8]
 800bdee:	461c      	mov	r4, r3
 800bdf0:	bb44      	cbnz	r4, 800be44 <_malloc_r+0x88>
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7ff ffbf 	bl	800bd78 <sbrk_aligned>
 800bdfa:	1c43      	adds	r3, r0, #1
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	d158      	bne.n	800beb2 <_malloc_r+0xf6>
 800be00:	f8d8 4000 	ldr.w	r4, [r8]
 800be04:	4627      	mov	r7, r4
 800be06:	2f00      	cmp	r7, #0
 800be08:	d143      	bne.n	800be92 <_malloc_r+0xd6>
 800be0a:	2c00      	cmp	r4, #0
 800be0c:	d04b      	beq.n	800bea6 <_malloc_r+0xea>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	4639      	mov	r1, r7
 800be12:	4630      	mov	r0, r6
 800be14:	eb04 0903 	add.w	r9, r4, r3
 800be18:	f000 fd4a 	bl	800c8b0 <_sbrk_r>
 800be1c:	4581      	cmp	r9, r0
 800be1e:	d142      	bne.n	800bea6 <_malloc_r+0xea>
 800be20:	6821      	ldr	r1, [r4, #0]
 800be22:	1a6d      	subs	r5, r5, r1
 800be24:	4629      	mov	r1, r5
 800be26:	4630      	mov	r0, r6
 800be28:	f7ff ffa6 	bl	800bd78 <sbrk_aligned>
 800be2c:	3001      	adds	r0, #1
 800be2e:	d03a      	beq.n	800bea6 <_malloc_r+0xea>
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	442b      	add	r3, r5
 800be34:	6023      	str	r3, [r4, #0]
 800be36:	f8d8 3000 	ldr.w	r3, [r8]
 800be3a:	685a      	ldr	r2, [r3, #4]
 800be3c:	bb62      	cbnz	r2, 800be98 <_malloc_r+0xdc>
 800be3e:	f8c8 7000 	str.w	r7, [r8]
 800be42:	e00f      	b.n	800be64 <_malloc_r+0xa8>
 800be44:	6822      	ldr	r2, [r4, #0]
 800be46:	1b52      	subs	r2, r2, r5
 800be48:	d420      	bmi.n	800be8c <_malloc_r+0xd0>
 800be4a:	2a0b      	cmp	r2, #11
 800be4c:	d917      	bls.n	800be7e <_malloc_r+0xc2>
 800be4e:	1961      	adds	r1, r4, r5
 800be50:	42a3      	cmp	r3, r4
 800be52:	6025      	str	r5, [r4, #0]
 800be54:	bf18      	it	ne
 800be56:	6059      	strne	r1, [r3, #4]
 800be58:	6863      	ldr	r3, [r4, #4]
 800be5a:	bf08      	it	eq
 800be5c:	f8c8 1000 	streq.w	r1, [r8]
 800be60:	5162      	str	r2, [r4, r5]
 800be62:	604b      	str	r3, [r1, #4]
 800be64:	4630      	mov	r0, r6
 800be66:	f000 f8db 	bl	800c020 <__malloc_unlock>
 800be6a:	f104 000b 	add.w	r0, r4, #11
 800be6e:	1d23      	adds	r3, r4, #4
 800be70:	f020 0007 	bic.w	r0, r0, #7
 800be74:	1ac2      	subs	r2, r0, r3
 800be76:	bf1c      	itt	ne
 800be78:	1a1b      	subne	r3, r3, r0
 800be7a:	50a3      	strne	r3, [r4, r2]
 800be7c:	e7af      	b.n	800bdde <_malloc_r+0x22>
 800be7e:	6862      	ldr	r2, [r4, #4]
 800be80:	42a3      	cmp	r3, r4
 800be82:	bf0c      	ite	eq
 800be84:	f8c8 2000 	streq.w	r2, [r8]
 800be88:	605a      	strne	r2, [r3, #4]
 800be8a:	e7eb      	b.n	800be64 <_malloc_r+0xa8>
 800be8c:	4623      	mov	r3, r4
 800be8e:	6864      	ldr	r4, [r4, #4]
 800be90:	e7ae      	b.n	800bdf0 <_malloc_r+0x34>
 800be92:	463c      	mov	r4, r7
 800be94:	687f      	ldr	r7, [r7, #4]
 800be96:	e7b6      	b.n	800be06 <_malloc_r+0x4a>
 800be98:	461a      	mov	r2, r3
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	42a3      	cmp	r3, r4
 800be9e:	d1fb      	bne.n	800be98 <_malloc_r+0xdc>
 800bea0:	2300      	movs	r3, #0
 800bea2:	6053      	str	r3, [r2, #4]
 800bea4:	e7de      	b.n	800be64 <_malloc_r+0xa8>
 800bea6:	230c      	movs	r3, #12
 800bea8:	6033      	str	r3, [r6, #0]
 800beaa:	4630      	mov	r0, r6
 800beac:	f000 f8b8 	bl	800c020 <__malloc_unlock>
 800beb0:	e794      	b.n	800bddc <_malloc_r+0x20>
 800beb2:	6005      	str	r5, [r0, #0]
 800beb4:	e7d6      	b.n	800be64 <_malloc_r+0xa8>
 800beb6:	bf00      	nop
 800beb8:	20005728 	.word	0x20005728

0800bebc <__sflush_r>:
 800bebc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bec4:	0716      	lsls	r6, r2, #28
 800bec6:	4605      	mov	r5, r0
 800bec8:	460c      	mov	r4, r1
 800beca:	d454      	bmi.n	800bf76 <__sflush_r+0xba>
 800becc:	684b      	ldr	r3, [r1, #4]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	dc02      	bgt.n	800bed8 <__sflush_r+0x1c>
 800bed2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dd48      	ble.n	800bf6a <__sflush_r+0xae>
 800bed8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800beda:	2e00      	cmp	r6, #0
 800bedc:	d045      	beq.n	800bf6a <__sflush_r+0xae>
 800bede:	2300      	movs	r3, #0
 800bee0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bee4:	682f      	ldr	r7, [r5, #0]
 800bee6:	6a21      	ldr	r1, [r4, #32]
 800bee8:	602b      	str	r3, [r5, #0]
 800beea:	d030      	beq.n	800bf4e <__sflush_r+0x92>
 800beec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800beee:	89a3      	ldrh	r3, [r4, #12]
 800bef0:	0759      	lsls	r1, r3, #29
 800bef2:	d505      	bpl.n	800bf00 <__sflush_r+0x44>
 800bef4:	6863      	ldr	r3, [r4, #4]
 800bef6:	1ad2      	subs	r2, r2, r3
 800bef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800befa:	b10b      	cbz	r3, 800bf00 <__sflush_r+0x44>
 800befc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800befe:	1ad2      	subs	r2, r2, r3
 800bf00:	2300      	movs	r3, #0
 800bf02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf04:	6a21      	ldr	r1, [r4, #32]
 800bf06:	4628      	mov	r0, r5
 800bf08:	47b0      	blx	r6
 800bf0a:	1c43      	adds	r3, r0, #1
 800bf0c:	89a3      	ldrh	r3, [r4, #12]
 800bf0e:	d106      	bne.n	800bf1e <__sflush_r+0x62>
 800bf10:	6829      	ldr	r1, [r5, #0]
 800bf12:	291d      	cmp	r1, #29
 800bf14:	d82b      	bhi.n	800bf6e <__sflush_r+0xb2>
 800bf16:	4a2a      	ldr	r2, [pc, #168]	@ (800bfc0 <__sflush_r+0x104>)
 800bf18:	410a      	asrs	r2, r1
 800bf1a:	07d6      	lsls	r6, r2, #31
 800bf1c:	d427      	bmi.n	800bf6e <__sflush_r+0xb2>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	6062      	str	r2, [r4, #4]
 800bf22:	04d9      	lsls	r1, r3, #19
 800bf24:	6922      	ldr	r2, [r4, #16]
 800bf26:	6022      	str	r2, [r4, #0]
 800bf28:	d504      	bpl.n	800bf34 <__sflush_r+0x78>
 800bf2a:	1c42      	adds	r2, r0, #1
 800bf2c:	d101      	bne.n	800bf32 <__sflush_r+0x76>
 800bf2e:	682b      	ldr	r3, [r5, #0]
 800bf30:	b903      	cbnz	r3, 800bf34 <__sflush_r+0x78>
 800bf32:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf36:	602f      	str	r7, [r5, #0]
 800bf38:	b1b9      	cbz	r1, 800bf6a <__sflush_r+0xae>
 800bf3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf3e:	4299      	cmp	r1, r3
 800bf40:	d002      	beq.n	800bf48 <__sflush_r+0x8c>
 800bf42:	4628      	mov	r0, r5
 800bf44:	f000 fd08 	bl	800c958 <_free_r>
 800bf48:	2300      	movs	r3, #0
 800bf4a:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf4c:	e00d      	b.n	800bf6a <__sflush_r+0xae>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4628      	mov	r0, r5
 800bf52:	47b0      	blx	r6
 800bf54:	4602      	mov	r2, r0
 800bf56:	1c50      	adds	r0, r2, #1
 800bf58:	d1c9      	bne.n	800beee <__sflush_r+0x32>
 800bf5a:	682b      	ldr	r3, [r5, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d0c6      	beq.n	800beee <__sflush_r+0x32>
 800bf60:	2b1d      	cmp	r3, #29
 800bf62:	d001      	beq.n	800bf68 <__sflush_r+0xac>
 800bf64:	2b16      	cmp	r3, #22
 800bf66:	d11e      	bne.n	800bfa6 <__sflush_r+0xea>
 800bf68:	602f      	str	r7, [r5, #0]
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	e022      	b.n	800bfb4 <__sflush_r+0xf8>
 800bf6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf72:	b21b      	sxth	r3, r3
 800bf74:	e01b      	b.n	800bfae <__sflush_r+0xf2>
 800bf76:	690f      	ldr	r7, [r1, #16]
 800bf78:	2f00      	cmp	r7, #0
 800bf7a:	d0f6      	beq.n	800bf6a <__sflush_r+0xae>
 800bf7c:	0793      	lsls	r3, r2, #30
 800bf7e:	680e      	ldr	r6, [r1, #0]
 800bf80:	bf08      	it	eq
 800bf82:	694b      	ldreq	r3, [r1, #20]
 800bf84:	600f      	str	r7, [r1, #0]
 800bf86:	bf18      	it	ne
 800bf88:	2300      	movne	r3, #0
 800bf8a:	eba6 0807 	sub.w	r8, r6, r7
 800bf8e:	608b      	str	r3, [r1, #8]
 800bf90:	f1b8 0f00 	cmp.w	r8, #0
 800bf94:	dde9      	ble.n	800bf6a <__sflush_r+0xae>
 800bf96:	6a21      	ldr	r1, [r4, #32]
 800bf98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf9a:	4643      	mov	r3, r8
 800bf9c:	463a      	mov	r2, r7
 800bf9e:	4628      	mov	r0, r5
 800bfa0:	47b0      	blx	r6
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	dc08      	bgt.n	800bfb8 <__sflush_r+0xfc>
 800bfa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfae:	81a3      	strh	r3, [r4, #12]
 800bfb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb8:	4407      	add	r7, r0
 800bfba:	eba8 0800 	sub.w	r8, r8, r0
 800bfbe:	e7e7      	b.n	800bf90 <__sflush_r+0xd4>
 800bfc0:	dfbffffe 	.word	0xdfbffffe

0800bfc4 <_fflush_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	690b      	ldr	r3, [r1, #16]
 800bfc8:	4605      	mov	r5, r0
 800bfca:	460c      	mov	r4, r1
 800bfcc:	b913      	cbnz	r3, 800bfd4 <_fflush_r+0x10>
 800bfce:	2500      	movs	r5, #0
 800bfd0:	4628      	mov	r0, r5
 800bfd2:	bd38      	pop	{r3, r4, r5, pc}
 800bfd4:	b118      	cbz	r0, 800bfde <_fflush_r+0x1a>
 800bfd6:	6a03      	ldr	r3, [r0, #32]
 800bfd8:	b90b      	cbnz	r3, 800bfde <_fflush_r+0x1a>
 800bfda:	f7fe fea3 	bl	800ad24 <__sinit>
 800bfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d0f3      	beq.n	800bfce <_fflush_r+0xa>
 800bfe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfe8:	07d0      	lsls	r0, r2, #31
 800bfea:	d404      	bmi.n	800bff6 <_fflush_r+0x32>
 800bfec:	0599      	lsls	r1, r3, #22
 800bfee:	d402      	bmi.n	800bff6 <_fflush_r+0x32>
 800bff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bff2:	f7fe ff04 	bl	800adfe <__retarget_lock_acquire_recursive>
 800bff6:	4628      	mov	r0, r5
 800bff8:	4621      	mov	r1, r4
 800bffa:	f7ff ff5f 	bl	800bebc <__sflush_r>
 800bffe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c000:	07da      	lsls	r2, r3, #31
 800c002:	4605      	mov	r5, r0
 800c004:	d4e4      	bmi.n	800bfd0 <_fflush_r+0xc>
 800c006:	89a3      	ldrh	r3, [r4, #12]
 800c008:	059b      	lsls	r3, r3, #22
 800c00a:	d4e1      	bmi.n	800bfd0 <_fflush_r+0xc>
 800c00c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c00e:	f7fe fef7 	bl	800ae00 <__retarget_lock_release_recursive>
 800c012:	e7dd      	b.n	800bfd0 <_fflush_r+0xc>

0800c014 <__malloc_lock>:
 800c014:	4801      	ldr	r0, [pc, #4]	@ (800c01c <__malloc_lock+0x8>)
 800c016:	f7fe bef2 	b.w	800adfe <__retarget_lock_acquire_recursive>
 800c01a:	bf00      	nop
 800c01c:	20005720 	.word	0x20005720

0800c020 <__malloc_unlock>:
 800c020:	4801      	ldr	r0, [pc, #4]	@ (800c028 <__malloc_unlock+0x8>)
 800c022:	f7fe beed 	b.w	800ae00 <__retarget_lock_release_recursive>
 800c026:	bf00      	nop
 800c028:	20005720 	.word	0x20005720

0800c02c <_Balloc>:
 800c02c:	b570      	push	{r4, r5, r6, lr}
 800c02e:	69c6      	ldr	r6, [r0, #28]
 800c030:	4604      	mov	r4, r0
 800c032:	460d      	mov	r5, r1
 800c034:	b976      	cbnz	r6, 800c054 <_Balloc+0x28>
 800c036:	2010      	movs	r0, #16
 800c038:	f7ff fe96 	bl	800bd68 <malloc>
 800c03c:	4602      	mov	r2, r0
 800c03e:	61e0      	str	r0, [r4, #28]
 800c040:	b920      	cbnz	r0, 800c04c <_Balloc+0x20>
 800c042:	4b18      	ldr	r3, [pc, #96]	@ (800c0a4 <_Balloc+0x78>)
 800c044:	4818      	ldr	r0, [pc, #96]	@ (800c0a8 <_Balloc+0x7c>)
 800c046:	216b      	movs	r1, #107	@ 0x6b
 800c048:	f000 fc54 	bl	800c8f4 <__assert_func>
 800c04c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c050:	6006      	str	r6, [r0, #0]
 800c052:	60c6      	str	r6, [r0, #12]
 800c054:	69e6      	ldr	r6, [r4, #28]
 800c056:	68f3      	ldr	r3, [r6, #12]
 800c058:	b183      	cbz	r3, 800c07c <_Balloc+0x50>
 800c05a:	69e3      	ldr	r3, [r4, #28]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c062:	b9b8      	cbnz	r0, 800c094 <_Balloc+0x68>
 800c064:	2101      	movs	r1, #1
 800c066:	fa01 f605 	lsl.w	r6, r1, r5
 800c06a:	1d72      	adds	r2, r6, #5
 800c06c:	0092      	lsls	r2, r2, #2
 800c06e:	4620      	mov	r0, r4
 800c070:	f000 fc5e 	bl	800c930 <_calloc_r>
 800c074:	b160      	cbz	r0, 800c090 <_Balloc+0x64>
 800c076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c07a:	e00e      	b.n	800c09a <_Balloc+0x6e>
 800c07c:	2221      	movs	r2, #33	@ 0x21
 800c07e:	2104      	movs	r1, #4
 800c080:	4620      	mov	r0, r4
 800c082:	f000 fc55 	bl	800c930 <_calloc_r>
 800c086:	69e3      	ldr	r3, [r4, #28]
 800c088:	60f0      	str	r0, [r6, #12]
 800c08a:	68db      	ldr	r3, [r3, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e4      	bne.n	800c05a <_Balloc+0x2e>
 800c090:	2000      	movs	r0, #0
 800c092:	bd70      	pop	{r4, r5, r6, pc}
 800c094:	6802      	ldr	r2, [r0, #0]
 800c096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c09a:	2300      	movs	r3, #0
 800c09c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0a0:	e7f7      	b.n	800c092 <_Balloc+0x66>
 800c0a2:	bf00      	nop
 800c0a4:	08021a15 	.word	0x08021a15
 800c0a8:	08021aa6 	.word	0x08021aa6

0800c0ac <_Bfree>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	69c6      	ldr	r6, [r0, #28]
 800c0b0:	4605      	mov	r5, r0
 800c0b2:	460c      	mov	r4, r1
 800c0b4:	b976      	cbnz	r6, 800c0d4 <_Bfree+0x28>
 800c0b6:	2010      	movs	r0, #16
 800c0b8:	f7ff fe56 	bl	800bd68 <malloc>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	61e8      	str	r0, [r5, #28]
 800c0c0:	b920      	cbnz	r0, 800c0cc <_Bfree+0x20>
 800c0c2:	4b09      	ldr	r3, [pc, #36]	@ (800c0e8 <_Bfree+0x3c>)
 800c0c4:	4809      	ldr	r0, [pc, #36]	@ (800c0ec <_Bfree+0x40>)
 800c0c6:	218f      	movs	r1, #143	@ 0x8f
 800c0c8:	f000 fc14 	bl	800c8f4 <__assert_func>
 800c0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0d0:	6006      	str	r6, [r0, #0]
 800c0d2:	60c6      	str	r6, [r0, #12]
 800c0d4:	b13c      	cbz	r4, 800c0e6 <_Bfree+0x3a>
 800c0d6:	69eb      	ldr	r3, [r5, #28]
 800c0d8:	6862      	ldr	r2, [r4, #4]
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0e0:	6021      	str	r1, [r4, #0]
 800c0e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	08021a15 	.word	0x08021a15
 800c0ec:	08021aa6 	.word	0x08021aa6

0800c0f0 <__multadd>:
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	690d      	ldr	r5, [r1, #16]
 800c0f6:	4607      	mov	r7, r0
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	461e      	mov	r6, r3
 800c0fc:	f101 0c14 	add.w	ip, r1, #20
 800c100:	2000      	movs	r0, #0
 800c102:	f8dc 3000 	ldr.w	r3, [ip]
 800c106:	b299      	uxth	r1, r3
 800c108:	fb02 6101 	mla	r1, r2, r1, r6
 800c10c:	0c1e      	lsrs	r6, r3, #16
 800c10e:	0c0b      	lsrs	r3, r1, #16
 800c110:	fb02 3306 	mla	r3, r2, r6, r3
 800c114:	b289      	uxth	r1, r1
 800c116:	3001      	adds	r0, #1
 800c118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c11c:	4285      	cmp	r5, r0
 800c11e:	f84c 1b04 	str.w	r1, [ip], #4
 800c122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c126:	dcec      	bgt.n	800c102 <__multadd+0x12>
 800c128:	b30e      	cbz	r6, 800c16e <__multadd+0x7e>
 800c12a:	68a3      	ldr	r3, [r4, #8]
 800c12c:	42ab      	cmp	r3, r5
 800c12e:	dc19      	bgt.n	800c164 <__multadd+0x74>
 800c130:	6861      	ldr	r1, [r4, #4]
 800c132:	4638      	mov	r0, r7
 800c134:	3101      	adds	r1, #1
 800c136:	f7ff ff79 	bl	800c02c <_Balloc>
 800c13a:	4680      	mov	r8, r0
 800c13c:	b928      	cbnz	r0, 800c14a <__multadd+0x5a>
 800c13e:	4602      	mov	r2, r0
 800c140:	4b0c      	ldr	r3, [pc, #48]	@ (800c174 <__multadd+0x84>)
 800c142:	480d      	ldr	r0, [pc, #52]	@ (800c178 <__multadd+0x88>)
 800c144:	21ba      	movs	r1, #186	@ 0xba
 800c146:	f000 fbd5 	bl	800c8f4 <__assert_func>
 800c14a:	6922      	ldr	r2, [r4, #16]
 800c14c:	3202      	adds	r2, #2
 800c14e:	f104 010c 	add.w	r1, r4, #12
 800c152:	0092      	lsls	r2, r2, #2
 800c154:	300c      	adds	r0, #12
 800c156:	f7fe fe54 	bl	800ae02 <memcpy>
 800c15a:	4621      	mov	r1, r4
 800c15c:	4638      	mov	r0, r7
 800c15e:	f7ff ffa5 	bl	800c0ac <_Bfree>
 800c162:	4644      	mov	r4, r8
 800c164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c168:	3501      	adds	r5, #1
 800c16a:	615e      	str	r6, [r3, #20]
 800c16c:	6125      	str	r5, [r4, #16]
 800c16e:	4620      	mov	r0, r4
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	08021a84 	.word	0x08021a84
 800c178:	08021aa6 	.word	0x08021aa6

0800c17c <__hi0bits>:
 800c17c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c180:	4603      	mov	r3, r0
 800c182:	bf36      	itet	cc
 800c184:	0403      	lslcc	r3, r0, #16
 800c186:	2000      	movcs	r0, #0
 800c188:	2010      	movcc	r0, #16
 800c18a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c18e:	bf3c      	itt	cc
 800c190:	021b      	lslcc	r3, r3, #8
 800c192:	3008      	addcc	r0, #8
 800c194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c198:	bf3c      	itt	cc
 800c19a:	011b      	lslcc	r3, r3, #4
 800c19c:	3004      	addcc	r0, #4
 800c19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1a2:	bf3c      	itt	cc
 800c1a4:	009b      	lslcc	r3, r3, #2
 800c1a6:	3002      	addcc	r0, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	db05      	blt.n	800c1b8 <__hi0bits+0x3c>
 800c1ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c1b0:	f100 0001 	add.w	r0, r0, #1
 800c1b4:	bf08      	it	eq
 800c1b6:	2020      	moveq	r0, #32
 800c1b8:	4770      	bx	lr

0800c1ba <__lo0bits>:
 800c1ba:	6803      	ldr	r3, [r0, #0]
 800c1bc:	4602      	mov	r2, r0
 800c1be:	f013 0007 	ands.w	r0, r3, #7
 800c1c2:	d00b      	beq.n	800c1dc <__lo0bits+0x22>
 800c1c4:	07d9      	lsls	r1, r3, #31
 800c1c6:	d421      	bmi.n	800c20c <__lo0bits+0x52>
 800c1c8:	0798      	lsls	r0, r3, #30
 800c1ca:	bf49      	itett	mi
 800c1cc:	085b      	lsrmi	r3, r3, #1
 800c1ce:	089b      	lsrpl	r3, r3, #2
 800c1d0:	2001      	movmi	r0, #1
 800c1d2:	6013      	strmi	r3, [r2, #0]
 800c1d4:	bf5c      	itt	pl
 800c1d6:	6013      	strpl	r3, [r2, #0]
 800c1d8:	2002      	movpl	r0, #2
 800c1da:	4770      	bx	lr
 800c1dc:	b299      	uxth	r1, r3
 800c1de:	b909      	cbnz	r1, 800c1e4 <__lo0bits+0x2a>
 800c1e0:	0c1b      	lsrs	r3, r3, #16
 800c1e2:	2010      	movs	r0, #16
 800c1e4:	b2d9      	uxtb	r1, r3
 800c1e6:	b909      	cbnz	r1, 800c1ec <__lo0bits+0x32>
 800c1e8:	3008      	adds	r0, #8
 800c1ea:	0a1b      	lsrs	r3, r3, #8
 800c1ec:	0719      	lsls	r1, r3, #28
 800c1ee:	bf04      	itt	eq
 800c1f0:	091b      	lsreq	r3, r3, #4
 800c1f2:	3004      	addeq	r0, #4
 800c1f4:	0799      	lsls	r1, r3, #30
 800c1f6:	bf04      	itt	eq
 800c1f8:	089b      	lsreq	r3, r3, #2
 800c1fa:	3002      	addeq	r0, #2
 800c1fc:	07d9      	lsls	r1, r3, #31
 800c1fe:	d403      	bmi.n	800c208 <__lo0bits+0x4e>
 800c200:	085b      	lsrs	r3, r3, #1
 800c202:	f100 0001 	add.w	r0, r0, #1
 800c206:	d003      	beq.n	800c210 <__lo0bits+0x56>
 800c208:	6013      	str	r3, [r2, #0]
 800c20a:	4770      	bx	lr
 800c20c:	2000      	movs	r0, #0
 800c20e:	4770      	bx	lr
 800c210:	2020      	movs	r0, #32
 800c212:	4770      	bx	lr

0800c214 <__i2b>:
 800c214:	b510      	push	{r4, lr}
 800c216:	460c      	mov	r4, r1
 800c218:	2101      	movs	r1, #1
 800c21a:	f7ff ff07 	bl	800c02c <_Balloc>
 800c21e:	4602      	mov	r2, r0
 800c220:	b928      	cbnz	r0, 800c22e <__i2b+0x1a>
 800c222:	4b05      	ldr	r3, [pc, #20]	@ (800c238 <__i2b+0x24>)
 800c224:	4805      	ldr	r0, [pc, #20]	@ (800c23c <__i2b+0x28>)
 800c226:	f240 1145 	movw	r1, #325	@ 0x145
 800c22a:	f000 fb63 	bl	800c8f4 <__assert_func>
 800c22e:	2301      	movs	r3, #1
 800c230:	6144      	str	r4, [r0, #20]
 800c232:	6103      	str	r3, [r0, #16]
 800c234:	bd10      	pop	{r4, pc}
 800c236:	bf00      	nop
 800c238:	08021a84 	.word	0x08021a84
 800c23c:	08021aa6 	.word	0x08021aa6

0800c240 <__multiply>:
 800c240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c244:	4614      	mov	r4, r2
 800c246:	690a      	ldr	r2, [r1, #16]
 800c248:	6923      	ldr	r3, [r4, #16]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	bfa8      	it	ge
 800c24e:	4623      	movge	r3, r4
 800c250:	460f      	mov	r7, r1
 800c252:	bfa4      	itt	ge
 800c254:	460c      	movge	r4, r1
 800c256:	461f      	movge	r7, r3
 800c258:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c25c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c260:	68a3      	ldr	r3, [r4, #8]
 800c262:	6861      	ldr	r1, [r4, #4]
 800c264:	eb0a 0609 	add.w	r6, sl, r9
 800c268:	42b3      	cmp	r3, r6
 800c26a:	b085      	sub	sp, #20
 800c26c:	bfb8      	it	lt
 800c26e:	3101      	addlt	r1, #1
 800c270:	f7ff fedc 	bl	800c02c <_Balloc>
 800c274:	b930      	cbnz	r0, 800c284 <__multiply+0x44>
 800c276:	4602      	mov	r2, r0
 800c278:	4b44      	ldr	r3, [pc, #272]	@ (800c38c <__multiply+0x14c>)
 800c27a:	4845      	ldr	r0, [pc, #276]	@ (800c390 <__multiply+0x150>)
 800c27c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c280:	f000 fb38 	bl	800c8f4 <__assert_func>
 800c284:	f100 0514 	add.w	r5, r0, #20
 800c288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c28c:	462b      	mov	r3, r5
 800c28e:	2200      	movs	r2, #0
 800c290:	4543      	cmp	r3, r8
 800c292:	d321      	bcc.n	800c2d8 <__multiply+0x98>
 800c294:	f107 0114 	add.w	r1, r7, #20
 800c298:	f104 0214 	add.w	r2, r4, #20
 800c29c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c2a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c2a4:	9302      	str	r3, [sp, #8]
 800c2a6:	1b13      	subs	r3, r2, r4
 800c2a8:	3b15      	subs	r3, #21
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	f104 0715 	add.w	r7, r4, #21
 800c2b4:	42ba      	cmp	r2, r7
 800c2b6:	bf38      	it	cc
 800c2b8:	2304      	movcc	r3, #4
 800c2ba:	9301      	str	r3, [sp, #4]
 800c2bc:	9b02      	ldr	r3, [sp, #8]
 800c2be:	9103      	str	r1, [sp, #12]
 800c2c0:	428b      	cmp	r3, r1
 800c2c2:	d80c      	bhi.n	800c2de <__multiply+0x9e>
 800c2c4:	2e00      	cmp	r6, #0
 800c2c6:	dd03      	ble.n	800c2d0 <__multiply+0x90>
 800c2c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d05b      	beq.n	800c388 <__multiply+0x148>
 800c2d0:	6106      	str	r6, [r0, #16]
 800c2d2:	b005      	add	sp, #20
 800c2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d8:	f843 2b04 	str.w	r2, [r3], #4
 800c2dc:	e7d8      	b.n	800c290 <__multiply+0x50>
 800c2de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c2e2:	f1ba 0f00 	cmp.w	sl, #0
 800c2e6:	d024      	beq.n	800c332 <__multiply+0xf2>
 800c2e8:	f104 0e14 	add.w	lr, r4, #20
 800c2ec:	46a9      	mov	r9, r5
 800c2ee:	f04f 0c00 	mov.w	ip, #0
 800c2f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c2fa:	fa1f fb87 	uxth.w	fp, r7
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	fb0a 330b 	mla	r3, sl, fp, r3
 800c304:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c308:	f8d9 7000 	ldr.w	r7, [r9]
 800c30c:	4463      	add	r3, ip
 800c30e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c312:	fb0a c70b 	mla	r7, sl, fp, ip
 800c316:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c31a:	b29b      	uxth	r3, r3
 800c31c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c320:	4572      	cmp	r2, lr
 800c322:	f849 3b04 	str.w	r3, [r9], #4
 800c326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c32a:	d8e2      	bhi.n	800c2f2 <__multiply+0xb2>
 800c32c:	9b01      	ldr	r3, [sp, #4]
 800c32e:	f845 c003 	str.w	ip, [r5, r3]
 800c332:	9b03      	ldr	r3, [sp, #12]
 800c334:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c338:	3104      	adds	r1, #4
 800c33a:	f1b9 0f00 	cmp.w	r9, #0
 800c33e:	d021      	beq.n	800c384 <__multiply+0x144>
 800c340:	682b      	ldr	r3, [r5, #0]
 800c342:	f104 0c14 	add.w	ip, r4, #20
 800c346:	46ae      	mov	lr, r5
 800c348:	f04f 0a00 	mov.w	sl, #0
 800c34c:	f8bc b000 	ldrh.w	fp, [ip]
 800c350:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c354:	fb09 770b 	mla	r7, r9, fp, r7
 800c358:	4457      	add	r7, sl
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c360:	f84e 3b04 	str.w	r3, [lr], #4
 800c364:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c36c:	f8be 3000 	ldrh.w	r3, [lr]
 800c370:	fb09 330a 	mla	r3, r9, sl, r3
 800c374:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c378:	4562      	cmp	r2, ip
 800c37a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c37e:	d8e5      	bhi.n	800c34c <__multiply+0x10c>
 800c380:	9f01      	ldr	r7, [sp, #4]
 800c382:	51eb      	str	r3, [r5, r7]
 800c384:	3504      	adds	r5, #4
 800c386:	e799      	b.n	800c2bc <__multiply+0x7c>
 800c388:	3e01      	subs	r6, #1
 800c38a:	e79b      	b.n	800c2c4 <__multiply+0x84>
 800c38c:	08021a84 	.word	0x08021a84
 800c390:	08021aa6 	.word	0x08021aa6

0800c394 <__pow5mult>:
 800c394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c398:	4615      	mov	r5, r2
 800c39a:	f012 0203 	ands.w	r2, r2, #3
 800c39e:	4607      	mov	r7, r0
 800c3a0:	460e      	mov	r6, r1
 800c3a2:	d007      	beq.n	800c3b4 <__pow5mult+0x20>
 800c3a4:	4c25      	ldr	r4, [pc, #148]	@ (800c43c <__pow5mult+0xa8>)
 800c3a6:	3a01      	subs	r2, #1
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c3ae:	f7ff fe9f 	bl	800c0f0 <__multadd>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	10ad      	asrs	r5, r5, #2
 800c3b6:	d03d      	beq.n	800c434 <__pow5mult+0xa0>
 800c3b8:	69fc      	ldr	r4, [r7, #28]
 800c3ba:	b97c      	cbnz	r4, 800c3dc <__pow5mult+0x48>
 800c3bc:	2010      	movs	r0, #16
 800c3be:	f7ff fcd3 	bl	800bd68 <malloc>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	61f8      	str	r0, [r7, #28]
 800c3c6:	b928      	cbnz	r0, 800c3d4 <__pow5mult+0x40>
 800c3c8:	4b1d      	ldr	r3, [pc, #116]	@ (800c440 <__pow5mult+0xac>)
 800c3ca:	481e      	ldr	r0, [pc, #120]	@ (800c444 <__pow5mult+0xb0>)
 800c3cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c3d0:	f000 fa90 	bl	800c8f4 <__assert_func>
 800c3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3d8:	6004      	str	r4, [r0, #0]
 800c3da:	60c4      	str	r4, [r0, #12]
 800c3dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3e4:	b94c      	cbnz	r4, 800c3fa <__pow5mult+0x66>
 800c3e6:	f240 2171 	movw	r1, #625	@ 0x271
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f7ff ff12 	bl	800c214 <__i2b>
 800c3f0:	2300      	movs	r3, #0
 800c3f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	6003      	str	r3, [r0, #0]
 800c3fa:	f04f 0900 	mov.w	r9, #0
 800c3fe:	07eb      	lsls	r3, r5, #31
 800c400:	d50a      	bpl.n	800c418 <__pow5mult+0x84>
 800c402:	4631      	mov	r1, r6
 800c404:	4622      	mov	r2, r4
 800c406:	4638      	mov	r0, r7
 800c408:	f7ff ff1a 	bl	800c240 <__multiply>
 800c40c:	4631      	mov	r1, r6
 800c40e:	4680      	mov	r8, r0
 800c410:	4638      	mov	r0, r7
 800c412:	f7ff fe4b 	bl	800c0ac <_Bfree>
 800c416:	4646      	mov	r6, r8
 800c418:	106d      	asrs	r5, r5, #1
 800c41a:	d00b      	beq.n	800c434 <__pow5mult+0xa0>
 800c41c:	6820      	ldr	r0, [r4, #0]
 800c41e:	b938      	cbnz	r0, 800c430 <__pow5mult+0x9c>
 800c420:	4622      	mov	r2, r4
 800c422:	4621      	mov	r1, r4
 800c424:	4638      	mov	r0, r7
 800c426:	f7ff ff0b 	bl	800c240 <__multiply>
 800c42a:	6020      	str	r0, [r4, #0]
 800c42c:	f8c0 9000 	str.w	r9, [r0]
 800c430:	4604      	mov	r4, r0
 800c432:	e7e4      	b.n	800c3fe <__pow5mult+0x6a>
 800c434:	4630      	mov	r0, r6
 800c436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c43a:	bf00      	nop
 800c43c:	08021b00 	.word	0x08021b00
 800c440:	08021a15 	.word	0x08021a15
 800c444:	08021aa6 	.word	0x08021aa6

0800c448 <__lshift>:
 800c448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c44c:	460c      	mov	r4, r1
 800c44e:	6849      	ldr	r1, [r1, #4]
 800c450:	6923      	ldr	r3, [r4, #16]
 800c452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c456:	68a3      	ldr	r3, [r4, #8]
 800c458:	4607      	mov	r7, r0
 800c45a:	4691      	mov	r9, r2
 800c45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c460:	f108 0601 	add.w	r6, r8, #1
 800c464:	42b3      	cmp	r3, r6
 800c466:	db0b      	blt.n	800c480 <__lshift+0x38>
 800c468:	4638      	mov	r0, r7
 800c46a:	f7ff fddf 	bl	800c02c <_Balloc>
 800c46e:	4605      	mov	r5, r0
 800c470:	b948      	cbnz	r0, 800c486 <__lshift+0x3e>
 800c472:	4602      	mov	r2, r0
 800c474:	4b28      	ldr	r3, [pc, #160]	@ (800c518 <__lshift+0xd0>)
 800c476:	4829      	ldr	r0, [pc, #164]	@ (800c51c <__lshift+0xd4>)
 800c478:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c47c:	f000 fa3a 	bl	800c8f4 <__assert_func>
 800c480:	3101      	adds	r1, #1
 800c482:	005b      	lsls	r3, r3, #1
 800c484:	e7ee      	b.n	800c464 <__lshift+0x1c>
 800c486:	2300      	movs	r3, #0
 800c488:	f100 0114 	add.w	r1, r0, #20
 800c48c:	f100 0210 	add.w	r2, r0, #16
 800c490:	4618      	mov	r0, r3
 800c492:	4553      	cmp	r3, sl
 800c494:	db33      	blt.n	800c4fe <__lshift+0xb6>
 800c496:	6920      	ldr	r0, [r4, #16]
 800c498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c49c:	f104 0314 	add.w	r3, r4, #20
 800c4a0:	f019 091f 	ands.w	r9, r9, #31
 800c4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c4a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c4ac:	d02b      	beq.n	800c506 <__lshift+0xbe>
 800c4ae:	f1c9 0e20 	rsb	lr, r9, #32
 800c4b2:	468a      	mov	sl, r1
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	fa00 f009 	lsl.w	r0, r0, r9
 800c4bc:	4310      	orrs	r0, r2
 800c4be:	f84a 0b04 	str.w	r0, [sl], #4
 800c4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c6:	459c      	cmp	ip, r3
 800c4c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c4cc:	d8f3      	bhi.n	800c4b6 <__lshift+0x6e>
 800c4ce:	ebac 0304 	sub.w	r3, ip, r4
 800c4d2:	3b15      	subs	r3, #21
 800c4d4:	f023 0303 	bic.w	r3, r3, #3
 800c4d8:	3304      	adds	r3, #4
 800c4da:	f104 0015 	add.w	r0, r4, #21
 800c4de:	4584      	cmp	ip, r0
 800c4e0:	bf38      	it	cc
 800c4e2:	2304      	movcc	r3, #4
 800c4e4:	50ca      	str	r2, [r1, r3]
 800c4e6:	b10a      	cbz	r2, 800c4ec <__lshift+0xa4>
 800c4e8:	f108 0602 	add.w	r6, r8, #2
 800c4ec:	3e01      	subs	r6, #1
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	612e      	str	r6, [r5, #16]
 800c4f2:	4621      	mov	r1, r4
 800c4f4:	f7ff fdda 	bl	800c0ac <_Bfree>
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c502:	3301      	adds	r3, #1
 800c504:	e7c5      	b.n	800c492 <__lshift+0x4a>
 800c506:	3904      	subs	r1, #4
 800c508:	f853 2b04 	ldr.w	r2, [r3], #4
 800c50c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c510:	459c      	cmp	ip, r3
 800c512:	d8f9      	bhi.n	800c508 <__lshift+0xc0>
 800c514:	e7ea      	b.n	800c4ec <__lshift+0xa4>
 800c516:	bf00      	nop
 800c518:	08021a84 	.word	0x08021a84
 800c51c:	08021aa6 	.word	0x08021aa6

0800c520 <__mcmp>:
 800c520:	690a      	ldr	r2, [r1, #16]
 800c522:	4603      	mov	r3, r0
 800c524:	6900      	ldr	r0, [r0, #16]
 800c526:	1a80      	subs	r0, r0, r2
 800c528:	b530      	push	{r4, r5, lr}
 800c52a:	d10e      	bne.n	800c54a <__mcmp+0x2a>
 800c52c:	3314      	adds	r3, #20
 800c52e:	3114      	adds	r1, #20
 800c530:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c534:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c53c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c540:	4295      	cmp	r5, r2
 800c542:	d003      	beq.n	800c54c <__mcmp+0x2c>
 800c544:	d205      	bcs.n	800c552 <__mcmp+0x32>
 800c546:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c54a:	bd30      	pop	{r4, r5, pc}
 800c54c:	42a3      	cmp	r3, r4
 800c54e:	d3f3      	bcc.n	800c538 <__mcmp+0x18>
 800c550:	e7fb      	b.n	800c54a <__mcmp+0x2a>
 800c552:	2001      	movs	r0, #1
 800c554:	e7f9      	b.n	800c54a <__mcmp+0x2a>
	...

0800c558 <__mdiff>:
 800c558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	4689      	mov	r9, r1
 800c55e:	4606      	mov	r6, r0
 800c560:	4611      	mov	r1, r2
 800c562:	4648      	mov	r0, r9
 800c564:	4614      	mov	r4, r2
 800c566:	f7ff ffdb 	bl	800c520 <__mcmp>
 800c56a:	1e05      	subs	r5, r0, #0
 800c56c:	d112      	bne.n	800c594 <__mdiff+0x3c>
 800c56e:	4629      	mov	r1, r5
 800c570:	4630      	mov	r0, r6
 800c572:	f7ff fd5b 	bl	800c02c <_Balloc>
 800c576:	4602      	mov	r2, r0
 800c578:	b928      	cbnz	r0, 800c586 <__mdiff+0x2e>
 800c57a:	4b3f      	ldr	r3, [pc, #252]	@ (800c678 <__mdiff+0x120>)
 800c57c:	f240 2137 	movw	r1, #567	@ 0x237
 800c580:	483e      	ldr	r0, [pc, #248]	@ (800c67c <__mdiff+0x124>)
 800c582:	f000 f9b7 	bl	800c8f4 <__assert_func>
 800c586:	2301      	movs	r3, #1
 800c588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c58c:	4610      	mov	r0, r2
 800c58e:	b003      	add	sp, #12
 800c590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c594:	bfbc      	itt	lt
 800c596:	464b      	movlt	r3, r9
 800c598:	46a1      	movlt	r9, r4
 800c59a:	4630      	mov	r0, r6
 800c59c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c5a0:	bfba      	itte	lt
 800c5a2:	461c      	movlt	r4, r3
 800c5a4:	2501      	movlt	r5, #1
 800c5a6:	2500      	movge	r5, #0
 800c5a8:	f7ff fd40 	bl	800c02c <_Balloc>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	b918      	cbnz	r0, 800c5b8 <__mdiff+0x60>
 800c5b0:	4b31      	ldr	r3, [pc, #196]	@ (800c678 <__mdiff+0x120>)
 800c5b2:	f240 2145 	movw	r1, #581	@ 0x245
 800c5b6:	e7e3      	b.n	800c580 <__mdiff+0x28>
 800c5b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c5bc:	6926      	ldr	r6, [r4, #16]
 800c5be:	60c5      	str	r5, [r0, #12]
 800c5c0:	f109 0310 	add.w	r3, r9, #16
 800c5c4:	f109 0514 	add.w	r5, r9, #20
 800c5c8:	f104 0e14 	add.w	lr, r4, #20
 800c5cc:	f100 0b14 	add.w	fp, r0, #20
 800c5d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c5d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c5d8:	9301      	str	r3, [sp, #4]
 800c5da:	46d9      	mov	r9, fp
 800c5dc:	f04f 0c00 	mov.w	ip, #0
 800c5e0:	9b01      	ldr	r3, [sp, #4]
 800c5e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c5e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c5ea:	9301      	str	r3, [sp, #4]
 800c5ec:	fa1f f38a 	uxth.w	r3, sl
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	b283      	uxth	r3, r0
 800c5f4:	1acb      	subs	r3, r1, r3
 800c5f6:	0c00      	lsrs	r0, r0, #16
 800c5f8:	4463      	add	r3, ip
 800c5fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c5fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c602:	b29b      	uxth	r3, r3
 800c604:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c608:	4576      	cmp	r6, lr
 800c60a:	f849 3b04 	str.w	r3, [r9], #4
 800c60e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c612:	d8e5      	bhi.n	800c5e0 <__mdiff+0x88>
 800c614:	1b33      	subs	r3, r6, r4
 800c616:	3b15      	subs	r3, #21
 800c618:	f023 0303 	bic.w	r3, r3, #3
 800c61c:	3415      	adds	r4, #21
 800c61e:	3304      	adds	r3, #4
 800c620:	42a6      	cmp	r6, r4
 800c622:	bf38      	it	cc
 800c624:	2304      	movcc	r3, #4
 800c626:	441d      	add	r5, r3
 800c628:	445b      	add	r3, fp
 800c62a:	461e      	mov	r6, r3
 800c62c:	462c      	mov	r4, r5
 800c62e:	4544      	cmp	r4, r8
 800c630:	d30e      	bcc.n	800c650 <__mdiff+0xf8>
 800c632:	f108 0103 	add.w	r1, r8, #3
 800c636:	1b49      	subs	r1, r1, r5
 800c638:	f021 0103 	bic.w	r1, r1, #3
 800c63c:	3d03      	subs	r5, #3
 800c63e:	45a8      	cmp	r8, r5
 800c640:	bf38      	it	cc
 800c642:	2100      	movcc	r1, #0
 800c644:	440b      	add	r3, r1
 800c646:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c64a:	b191      	cbz	r1, 800c672 <__mdiff+0x11a>
 800c64c:	6117      	str	r7, [r2, #16]
 800c64e:	e79d      	b.n	800c58c <__mdiff+0x34>
 800c650:	f854 1b04 	ldr.w	r1, [r4], #4
 800c654:	46e6      	mov	lr, ip
 800c656:	0c08      	lsrs	r0, r1, #16
 800c658:	fa1c fc81 	uxtah	ip, ip, r1
 800c65c:	4471      	add	r1, lr
 800c65e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c662:	b289      	uxth	r1, r1
 800c664:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c668:	f846 1b04 	str.w	r1, [r6], #4
 800c66c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c670:	e7dd      	b.n	800c62e <__mdiff+0xd6>
 800c672:	3f01      	subs	r7, #1
 800c674:	e7e7      	b.n	800c646 <__mdiff+0xee>
 800c676:	bf00      	nop
 800c678:	08021a84 	.word	0x08021a84
 800c67c:	08021aa6 	.word	0x08021aa6

0800c680 <__d2b>:
 800c680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c684:	460f      	mov	r7, r1
 800c686:	2101      	movs	r1, #1
 800c688:	ec59 8b10 	vmov	r8, r9, d0
 800c68c:	4616      	mov	r6, r2
 800c68e:	f7ff fccd 	bl	800c02c <_Balloc>
 800c692:	4604      	mov	r4, r0
 800c694:	b930      	cbnz	r0, 800c6a4 <__d2b+0x24>
 800c696:	4602      	mov	r2, r0
 800c698:	4b23      	ldr	r3, [pc, #140]	@ (800c728 <__d2b+0xa8>)
 800c69a:	4824      	ldr	r0, [pc, #144]	@ (800c72c <__d2b+0xac>)
 800c69c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c6a0:	f000 f928 	bl	800c8f4 <__assert_func>
 800c6a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c6a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6ac:	b10d      	cbz	r5, 800c6b2 <__d2b+0x32>
 800c6ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6b2:	9301      	str	r3, [sp, #4]
 800c6b4:	f1b8 0300 	subs.w	r3, r8, #0
 800c6b8:	d023      	beq.n	800c702 <__d2b+0x82>
 800c6ba:	4668      	mov	r0, sp
 800c6bc:	9300      	str	r3, [sp, #0]
 800c6be:	f7ff fd7c 	bl	800c1ba <__lo0bits>
 800c6c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6c6:	b1d0      	cbz	r0, 800c6fe <__d2b+0x7e>
 800c6c8:	f1c0 0320 	rsb	r3, r0, #32
 800c6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6d0:	430b      	orrs	r3, r1
 800c6d2:	40c2      	lsrs	r2, r0
 800c6d4:	6163      	str	r3, [r4, #20]
 800c6d6:	9201      	str	r2, [sp, #4]
 800c6d8:	9b01      	ldr	r3, [sp, #4]
 800c6da:	61a3      	str	r3, [r4, #24]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bf0c      	ite	eq
 800c6e0:	2201      	moveq	r2, #1
 800c6e2:	2202      	movne	r2, #2
 800c6e4:	6122      	str	r2, [r4, #16]
 800c6e6:	b1a5      	cbz	r5, 800c712 <__d2b+0x92>
 800c6e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6ec:	4405      	add	r5, r0
 800c6ee:	603d      	str	r5, [r7, #0]
 800c6f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6f4:	6030      	str	r0, [r6, #0]
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	b003      	add	sp, #12
 800c6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6fe:	6161      	str	r1, [r4, #20]
 800c700:	e7ea      	b.n	800c6d8 <__d2b+0x58>
 800c702:	a801      	add	r0, sp, #4
 800c704:	f7ff fd59 	bl	800c1ba <__lo0bits>
 800c708:	9b01      	ldr	r3, [sp, #4]
 800c70a:	6163      	str	r3, [r4, #20]
 800c70c:	3020      	adds	r0, #32
 800c70e:	2201      	movs	r2, #1
 800c710:	e7e8      	b.n	800c6e4 <__d2b+0x64>
 800c712:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c716:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c71a:	6038      	str	r0, [r7, #0]
 800c71c:	6918      	ldr	r0, [r3, #16]
 800c71e:	f7ff fd2d 	bl	800c17c <__hi0bits>
 800c722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c726:	e7e5      	b.n	800c6f4 <__d2b+0x74>
 800c728:	08021a84 	.word	0x08021a84
 800c72c:	08021aa6 	.word	0x08021aa6

0800c730 <__sread>:
 800c730:	b510      	push	{r4, lr}
 800c732:	460c      	mov	r4, r1
 800c734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c738:	f000 f8a8 	bl	800c88c <_read_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	bfab      	itete	ge
 800c740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c742:	89a3      	ldrhlt	r3, [r4, #12]
 800c744:	181b      	addge	r3, r3, r0
 800c746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c74a:	bfac      	ite	ge
 800c74c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c74e:	81a3      	strhlt	r3, [r4, #12]
 800c750:	bd10      	pop	{r4, pc}

0800c752 <__swrite>:
 800c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	461f      	mov	r7, r3
 800c758:	898b      	ldrh	r3, [r1, #12]
 800c75a:	05db      	lsls	r3, r3, #23
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	4616      	mov	r6, r2
 800c762:	d505      	bpl.n	800c770 <__swrite+0x1e>
 800c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c768:	2302      	movs	r3, #2
 800c76a:	2200      	movs	r2, #0
 800c76c:	f000 f87c 	bl	800c868 <_lseek_r>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	4628      	mov	r0, r5
 800c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	f000 b8a3 	b.w	800c8d0 <_write_r>

0800c78a <__sseek>:
 800c78a:	b510      	push	{r4, lr}
 800c78c:	460c      	mov	r4, r1
 800c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c792:	f000 f869 	bl	800c868 <_lseek_r>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	bf15      	itete	ne
 800c79c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c79e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7a6:	81a3      	strheq	r3, [r4, #12]
 800c7a8:	bf18      	it	ne
 800c7aa:	81a3      	strhne	r3, [r4, #12]
 800c7ac:	bd10      	pop	{r4, pc}

0800c7ae <__sclose>:
 800c7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b2:	f000 b849 	b.w	800c848 <_close_r>

0800c7b6 <_realloc_r>:
 800c7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7ba:	4680      	mov	r8, r0
 800c7bc:	4615      	mov	r5, r2
 800c7be:	460c      	mov	r4, r1
 800c7c0:	b921      	cbnz	r1, 800c7cc <_realloc_r+0x16>
 800c7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	f7ff baf8 	b.w	800bdbc <_malloc_r>
 800c7cc:	b92a      	cbnz	r2, 800c7da <_realloc_r+0x24>
 800c7ce:	f000 f8c3 	bl	800c958 <_free_r>
 800c7d2:	2400      	movs	r4, #0
 800c7d4:	4620      	mov	r0, r4
 800c7d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7da:	f000 f919 	bl	800ca10 <_malloc_usable_size_r>
 800c7de:	4285      	cmp	r5, r0
 800c7e0:	4606      	mov	r6, r0
 800c7e2:	d802      	bhi.n	800c7ea <_realloc_r+0x34>
 800c7e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c7e8:	d8f4      	bhi.n	800c7d4 <_realloc_r+0x1e>
 800c7ea:	4629      	mov	r1, r5
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	f7ff fae5 	bl	800bdbc <_malloc_r>
 800c7f2:	4607      	mov	r7, r0
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d0ec      	beq.n	800c7d2 <_realloc_r+0x1c>
 800c7f8:	42b5      	cmp	r5, r6
 800c7fa:	462a      	mov	r2, r5
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	bf28      	it	cs
 800c800:	4632      	movcs	r2, r6
 800c802:	f7fe fafe 	bl	800ae02 <memcpy>
 800c806:	4621      	mov	r1, r4
 800c808:	4640      	mov	r0, r8
 800c80a:	f000 f8a5 	bl	800c958 <_free_r>
 800c80e:	463c      	mov	r4, r7
 800c810:	e7e0      	b.n	800c7d4 <_realloc_r+0x1e>

0800c812 <memmove>:
 800c812:	4288      	cmp	r0, r1
 800c814:	b510      	push	{r4, lr}
 800c816:	eb01 0402 	add.w	r4, r1, r2
 800c81a:	d902      	bls.n	800c822 <memmove+0x10>
 800c81c:	4284      	cmp	r4, r0
 800c81e:	4623      	mov	r3, r4
 800c820:	d807      	bhi.n	800c832 <memmove+0x20>
 800c822:	1e43      	subs	r3, r0, #1
 800c824:	42a1      	cmp	r1, r4
 800c826:	d008      	beq.n	800c83a <memmove+0x28>
 800c828:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c82c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c830:	e7f8      	b.n	800c824 <memmove+0x12>
 800c832:	4402      	add	r2, r0
 800c834:	4601      	mov	r1, r0
 800c836:	428a      	cmp	r2, r1
 800c838:	d100      	bne.n	800c83c <memmove+0x2a>
 800c83a:	bd10      	pop	{r4, pc}
 800c83c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c840:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c844:	e7f7      	b.n	800c836 <memmove+0x24>
	...

0800c848 <_close_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d06      	ldr	r5, [pc, #24]	@ (800c864 <_close_r+0x1c>)
 800c84c:	2300      	movs	r3, #0
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7f5 fcde 	bl	8002214 <_close>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_close_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_close_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	2000572c 	.word	0x2000572c

0800c868 <_lseek_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d07      	ldr	r5, [pc, #28]	@ (800c888 <_lseek_r+0x20>)
 800c86c:	4604      	mov	r4, r0
 800c86e:	4608      	mov	r0, r1
 800c870:	4611      	mov	r1, r2
 800c872:	2200      	movs	r2, #0
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	f7f5 fcf3 	bl	8002262 <_lseek>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_lseek_r+0x1e>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_lseek_r+0x1e>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	2000572c 	.word	0x2000572c

0800c88c <_read_r>:
 800c88c:	b538      	push	{r3, r4, r5, lr}
 800c88e:	4d07      	ldr	r5, [pc, #28]	@ (800c8ac <_read_r+0x20>)
 800c890:	4604      	mov	r4, r0
 800c892:	4608      	mov	r0, r1
 800c894:	4611      	mov	r1, r2
 800c896:	2200      	movs	r2, #0
 800c898:	602a      	str	r2, [r5, #0]
 800c89a:	461a      	mov	r2, r3
 800c89c:	f7f5 fc81 	bl	80021a2 <_read>
 800c8a0:	1c43      	adds	r3, r0, #1
 800c8a2:	d102      	bne.n	800c8aa <_read_r+0x1e>
 800c8a4:	682b      	ldr	r3, [r5, #0]
 800c8a6:	b103      	cbz	r3, 800c8aa <_read_r+0x1e>
 800c8a8:	6023      	str	r3, [r4, #0]
 800c8aa:	bd38      	pop	{r3, r4, r5, pc}
 800c8ac:	2000572c 	.word	0x2000572c

0800c8b0 <_sbrk_r>:
 800c8b0:	b538      	push	{r3, r4, r5, lr}
 800c8b2:	4d06      	ldr	r5, [pc, #24]	@ (800c8cc <_sbrk_r+0x1c>)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	4608      	mov	r0, r1
 800c8ba:	602b      	str	r3, [r5, #0]
 800c8bc:	f7f5 fcde 	bl	800227c <_sbrk>
 800c8c0:	1c43      	adds	r3, r0, #1
 800c8c2:	d102      	bne.n	800c8ca <_sbrk_r+0x1a>
 800c8c4:	682b      	ldr	r3, [r5, #0]
 800c8c6:	b103      	cbz	r3, 800c8ca <_sbrk_r+0x1a>
 800c8c8:	6023      	str	r3, [r4, #0]
 800c8ca:	bd38      	pop	{r3, r4, r5, pc}
 800c8cc:	2000572c 	.word	0x2000572c

0800c8d0 <_write_r>:
 800c8d0:	b538      	push	{r3, r4, r5, lr}
 800c8d2:	4d07      	ldr	r5, [pc, #28]	@ (800c8f0 <_write_r+0x20>)
 800c8d4:	4604      	mov	r4, r0
 800c8d6:	4608      	mov	r0, r1
 800c8d8:	4611      	mov	r1, r2
 800c8da:	2200      	movs	r2, #0
 800c8dc:	602a      	str	r2, [r5, #0]
 800c8de:	461a      	mov	r2, r3
 800c8e0:	f7f5 fc7c 	bl	80021dc <_write>
 800c8e4:	1c43      	adds	r3, r0, #1
 800c8e6:	d102      	bne.n	800c8ee <_write_r+0x1e>
 800c8e8:	682b      	ldr	r3, [r5, #0]
 800c8ea:	b103      	cbz	r3, 800c8ee <_write_r+0x1e>
 800c8ec:	6023      	str	r3, [r4, #0]
 800c8ee:	bd38      	pop	{r3, r4, r5, pc}
 800c8f0:	2000572c 	.word	0x2000572c

0800c8f4 <__assert_func>:
 800c8f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8f6:	4614      	mov	r4, r2
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <__assert_func+0x2c>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4605      	mov	r5, r0
 800c900:	68d8      	ldr	r0, [r3, #12]
 800c902:	b954      	cbnz	r4, 800c91a <__assert_func+0x26>
 800c904:	4b07      	ldr	r3, [pc, #28]	@ (800c924 <__assert_func+0x30>)
 800c906:	461c      	mov	r4, r3
 800c908:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c90c:	9100      	str	r1, [sp, #0]
 800c90e:	462b      	mov	r3, r5
 800c910:	4905      	ldr	r1, [pc, #20]	@ (800c928 <__assert_func+0x34>)
 800c912:	f000 f885 	bl	800ca20 <fiprintf>
 800c916:	f000 f8a2 	bl	800ca5e <abort>
 800c91a:	4b04      	ldr	r3, [pc, #16]	@ (800c92c <__assert_func+0x38>)
 800c91c:	e7f4      	b.n	800c908 <__assert_func+0x14>
 800c91e:	bf00      	nop
 800c920:	20000030 	.word	0x20000030
 800c924:	08021d46 	.word	0x08021d46
 800c928:	08021d18 	.word	0x08021d18
 800c92c:	08021d0b 	.word	0x08021d0b

0800c930 <_calloc_r>:
 800c930:	b570      	push	{r4, r5, r6, lr}
 800c932:	fba1 5402 	umull	r5, r4, r1, r2
 800c936:	b93c      	cbnz	r4, 800c948 <_calloc_r+0x18>
 800c938:	4629      	mov	r1, r5
 800c93a:	f7ff fa3f 	bl	800bdbc <_malloc_r>
 800c93e:	4606      	mov	r6, r0
 800c940:	b928      	cbnz	r0, 800c94e <_calloc_r+0x1e>
 800c942:	2600      	movs	r6, #0
 800c944:	4630      	mov	r0, r6
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	220c      	movs	r2, #12
 800c94a:	6002      	str	r2, [r0, #0]
 800c94c:	e7f9      	b.n	800c942 <_calloc_r+0x12>
 800c94e:	462a      	mov	r2, r5
 800c950:	4621      	mov	r1, r4
 800c952:	f7fe fa1d 	bl	800ad90 <memset>
 800c956:	e7f5      	b.n	800c944 <_calloc_r+0x14>

0800c958 <_free_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4605      	mov	r5, r0
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d041      	beq.n	800c9e4 <_free_r+0x8c>
 800c960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c964:	1f0c      	subs	r4, r1, #4
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfb8      	it	lt
 800c96a:	18e4      	addlt	r4, r4, r3
 800c96c:	f7ff fb52 	bl	800c014 <__malloc_lock>
 800c970:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <_free_r+0x90>)
 800c972:	6813      	ldr	r3, [r2, #0]
 800c974:	b933      	cbnz	r3, 800c984 <_free_r+0x2c>
 800c976:	6063      	str	r3, [r4, #4]
 800c978:	6014      	str	r4, [r2, #0]
 800c97a:	4628      	mov	r0, r5
 800c97c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c980:	f7ff bb4e 	b.w	800c020 <__malloc_unlock>
 800c984:	42a3      	cmp	r3, r4
 800c986:	d908      	bls.n	800c99a <_free_r+0x42>
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	1821      	adds	r1, r4, r0
 800c98c:	428b      	cmp	r3, r1
 800c98e:	bf01      	itttt	eq
 800c990:	6819      	ldreq	r1, [r3, #0]
 800c992:	685b      	ldreq	r3, [r3, #4]
 800c994:	1809      	addeq	r1, r1, r0
 800c996:	6021      	streq	r1, [r4, #0]
 800c998:	e7ed      	b.n	800c976 <_free_r+0x1e>
 800c99a:	461a      	mov	r2, r3
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	b10b      	cbz	r3, 800c9a4 <_free_r+0x4c>
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	d9fa      	bls.n	800c99a <_free_r+0x42>
 800c9a4:	6811      	ldr	r1, [r2, #0]
 800c9a6:	1850      	adds	r0, r2, r1
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d10b      	bne.n	800c9c4 <_free_r+0x6c>
 800c9ac:	6820      	ldr	r0, [r4, #0]
 800c9ae:	4401      	add	r1, r0
 800c9b0:	1850      	adds	r0, r2, r1
 800c9b2:	4283      	cmp	r3, r0
 800c9b4:	6011      	str	r1, [r2, #0]
 800c9b6:	d1e0      	bne.n	800c97a <_free_r+0x22>
 800c9b8:	6818      	ldr	r0, [r3, #0]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	6053      	str	r3, [r2, #4]
 800c9be:	4408      	add	r0, r1
 800c9c0:	6010      	str	r0, [r2, #0]
 800c9c2:	e7da      	b.n	800c97a <_free_r+0x22>
 800c9c4:	d902      	bls.n	800c9cc <_free_r+0x74>
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	602b      	str	r3, [r5, #0]
 800c9ca:	e7d6      	b.n	800c97a <_free_r+0x22>
 800c9cc:	6820      	ldr	r0, [r4, #0]
 800c9ce:	1821      	adds	r1, r4, r0
 800c9d0:	428b      	cmp	r3, r1
 800c9d2:	bf04      	itt	eq
 800c9d4:	6819      	ldreq	r1, [r3, #0]
 800c9d6:	685b      	ldreq	r3, [r3, #4]
 800c9d8:	6063      	str	r3, [r4, #4]
 800c9da:	bf04      	itt	eq
 800c9dc:	1809      	addeq	r1, r1, r0
 800c9de:	6021      	streq	r1, [r4, #0]
 800c9e0:	6054      	str	r4, [r2, #4]
 800c9e2:	e7ca      	b.n	800c97a <_free_r+0x22>
 800c9e4:	bd38      	pop	{r3, r4, r5, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20005728 	.word	0x20005728

0800c9ec <__ascii_mbtowc>:
 800c9ec:	b082      	sub	sp, #8
 800c9ee:	b901      	cbnz	r1, 800c9f2 <__ascii_mbtowc+0x6>
 800c9f0:	a901      	add	r1, sp, #4
 800c9f2:	b142      	cbz	r2, 800ca06 <__ascii_mbtowc+0x1a>
 800c9f4:	b14b      	cbz	r3, 800ca0a <__ascii_mbtowc+0x1e>
 800c9f6:	7813      	ldrb	r3, [r2, #0]
 800c9f8:	600b      	str	r3, [r1, #0]
 800c9fa:	7812      	ldrb	r2, [r2, #0]
 800c9fc:	1e10      	subs	r0, r2, #0
 800c9fe:	bf18      	it	ne
 800ca00:	2001      	movne	r0, #1
 800ca02:	b002      	add	sp, #8
 800ca04:	4770      	bx	lr
 800ca06:	4610      	mov	r0, r2
 800ca08:	e7fb      	b.n	800ca02 <__ascii_mbtowc+0x16>
 800ca0a:	f06f 0001 	mvn.w	r0, #1
 800ca0e:	e7f8      	b.n	800ca02 <__ascii_mbtowc+0x16>

0800ca10 <_malloc_usable_size_r>:
 800ca10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca14:	1f18      	subs	r0, r3, #4
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	bfbc      	itt	lt
 800ca1a:	580b      	ldrlt	r3, [r1, r0]
 800ca1c:	18c0      	addlt	r0, r0, r3
 800ca1e:	4770      	bx	lr

0800ca20 <fiprintf>:
 800ca20:	b40e      	push	{r1, r2, r3}
 800ca22:	b503      	push	{r0, r1, lr}
 800ca24:	4601      	mov	r1, r0
 800ca26:	ab03      	add	r3, sp, #12
 800ca28:	4805      	ldr	r0, [pc, #20]	@ (800ca40 <fiprintf+0x20>)
 800ca2a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca2e:	6800      	ldr	r0, [r0, #0]
 800ca30:	9301      	str	r3, [sp, #4]
 800ca32:	f000 f845 	bl	800cac0 <_vfiprintf_r>
 800ca36:	b002      	add	sp, #8
 800ca38:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca3c:	b003      	add	sp, #12
 800ca3e:	4770      	bx	lr
 800ca40:	20000030 	.word	0x20000030

0800ca44 <__ascii_wctomb>:
 800ca44:	4603      	mov	r3, r0
 800ca46:	4608      	mov	r0, r1
 800ca48:	b141      	cbz	r1, 800ca5c <__ascii_wctomb+0x18>
 800ca4a:	2aff      	cmp	r2, #255	@ 0xff
 800ca4c:	d904      	bls.n	800ca58 <__ascii_wctomb+0x14>
 800ca4e:	228a      	movs	r2, #138	@ 0x8a
 800ca50:	601a      	str	r2, [r3, #0]
 800ca52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca56:	4770      	bx	lr
 800ca58:	700a      	strb	r2, [r1, #0]
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	4770      	bx	lr

0800ca5e <abort>:
 800ca5e:	b508      	push	{r3, lr}
 800ca60:	2006      	movs	r0, #6
 800ca62:	f000 fa85 	bl	800cf70 <raise>
 800ca66:	2001      	movs	r0, #1
 800ca68:	f7f5 fb90 	bl	800218c <_exit>

0800ca6c <__sfputc_r>:
 800ca6c:	6893      	ldr	r3, [r2, #8]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	b410      	push	{r4}
 800ca74:	6093      	str	r3, [r2, #8]
 800ca76:	da08      	bge.n	800ca8a <__sfputc_r+0x1e>
 800ca78:	6994      	ldr	r4, [r2, #24]
 800ca7a:	42a3      	cmp	r3, r4
 800ca7c:	db01      	blt.n	800ca82 <__sfputc_r+0x16>
 800ca7e:	290a      	cmp	r1, #10
 800ca80:	d103      	bne.n	800ca8a <__sfputc_r+0x1e>
 800ca82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca86:	f000 b933 	b.w	800ccf0 <__swbuf_r>
 800ca8a:	6813      	ldr	r3, [r2, #0]
 800ca8c:	1c58      	adds	r0, r3, #1
 800ca8e:	6010      	str	r0, [r2, #0]
 800ca90:	7019      	strb	r1, [r3, #0]
 800ca92:	4608      	mov	r0, r1
 800ca94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca98:	4770      	bx	lr

0800ca9a <__sfputs_r>:
 800ca9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9c:	4606      	mov	r6, r0
 800ca9e:	460f      	mov	r7, r1
 800caa0:	4614      	mov	r4, r2
 800caa2:	18d5      	adds	r5, r2, r3
 800caa4:	42ac      	cmp	r4, r5
 800caa6:	d101      	bne.n	800caac <__sfputs_r+0x12>
 800caa8:	2000      	movs	r0, #0
 800caaa:	e007      	b.n	800cabc <__sfputs_r+0x22>
 800caac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cab0:	463a      	mov	r2, r7
 800cab2:	4630      	mov	r0, r6
 800cab4:	f7ff ffda 	bl	800ca6c <__sfputc_r>
 800cab8:	1c43      	adds	r3, r0, #1
 800caba:	d1f3      	bne.n	800caa4 <__sfputs_r+0xa>
 800cabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cac0 <_vfiprintf_r>:
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	460d      	mov	r5, r1
 800cac6:	b09d      	sub	sp, #116	@ 0x74
 800cac8:	4614      	mov	r4, r2
 800caca:	4698      	mov	r8, r3
 800cacc:	4606      	mov	r6, r0
 800cace:	b118      	cbz	r0, 800cad8 <_vfiprintf_r+0x18>
 800cad0:	6a03      	ldr	r3, [r0, #32]
 800cad2:	b90b      	cbnz	r3, 800cad8 <_vfiprintf_r+0x18>
 800cad4:	f7fe f926 	bl	800ad24 <__sinit>
 800cad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cada:	07d9      	lsls	r1, r3, #31
 800cadc:	d405      	bmi.n	800caea <_vfiprintf_r+0x2a>
 800cade:	89ab      	ldrh	r3, [r5, #12]
 800cae0:	059a      	lsls	r2, r3, #22
 800cae2:	d402      	bmi.n	800caea <_vfiprintf_r+0x2a>
 800cae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cae6:	f7fe f98a 	bl	800adfe <__retarget_lock_acquire_recursive>
 800caea:	89ab      	ldrh	r3, [r5, #12]
 800caec:	071b      	lsls	r3, r3, #28
 800caee:	d501      	bpl.n	800caf4 <_vfiprintf_r+0x34>
 800caf0:	692b      	ldr	r3, [r5, #16]
 800caf2:	b99b      	cbnz	r3, 800cb1c <_vfiprintf_r+0x5c>
 800caf4:	4629      	mov	r1, r5
 800caf6:	4630      	mov	r0, r6
 800caf8:	f000 f938 	bl	800cd6c <__swsetup_r>
 800cafc:	b170      	cbz	r0, 800cb1c <_vfiprintf_r+0x5c>
 800cafe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb00:	07dc      	lsls	r4, r3, #31
 800cb02:	d504      	bpl.n	800cb0e <_vfiprintf_r+0x4e>
 800cb04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb08:	b01d      	add	sp, #116	@ 0x74
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	89ab      	ldrh	r3, [r5, #12]
 800cb10:	0598      	lsls	r0, r3, #22
 800cb12:	d4f7      	bmi.n	800cb04 <_vfiprintf_r+0x44>
 800cb14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb16:	f7fe f973 	bl	800ae00 <__retarget_lock_release_recursive>
 800cb1a:	e7f3      	b.n	800cb04 <_vfiprintf_r+0x44>
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb20:	2320      	movs	r3, #32
 800cb22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb26:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb2a:	2330      	movs	r3, #48	@ 0x30
 800cb2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ccdc <_vfiprintf_r+0x21c>
 800cb30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb34:	f04f 0901 	mov.w	r9, #1
 800cb38:	4623      	mov	r3, r4
 800cb3a:	469a      	mov	sl, r3
 800cb3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb40:	b10a      	cbz	r2, 800cb46 <_vfiprintf_r+0x86>
 800cb42:	2a25      	cmp	r2, #37	@ 0x25
 800cb44:	d1f9      	bne.n	800cb3a <_vfiprintf_r+0x7a>
 800cb46:	ebba 0b04 	subs.w	fp, sl, r4
 800cb4a:	d00b      	beq.n	800cb64 <_vfiprintf_r+0xa4>
 800cb4c:	465b      	mov	r3, fp
 800cb4e:	4622      	mov	r2, r4
 800cb50:	4629      	mov	r1, r5
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7ff ffa1 	bl	800ca9a <__sfputs_r>
 800cb58:	3001      	adds	r0, #1
 800cb5a:	f000 80a7 	beq.w	800ccac <_vfiprintf_r+0x1ec>
 800cb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb60:	445a      	add	r2, fp
 800cb62:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb64:	f89a 3000 	ldrb.w	r3, [sl]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f000 809f 	beq.w	800ccac <_vfiprintf_r+0x1ec>
 800cb6e:	2300      	movs	r3, #0
 800cb70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb78:	f10a 0a01 	add.w	sl, sl, #1
 800cb7c:	9304      	str	r3, [sp, #16]
 800cb7e:	9307      	str	r3, [sp, #28]
 800cb80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb84:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb86:	4654      	mov	r4, sl
 800cb88:	2205      	movs	r2, #5
 800cb8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb8e:	4853      	ldr	r0, [pc, #332]	@ (800ccdc <_vfiprintf_r+0x21c>)
 800cb90:	f7f3 fb26 	bl	80001e0 <memchr>
 800cb94:	9a04      	ldr	r2, [sp, #16]
 800cb96:	b9d8      	cbnz	r0, 800cbd0 <_vfiprintf_r+0x110>
 800cb98:	06d1      	lsls	r1, r2, #27
 800cb9a:	bf44      	itt	mi
 800cb9c:	2320      	movmi	r3, #32
 800cb9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cba2:	0713      	lsls	r3, r2, #28
 800cba4:	bf44      	itt	mi
 800cba6:	232b      	movmi	r3, #43	@ 0x2b
 800cba8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbac:	f89a 3000 	ldrb.w	r3, [sl]
 800cbb0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb2:	d015      	beq.n	800cbe0 <_vfiprintf_r+0x120>
 800cbb4:	9a07      	ldr	r2, [sp, #28]
 800cbb6:	4654      	mov	r4, sl
 800cbb8:	2000      	movs	r0, #0
 800cbba:	f04f 0c0a 	mov.w	ip, #10
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cbc4:	3b30      	subs	r3, #48	@ 0x30
 800cbc6:	2b09      	cmp	r3, #9
 800cbc8:	d94b      	bls.n	800cc62 <_vfiprintf_r+0x1a2>
 800cbca:	b1b0      	cbz	r0, 800cbfa <_vfiprintf_r+0x13a>
 800cbcc:	9207      	str	r2, [sp, #28]
 800cbce:	e014      	b.n	800cbfa <_vfiprintf_r+0x13a>
 800cbd0:	eba0 0308 	sub.w	r3, r0, r8
 800cbd4:	fa09 f303 	lsl.w	r3, r9, r3
 800cbd8:	4313      	orrs	r3, r2
 800cbda:	9304      	str	r3, [sp, #16]
 800cbdc:	46a2      	mov	sl, r4
 800cbde:	e7d2      	b.n	800cb86 <_vfiprintf_r+0xc6>
 800cbe0:	9b03      	ldr	r3, [sp, #12]
 800cbe2:	1d19      	adds	r1, r3, #4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	9103      	str	r1, [sp, #12]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	bfbb      	ittet	lt
 800cbec:	425b      	neglt	r3, r3
 800cbee:	f042 0202 	orrlt.w	r2, r2, #2
 800cbf2:	9307      	strge	r3, [sp, #28]
 800cbf4:	9307      	strlt	r3, [sp, #28]
 800cbf6:	bfb8      	it	lt
 800cbf8:	9204      	strlt	r2, [sp, #16]
 800cbfa:	7823      	ldrb	r3, [r4, #0]
 800cbfc:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbfe:	d10a      	bne.n	800cc16 <_vfiprintf_r+0x156>
 800cc00:	7863      	ldrb	r3, [r4, #1]
 800cc02:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc04:	d132      	bne.n	800cc6c <_vfiprintf_r+0x1ac>
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	1d1a      	adds	r2, r3, #4
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	9203      	str	r2, [sp, #12]
 800cc0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc12:	3402      	adds	r4, #2
 800cc14:	9305      	str	r3, [sp, #20]
 800cc16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ccec <_vfiprintf_r+0x22c>
 800cc1a:	7821      	ldrb	r1, [r4, #0]
 800cc1c:	2203      	movs	r2, #3
 800cc1e:	4650      	mov	r0, sl
 800cc20:	f7f3 fade 	bl	80001e0 <memchr>
 800cc24:	b138      	cbz	r0, 800cc36 <_vfiprintf_r+0x176>
 800cc26:	9b04      	ldr	r3, [sp, #16]
 800cc28:	eba0 000a 	sub.w	r0, r0, sl
 800cc2c:	2240      	movs	r2, #64	@ 0x40
 800cc2e:	4082      	lsls	r2, r0
 800cc30:	4313      	orrs	r3, r2
 800cc32:	3401      	adds	r4, #1
 800cc34:	9304      	str	r3, [sp, #16]
 800cc36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc3a:	4829      	ldr	r0, [pc, #164]	@ (800cce0 <_vfiprintf_r+0x220>)
 800cc3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc40:	2206      	movs	r2, #6
 800cc42:	f7f3 facd 	bl	80001e0 <memchr>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d03f      	beq.n	800ccca <_vfiprintf_r+0x20a>
 800cc4a:	4b26      	ldr	r3, [pc, #152]	@ (800cce4 <_vfiprintf_r+0x224>)
 800cc4c:	bb1b      	cbnz	r3, 800cc96 <_vfiprintf_r+0x1d6>
 800cc4e:	9b03      	ldr	r3, [sp, #12]
 800cc50:	3307      	adds	r3, #7
 800cc52:	f023 0307 	bic.w	r3, r3, #7
 800cc56:	3308      	adds	r3, #8
 800cc58:	9303      	str	r3, [sp, #12]
 800cc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc5c:	443b      	add	r3, r7
 800cc5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc60:	e76a      	b.n	800cb38 <_vfiprintf_r+0x78>
 800cc62:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc66:	460c      	mov	r4, r1
 800cc68:	2001      	movs	r0, #1
 800cc6a:	e7a8      	b.n	800cbbe <_vfiprintf_r+0xfe>
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	3401      	adds	r4, #1
 800cc70:	9305      	str	r3, [sp, #20]
 800cc72:	4619      	mov	r1, r3
 800cc74:	f04f 0c0a 	mov.w	ip, #10
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc7e:	3a30      	subs	r2, #48	@ 0x30
 800cc80:	2a09      	cmp	r2, #9
 800cc82:	d903      	bls.n	800cc8c <_vfiprintf_r+0x1cc>
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d0c6      	beq.n	800cc16 <_vfiprintf_r+0x156>
 800cc88:	9105      	str	r1, [sp, #20]
 800cc8a:	e7c4      	b.n	800cc16 <_vfiprintf_r+0x156>
 800cc8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc90:	4604      	mov	r4, r0
 800cc92:	2301      	movs	r3, #1
 800cc94:	e7f0      	b.n	800cc78 <_vfiprintf_r+0x1b8>
 800cc96:	ab03      	add	r3, sp, #12
 800cc98:	9300      	str	r3, [sp, #0]
 800cc9a:	462a      	mov	r2, r5
 800cc9c:	4b12      	ldr	r3, [pc, #72]	@ (800cce8 <_vfiprintf_r+0x228>)
 800cc9e:	a904      	add	r1, sp, #16
 800cca0:	4630      	mov	r0, r6
 800cca2:	f7fd fbdb 	bl	800a45c <_printf_float>
 800cca6:	4607      	mov	r7, r0
 800cca8:	1c78      	adds	r0, r7, #1
 800ccaa:	d1d6      	bne.n	800cc5a <_vfiprintf_r+0x19a>
 800ccac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccae:	07d9      	lsls	r1, r3, #31
 800ccb0:	d405      	bmi.n	800ccbe <_vfiprintf_r+0x1fe>
 800ccb2:	89ab      	ldrh	r3, [r5, #12]
 800ccb4:	059a      	lsls	r2, r3, #22
 800ccb6:	d402      	bmi.n	800ccbe <_vfiprintf_r+0x1fe>
 800ccb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccba:	f7fe f8a1 	bl	800ae00 <__retarget_lock_release_recursive>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	065b      	lsls	r3, r3, #25
 800ccc2:	f53f af1f 	bmi.w	800cb04 <_vfiprintf_r+0x44>
 800ccc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ccc8:	e71e      	b.n	800cb08 <_vfiprintf_r+0x48>
 800ccca:	ab03      	add	r3, sp, #12
 800cccc:	9300      	str	r3, [sp, #0]
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4b05      	ldr	r3, [pc, #20]	@ (800cce8 <_vfiprintf_r+0x228>)
 800ccd2:	a904      	add	r1, sp, #16
 800ccd4:	4630      	mov	r0, r6
 800ccd6:	f7fd fe59 	bl	800a98c <_printf_i>
 800ccda:	e7e4      	b.n	800cca6 <_vfiprintf_r+0x1e6>
 800ccdc:	08021a95 	.word	0x08021a95
 800cce0:	08021a9f 	.word	0x08021a9f
 800cce4:	0800a45d 	.word	0x0800a45d
 800cce8:	0800ca9b 	.word	0x0800ca9b
 800ccec:	08021a9b 	.word	0x08021a9b

0800ccf0 <__swbuf_r>:
 800ccf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf2:	460e      	mov	r6, r1
 800ccf4:	4614      	mov	r4, r2
 800ccf6:	4605      	mov	r5, r0
 800ccf8:	b118      	cbz	r0, 800cd02 <__swbuf_r+0x12>
 800ccfa:	6a03      	ldr	r3, [r0, #32]
 800ccfc:	b90b      	cbnz	r3, 800cd02 <__swbuf_r+0x12>
 800ccfe:	f7fe f811 	bl	800ad24 <__sinit>
 800cd02:	69a3      	ldr	r3, [r4, #24]
 800cd04:	60a3      	str	r3, [r4, #8]
 800cd06:	89a3      	ldrh	r3, [r4, #12]
 800cd08:	071a      	lsls	r2, r3, #28
 800cd0a:	d501      	bpl.n	800cd10 <__swbuf_r+0x20>
 800cd0c:	6923      	ldr	r3, [r4, #16]
 800cd0e:	b943      	cbnz	r3, 800cd22 <__swbuf_r+0x32>
 800cd10:	4621      	mov	r1, r4
 800cd12:	4628      	mov	r0, r5
 800cd14:	f000 f82a 	bl	800cd6c <__swsetup_r>
 800cd18:	b118      	cbz	r0, 800cd22 <__swbuf_r+0x32>
 800cd1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cd1e:	4638      	mov	r0, r7
 800cd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd22:	6823      	ldr	r3, [r4, #0]
 800cd24:	6922      	ldr	r2, [r4, #16]
 800cd26:	1a98      	subs	r0, r3, r2
 800cd28:	6963      	ldr	r3, [r4, #20]
 800cd2a:	b2f6      	uxtb	r6, r6
 800cd2c:	4283      	cmp	r3, r0
 800cd2e:	4637      	mov	r7, r6
 800cd30:	dc05      	bgt.n	800cd3e <__swbuf_r+0x4e>
 800cd32:	4621      	mov	r1, r4
 800cd34:	4628      	mov	r0, r5
 800cd36:	f7ff f945 	bl	800bfc4 <_fflush_r>
 800cd3a:	2800      	cmp	r0, #0
 800cd3c:	d1ed      	bne.n	800cd1a <__swbuf_r+0x2a>
 800cd3e:	68a3      	ldr	r3, [r4, #8]
 800cd40:	3b01      	subs	r3, #1
 800cd42:	60a3      	str	r3, [r4, #8]
 800cd44:	6823      	ldr	r3, [r4, #0]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	6022      	str	r2, [r4, #0]
 800cd4a:	701e      	strb	r6, [r3, #0]
 800cd4c:	6962      	ldr	r2, [r4, #20]
 800cd4e:	1c43      	adds	r3, r0, #1
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d004      	beq.n	800cd5e <__swbuf_r+0x6e>
 800cd54:	89a3      	ldrh	r3, [r4, #12]
 800cd56:	07db      	lsls	r3, r3, #31
 800cd58:	d5e1      	bpl.n	800cd1e <__swbuf_r+0x2e>
 800cd5a:	2e0a      	cmp	r6, #10
 800cd5c:	d1df      	bne.n	800cd1e <__swbuf_r+0x2e>
 800cd5e:	4621      	mov	r1, r4
 800cd60:	4628      	mov	r0, r5
 800cd62:	f7ff f92f 	bl	800bfc4 <_fflush_r>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d0d9      	beq.n	800cd1e <__swbuf_r+0x2e>
 800cd6a:	e7d6      	b.n	800cd1a <__swbuf_r+0x2a>

0800cd6c <__swsetup_r>:
 800cd6c:	b538      	push	{r3, r4, r5, lr}
 800cd6e:	4b29      	ldr	r3, [pc, #164]	@ (800ce14 <__swsetup_r+0xa8>)
 800cd70:	4605      	mov	r5, r0
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	460c      	mov	r4, r1
 800cd76:	b118      	cbz	r0, 800cd80 <__swsetup_r+0x14>
 800cd78:	6a03      	ldr	r3, [r0, #32]
 800cd7a:	b90b      	cbnz	r3, 800cd80 <__swsetup_r+0x14>
 800cd7c:	f7fd ffd2 	bl	800ad24 <__sinit>
 800cd80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd84:	0719      	lsls	r1, r3, #28
 800cd86:	d422      	bmi.n	800cdce <__swsetup_r+0x62>
 800cd88:	06da      	lsls	r2, r3, #27
 800cd8a:	d407      	bmi.n	800cd9c <__swsetup_r+0x30>
 800cd8c:	2209      	movs	r2, #9
 800cd8e:	602a      	str	r2, [r5, #0]
 800cd90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd94:	81a3      	strh	r3, [r4, #12]
 800cd96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd9a:	e033      	b.n	800ce04 <__swsetup_r+0x98>
 800cd9c:	0758      	lsls	r0, r3, #29
 800cd9e:	d512      	bpl.n	800cdc6 <__swsetup_r+0x5a>
 800cda0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cda2:	b141      	cbz	r1, 800cdb6 <__swsetup_r+0x4a>
 800cda4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cda8:	4299      	cmp	r1, r3
 800cdaa:	d002      	beq.n	800cdb2 <__swsetup_r+0x46>
 800cdac:	4628      	mov	r0, r5
 800cdae:	f7ff fdd3 	bl	800c958 <_free_r>
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdb6:	89a3      	ldrh	r3, [r4, #12]
 800cdb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdbc:	81a3      	strh	r3, [r4, #12]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	6063      	str	r3, [r4, #4]
 800cdc2:	6923      	ldr	r3, [r4, #16]
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	89a3      	ldrh	r3, [r4, #12]
 800cdc8:	f043 0308 	orr.w	r3, r3, #8
 800cdcc:	81a3      	strh	r3, [r4, #12]
 800cdce:	6923      	ldr	r3, [r4, #16]
 800cdd0:	b94b      	cbnz	r3, 800cde6 <__swsetup_r+0x7a>
 800cdd2:	89a3      	ldrh	r3, [r4, #12]
 800cdd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cdd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cddc:	d003      	beq.n	800cde6 <__swsetup_r+0x7a>
 800cdde:	4621      	mov	r1, r4
 800cde0:	4628      	mov	r0, r5
 800cde2:	f000 f83f 	bl	800ce64 <__smakebuf_r>
 800cde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdea:	f013 0201 	ands.w	r2, r3, #1
 800cdee:	d00a      	beq.n	800ce06 <__swsetup_r+0x9a>
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	60a2      	str	r2, [r4, #8]
 800cdf4:	6962      	ldr	r2, [r4, #20]
 800cdf6:	4252      	negs	r2, r2
 800cdf8:	61a2      	str	r2, [r4, #24]
 800cdfa:	6922      	ldr	r2, [r4, #16]
 800cdfc:	b942      	cbnz	r2, 800ce10 <__swsetup_r+0xa4>
 800cdfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce02:	d1c5      	bne.n	800cd90 <__swsetup_r+0x24>
 800ce04:	bd38      	pop	{r3, r4, r5, pc}
 800ce06:	0799      	lsls	r1, r3, #30
 800ce08:	bf58      	it	pl
 800ce0a:	6962      	ldrpl	r2, [r4, #20]
 800ce0c:	60a2      	str	r2, [r4, #8]
 800ce0e:	e7f4      	b.n	800cdfa <__swsetup_r+0x8e>
 800ce10:	2000      	movs	r0, #0
 800ce12:	e7f7      	b.n	800ce04 <__swsetup_r+0x98>
 800ce14:	20000030 	.word	0x20000030

0800ce18 <__swhatbuf_r>:
 800ce18:	b570      	push	{r4, r5, r6, lr}
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce20:	2900      	cmp	r1, #0
 800ce22:	b096      	sub	sp, #88	@ 0x58
 800ce24:	4615      	mov	r5, r2
 800ce26:	461e      	mov	r6, r3
 800ce28:	da0d      	bge.n	800ce46 <__swhatbuf_r+0x2e>
 800ce2a:	89a3      	ldrh	r3, [r4, #12]
 800ce2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce30:	f04f 0100 	mov.w	r1, #0
 800ce34:	bf14      	ite	ne
 800ce36:	2340      	movne	r3, #64	@ 0x40
 800ce38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	6031      	str	r1, [r6, #0]
 800ce40:	602b      	str	r3, [r5, #0]
 800ce42:	b016      	add	sp, #88	@ 0x58
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	466a      	mov	r2, sp
 800ce48:	f000 f848 	bl	800cedc <_fstat_r>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	dbec      	blt.n	800ce2a <__swhatbuf_r+0x12>
 800ce50:	9901      	ldr	r1, [sp, #4]
 800ce52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce5a:	4259      	negs	r1, r3
 800ce5c:	4159      	adcs	r1, r3
 800ce5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce62:	e7eb      	b.n	800ce3c <__swhatbuf_r+0x24>

0800ce64 <__smakebuf_r>:
 800ce64:	898b      	ldrh	r3, [r1, #12]
 800ce66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce68:	079d      	lsls	r5, r3, #30
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	460c      	mov	r4, r1
 800ce6e:	d507      	bpl.n	800ce80 <__smakebuf_r+0x1c>
 800ce70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	6123      	str	r3, [r4, #16]
 800ce78:	2301      	movs	r3, #1
 800ce7a:	6163      	str	r3, [r4, #20]
 800ce7c:	b003      	add	sp, #12
 800ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce80:	ab01      	add	r3, sp, #4
 800ce82:	466a      	mov	r2, sp
 800ce84:	f7ff ffc8 	bl	800ce18 <__swhatbuf_r>
 800ce88:	9f00      	ldr	r7, [sp, #0]
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f7fe ff94 	bl	800bdbc <_malloc_r>
 800ce94:	b948      	cbnz	r0, 800ceaa <__smakebuf_r+0x46>
 800ce96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9a:	059a      	lsls	r2, r3, #22
 800ce9c:	d4ee      	bmi.n	800ce7c <__smakebuf_r+0x18>
 800ce9e:	f023 0303 	bic.w	r3, r3, #3
 800cea2:	f043 0302 	orr.w	r3, r3, #2
 800cea6:	81a3      	strh	r3, [r4, #12]
 800cea8:	e7e2      	b.n	800ce70 <__smakebuf_r+0xc>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	6020      	str	r0, [r4, #0]
 800ceae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceb2:	81a3      	strh	r3, [r4, #12]
 800ceb4:	9b01      	ldr	r3, [sp, #4]
 800ceb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ceba:	b15b      	cbz	r3, 800ced4 <__smakebuf_r+0x70>
 800cebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cec0:	4630      	mov	r0, r6
 800cec2:	f000 f81d 	bl	800cf00 <_isatty_r>
 800cec6:	b128      	cbz	r0, 800ced4 <__smakebuf_r+0x70>
 800cec8:	89a3      	ldrh	r3, [r4, #12]
 800ceca:	f023 0303 	bic.w	r3, r3, #3
 800cece:	f043 0301 	orr.w	r3, r3, #1
 800ced2:	81a3      	strh	r3, [r4, #12]
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	431d      	orrs	r5, r3
 800ced8:	81a5      	strh	r5, [r4, #12]
 800ceda:	e7cf      	b.n	800ce7c <__smakebuf_r+0x18>

0800cedc <_fstat_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d07      	ldr	r5, [pc, #28]	@ (800cefc <_fstat_r+0x20>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	4611      	mov	r1, r2
 800cee8:	602b      	str	r3, [r5, #0]
 800ceea:	f7f5 f99f 	bl	800222c <_fstat>
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	d102      	bne.n	800cef8 <_fstat_r+0x1c>
 800cef2:	682b      	ldr	r3, [r5, #0]
 800cef4:	b103      	cbz	r3, 800cef8 <_fstat_r+0x1c>
 800cef6:	6023      	str	r3, [r4, #0]
 800cef8:	bd38      	pop	{r3, r4, r5, pc}
 800cefa:	bf00      	nop
 800cefc:	2000572c 	.word	0x2000572c

0800cf00 <_isatty_r>:
 800cf00:	b538      	push	{r3, r4, r5, lr}
 800cf02:	4d06      	ldr	r5, [pc, #24]	@ (800cf1c <_isatty_r+0x1c>)
 800cf04:	2300      	movs	r3, #0
 800cf06:	4604      	mov	r4, r0
 800cf08:	4608      	mov	r0, r1
 800cf0a:	602b      	str	r3, [r5, #0]
 800cf0c:	f7f5 f99e 	bl	800224c <_isatty>
 800cf10:	1c43      	adds	r3, r0, #1
 800cf12:	d102      	bne.n	800cf1a <_isatty_r+0x1a>
 800cf14:	682b      	ldr	r3, [r5, #0]
 800cf16:	b103      	cbz	r3, 800cf1a <_isatty_r+0x1a>
 800cf18:	6023      	str	r3, [r4, #0]
 800cf1a:	bd38      	pop	{r3, r4, r5, pc}
 800cf1c:	2000572c 	.word	0x2000572c

0800cf20 <_raise_r>:
 800cf20:	291f      	cmp	r1, #31
 800cf22:	b538      	push	{r3, r4, r5, lr}
 800cf24:	4605      	mov	r5, r0
 800cf26:	460c      	mov	r4, r1
 800cf28:	d904      	bls.n	800cf34 <_raise_r+0x14>
 800cf2a:	2316      	movs	r3, #22
 800cf2c:	6003      	str	r3, [r0, #0]
 800cf2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf32:	bd38      	pop	{r3, r4, r5, pc}
 800cf34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf36:	b112      	cbz	r2, 800cf3e <_raise_r+0x1e>
 800cf38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cf3c:	b94b      	cbnz	r3, 800cf52 <_raise_r+0x32>
 800cf3e:	4628      	mov	r0, r5
 800cf40:	f000 f830 	bl	800cfa4 <_getpid_r>
 800cf44:	4622      	mov	r2, r4
 800cf46:	4601      	mov	r1, r0
 800cf48:	4628      	mov	r0, r5
 800cf4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf4e:	f000 b817 	b.w	800cf80 <_kill_r>
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d00a      	beq.n	800cf6c <_raise_r+0x4c>
 800cf56:	1c59      	adds	r1, r3, #1
 800cf58:	d103      	bne.n	800cf62 <_raise_r+0x42>
 800cf5a:	2316      	movs	r3, #22
 800cf5c:	6003      	str	r3, [r0, #0]
 800cf5e:	2001      	movs	r0, #1
 800cf60:	e7e7      	b.n	800cf32 <_raise_r+0x12>
 800cf62:	2100      	movs	r1, #0
 800cf64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf68:	4620      	mov	r0, r4
 800cf6a:	4798      	blx	r3
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	e7e0      	b.n	800cf32 <_raise_r+0x12>

0800cf70 <raise>:
 800cf70:	4b02      	ldr	r3, [pc, #8]	@ (800cf7c <raise+0xc>)
 800cf72:	4601      	mov	r1, r0
 800cf74:	6818      	ldr	r0, [r3, #0]
 800cf76:	f7ff bfd3 	b.w	800cf20 <_raise_r>
 800cf7a:	bf00      	nop
 800cf7c:	20000030 	.word	0x20000030

0800cf80 <_kill_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d07      	ldr	r5, [pc, #28]	@ (800cfa0 <_kill_r+0x20>)
 800cf84:	2300      	movs	r3, #0
 800cf86:	4604      	mov	r4, r0
 800cf88:	4608      	mov	r0, r1
 800cf8a:	4611      	mov	r1, r2
 800cf8c:	602b      	str	r3, [r5, #0]
 800cf8e:	f7f5 f8ed 	bl	800216c <_kill>
 800cf92:	1c43      	adds	r3, r0, #1
 800cf94:	d102      	bne.n	800cf9c <_kill_r+0x1c>
 800cf96:	682b      	ldr	r3, [r5, #0]
 800cf98:	b103      	cbz	r3, 800cf9c <_kill_r+0x1c>
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	bd38      	pop	{r3, r4, r5, pc}
 800cf9e:	bf00      	nop
 800cfa0:	2000572c 	.word	0x2000572c

0800cfa4 <_getpid_r>:
 800cfa4:	f7f5 b8da 	b.w	800215c <_getpid>

0800cfa8 <_init>:
 800cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfaa:	bf00      	nop
 800cfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfae:	bc08      	pop	{r3}
 800cfb0:	469e      	mov	lr, r3
 800cfb2:	4770      	bx	lr

0800cfb4 <_fini>:
 800cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfb6:	bf00      	nop
 800cfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfba:	bc08      	pop	{r3}
 800cfbc:	469e      	mov	lr, r3
 800cfbe:	4770      	bx	lr
